[
  {
    "package": "com.fasterxml.jackson.core",
    "class": "JsonGenerationException",
    "method": "JsonGenerationException",
    "signature": "JsonGenerationException(String p0, JsonGenerator p1)",
    "type": "none"
  },
  {
    "package": "com.fasterxml.jackson.core",
    "class": "JsonGenerator",
    "method": "getOutputContext",
    "signature": "JsonStreamContext getOutputContext()",
    "type": "none"
  },
  {
    "package": "com.fasterxml.jackson.core",
    "class": "JsonGenerator",
    "method": "writeRaw",
    "signature": "void writeRaw(char p0)",
    "type": "none"
  },
  {
    "package": "com.fasterxml.jackson.core",
    "class": "JsonParser",
    "method": "isExpectedStartArrayToken",
    "signature": "boolean isExpectedStartArrayToken()",
    "type": "none"
  },
  {
    "package": "com.fasterxml.jackson.core",
    "class": "JsonParser",
    "method": "readValueAs",
    "signature": "T readValueAs(Class<T> p0)",
    "type": "none"
  },
  {
    "package": "com.fasterxml.jackson.core.io",
    "class": "CharTypes",
    "method": "get7BitOutputEscapes",
    "signature": "int[] get7BitOutputEscapes()",
    "type": "none"
  },
  {
    "package": "com.fasterxml.jackson.core.json",
    "class": "JsonWriteContext",
    "method": "writeValue",
    "signature": "int writeValue()",
    "type": "none"
  },
  {
    "package": "com.fasterxml.jackson.databind",
    "class": "JsonDeserializer",
    "method": "JsonDeserializer",
    "signature": "JsonDeserializer()",
    "type": "none"
  },
  {
    "package": "com.fasterxml.jackson.databind",
    "class": "JsonNode",
    "method": "asText",
    "signature": "String asText()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "com.fasterxml.jackson.databind",
    "class": "JsonNode",
    "method": "getNodeType",
    "signature": "JsonNodeType getNodeType()",
    "type": "none"
  },
  {
    "package": "com.fasterxml.jackson.databind",
    "class": "JsonNode",
    "method": "has",
    "signature": "boolean has(String p0)",
    "type": "none"
  },
  {
    "package": "com.fasterxml.jackson.databind",
    "class": "JsonNode",
    "method": "isArray",
    "signature": "boolean isArray()",
    "type": "none"
  },
  {
    "package": "com.fasterxml.jackson.databind",
    "class": "JsonNode",
    "method": "isObject",
    "signature": "boolean isObject()",
    "type": "none"
  },
  {
    "package": "com.fasterxml.jackson.databind",
    "class": "JsonNode",
    "method": "toString",
    "signature": "String toString()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "com.fasterxml.jackson.databind",
    "class": "JsonSerializer",
    "method": "JsonSerializer",
    "signature": "JsonSerializer()",
    "type": "none"
  },
  {
    "package": "com.fasterxml.jackson.databind",
    "class": "ObjectMapper",
    "method": "ObjectMapper",
    "signature": "ObjectMapper()",
    "type": "none"
  },
  {
    "package": "com.fasterxml.jackson.databind",
    "class": "ObjectMapper",
    "method": "convertValue",
    "signature": "T convertValue(Object p0, Class<T> p1)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "com.fasterxml.jackson.databind",
    "class": "ObjectMapper",
    "method": "readTree",
    "signature": "JsonNode readTree(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "com.fasterxml.jackson.databind",
    "class": "ObjectMapper",
    "method": "readValue",
    "signature": "T readValue(String p0, Class<T> p1)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "com.fasterxml.jackson.databind",
    "class": "ObjectMapper",
    "method": "registerModule",
    "signature": "ObjectMapper registerModule(Module p0)",
    "type": "none"
  },
  {
    "package": "com.fasterxml.jackson.databind",
    "class": "ObjectMapper",
    "method": "writeValueAsString",
    "signature": "String writeValueAsString(Object p0)",
    "type": "none"
  },
  {
    "package": "com.fasterxml.jackson.databind.module",
    "class": "SimpleModule",
    "method": "SimpleModule",
    "signature": "SimpleModule()",
    "type": "none"
  },
  {
    "package": "com.fasterxml.jackson.databind.module",
    "class": "SimpleModule",
    "method": "addSerializer",
    "signature": "SimpleModule addSerializer(Class<? extends T> p0, JsonSerializer<T> p1)",
    "type": "none"
  },
  {
    "package": "com.fasterxml.jackson.databind.node",
    "class": "JsonNodeFactory",
    "method": "textNode",
    "signature": "TextNode textNode(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "com.fasterxml.jackson.databind.node",
    "class": "ObjectNode",
    "method": "fieldNames",
    "signature": "Iterator<String> fieldNames()",
    "type": "none"
  },
  {
    "package": "com.fasterxml.jackson.databind.node",
    "class": "ObjectNode",
    "method": "get",
    "signature": "JsonNode get(String p0)",
    "type": "none"
  },
  {
    "package": "com.fasterxml.jackson.databind.node",
    "class": "ObjectNode",
    "method": "put",
    "signature": "ObjectNode put(String p0, String p1)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "com.fasterxml.jackson.databind.node",
    "class": "ObjectNode",
    "method": "putObject",
    "signature": "ObjectNode putObject(String p0)",
    "type": "none"
  },
  {
    "package": "com.fasterxml.jackson.databind.node",
    "class": "ObjectNode",
    "method": "remove",
    "signature": "JsonNode remove(String p0)",
    "type": "none"
  },
  {
    "package": "com.fasterxml.jackson.databind.node",
    "class": "ObjectNode",
    "method": "set",
    "signature": "T set(String p0, JsonNode p1)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "com.fizzed.rocker",
    "class": "BindableRockerModel",
    "method": "bind",
    "signature": "BindableRockerModel bind(String p0, Object p1)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "com.fizzed.rocker",
    "class": "BindableRockerModel",
    "method": "render",
    "signature": "T render(RockerOutputFactory<T> p0)",
    "type": "none"
  },
  {
    "package": "com.fizzed.rocker",
    "class": "Rocker",
    "method": "template",
    "signature": "BindableRockerModel template(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "com.fizzed.rocker.runtime",
    "class": "AbstractRockerOutput",
    "method": "AbstractRockerOutput",
    "signature": "AbstractRockerOutput(ContentType p0, Charset p1, int p2)",
    "type": "none"
  },
  {
    "package": "com.fizzed.rocker.runtime",
    "class": "AbstractRockerOutput",
    "method": "AbstractRockerOutput",
    "signature": "AbstractRockerOutput(ContentType p0, String p1, int p2)",
    "type": "none"
  },
  {
    "package": "com.fizzed.rocker.runtime",
    "class": "DefaultRockerModel",
    "method": "DefaultRockerModel",
    "signature": "DefaultRockerModel()",
    "type": "none"
  },
  {
    "package": "com.fizzed.rocker.runtime",
    "class": "DefaultRockerTemplate",
    "method": "DefaultRockerTemplate",
    "signature": "DefaultRockerTemplate(RockerModel p0)",
    "type": "none"
  },
  {
    "package": "com.fizzed.rocker.runtime",
    "class": "Internal",
    "method": "aboutToExecutePosInTemplate",
    "signature": "void aboutToExecutePosInTemplate(int p0, int p1)",
    "type": "none"
  },
  {
    "package": "com.fizzed.rocker.runtime",
    "class": "Internal",
    "method": "renderValue",
    "signature": "void renderValue(DefaultRockerModel p0, boolean p1)",
    "type": "none"
  },
  {
    "package": "com.fizzed.rocker.runtime",
    "class": "Internal",
    "method": "renderValue",
    "signature": "void renderValue(String p0, boolean p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "com.fizzed.rocker.runtime",
    "class": "Internal",
    "method": "setCharset",
    "signature": "void setCharset(String p0)",
    "type": "none"
  },
  {
    "package": "com.fizzed.rocker.runtime",
    "class": "Internal",
    "method": "setContentType",
    "signature": "void setContentType(ContentType p0)",
    "type": "none"
  },
  {
    "package": "com.fizzed.rocker.runtime",
    "class": "Internal",
    "method": "setTemplateName",
    "signature": "void setTemplateName(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "com.fizzed.rocker.runtime",
    "class": "Internal",
    "method": "setTemplatePackageName",
    "signature": "void setTemplatePackageName(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "com.fizzed.rocker.runtime",
    "class": "Internal",
    "method": "writeValue",
    "signature": "void writeValue(byte[] p0)",
    "type": "none"
  },
  {
    "package": "com.fizzed.rocker.runtime",
    "class": "PlainTextUnloadedClassLoader",
    "method": "tryGet",
    "signature": "byte[] tryGet(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "com.fizzed.rocker.runtime",
    "class": "PlainTextUnloadedClassLoader",
    "method": "tryLoad",
    "signature": "PlainTextUnloadedClassLoader tryLoad(ClassLoader p0, String p1, String p2)",
    "sink_args": [
      "p1",
      "p2"
    ],
    "type": "sink"
  },
  {
    "package": "com.github.jknack.handlebars",
    "class": "Builder",
    "method": "build",
    "signature": "Context build()",
    "type": "none"
  },
  {
    "package": "com.github.jknack.handlebars",
    "class": "Builder",
    "method": "resolver",
    "signature": "Builder resolver(ValueResolver[] p0)",
    "type": "none"
  },
  {
    "package": "com.github.jknack.handlebars",
    "class": "Context",
    "method": "newBuilder",
    "signature": "Builder newBuilder(Object p0)",
    "type": "none"
  },
  {
    "package": "com.github.jknack.handlebars",
    "class": "Handlebars",
    "method": "Handlebars",
    "signature": "Handlebars(TemplateLoader p0)",
    "type": "none"
  },
  {
    "package": "com.github.jknack.handlebars",
    "class": "Handlebars",
    "method": "compile",
    "signature": "Template compile(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "com.github.jknack.handlebars",
    "class": "Template",
    "method": "apply",
    "signature": "String apply(Context p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "com.google.gson",
    "class": "Gson",
    "method": "Gson",
    "signature": "Gson()",
    "type": "none"
  },
  {
    "package": "com.google.gson",
    "class": "Gson",
    "method": "toJson",
    "signature": "String toJson(Object p0)",
    "type": "none"
  },
  {
    "package": "com.mitchellbosecke.pebble",
    "class": "Builder",
    "method": "Builder",
    "signature": "Builder()",
    "type": "none"
  },
  {
    "package": "com.mitchellbosecke.pebble",
    "class": "Builder",
    "method": "build",
    "signature": "PebbleEngine build()",
    "type": "none"
  },
  {
    "package": "com.mitchellbosecke.pebble",
    "class": "Builder",
    "method": "cacheActive",
    "signature": "Builder cacheActive(boolean p0)",
    "type": "none"
  },
  {
    "package": "com.mitchellbosecke.pebble",
    "class": "Builder",
    "method": "extension",
    "signature": "Builder extension(Extension[] p0)",
    "type": "none"
  },
  {
    "package": "com.mitchellbosecke.pebble",
    "class": "Builder",
    "method": "loader",
    "signature": "Builder loader(Loader<?> p0)",
    "type": "none"
  },
  {
    "package": "com.mitchellbosecke.pebble",
    "class": "PebbleEngine",
    "method": "getTemplate",
    "signature": "PebbleTemplate getTemplate(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "com.mitchellbosecke.pebble.error",
    "class": "LoaderException",
    "method": "LoaderException",
    "signature": "LoaderException(Throwable p0, String p1)",
    "type": "none"
  },
  {
    "package": "com.mitchellbosecke.pebble.extension",
    "class": "AbstractExtension",
    "method": "AbstractExtension",
    "signature": "AbstractExtension()",
    "type": "none"
  },
  {
    "package": "com.mitchellbosecke.pebble.template",
    "class": "PebbleTemplate",
    "method": "evaluate",
    "signature": "void evaluate(Writer p0, Map<String,Object> p1, Locale p2)",
    "type": "none"
  },
  {
    "package": "com.networknt.schema",
    "class": "BaseJsonValidator",
    "method": "validate",
    "signature": "Set<ValidationMessage> validate(JsonNode p0)",
    "type": "none"
  },
  {
    "package": "com.networknt.schema",
    "class": "JsonSchemaFactory",
    "method": "getInstance",
    "signature": "JsonSchemaFactory getInstance()",
    "type": "none"
  },
  {
    "package": "com.networknt.schema",
    "class": "JsonSchemaFactory",
    "method": "getSchema",
    "signature": "JsonSchema getSchema(JsonNode p0, SchemaValidatorsConfig p1)",
    "type": "none"
  },
  {
    "package": "com.networknt.schema",
    "class": "SchemaValidatorsConfig",
    "method": "SchemaValidatorsConfig",
    "signature": "SchemaValidatorsConfig()",
    "type": "none"
  },
  {
    "package": "com.networknt.schema",
    "class": "SchemaValidatorsConfig",
    "method": "setTypeLoose",
    "signature": "void setTypeLoose(boolean p0)",
    "type": "none"
  },
  {
    "package": "com.networknt.schema",
    "class": "ValidationMessage",
    "method": "getMessage",
    "signature": "String getMessage()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "com.networknt.schema",
    "class": "ValidationMessage",
    "method": "getPath",
    "signature": "String getPath()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "de.neuland.jade4j",
    "class": "JadeConfiguration",
    "method": "JadeConfiguration",
    "signature": "JadeConfiguration()",
    "type": "none"
  },
  {
    "package": "de.neuland.jade4j",
    "class": "JadeConfiguration",
    "method": "getTemplate",
    "signature": "JadeTemplate getTemplate(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "de.neuland.jade4j",
    "class": "JadeConfiguration",
    "method": "renderTemplate",
    "signature": "String renderTemplate(JadeTemplate p0, Map<String,Object> p1)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "de.neuland.jade4j",
    "class": "JadeConfiguration",
    "method": "setCaching",
    "signature": "void setCaching(boolean p0)",
    "type": "none"
  },
  {
    "package": "de.neuland.jade4j",
    "class": "JadeConfiguration",
    "method": "setTemplateLoader",
    "signature": "void setTemplateLoader(TemplateLoader p0)",
    "type": "none"
  },
  {
    "package": "freemarker.cache",
    "class": "NullCacheStorage",
    "method": "NullCacheStorage",
    "signature": "NullCacheStorage()",
    "type": "none"
  },
  {
    "package": "freemarker.template",
    "class": "Configuration",
    "method": "Configuration",
    "signature": "Configuration(Version p0)",
    "type": "none"
  },
  {
    "package": "freemarker.template",
    "class": "Configuration",
    "method": "getIncompatibleImprovements",
    "signature": "Version getIncompatibleImprovements()",
    "type": "none"
  },
  {
    "package": "freemarker.template",
    "class": "Configuration",
    "method": "getTemplate",
    "signature": "Template getTemplate(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "freemarker.template",
    "class": "Configuration",
    "method": "setCacheStorage",
    "signature": "void setCacheStorage(CacheStorage p0)",
    "type": "none"
  },
  {
    "package": "freemarker.template",
    "class": "Configuration",
    "method": "setClassForTemplateLoading",
    "signature": "void setClassForTemplateLoading(Class<> p0, String p1)",
    "type": "none"
  },
  {
    "package": "freemarker.template",
    "class": "Configuration",
    "method": "setObjectWrapper",
    "signature": "void setObjectWrapper(ObjectWrapper p0)",
    "type": "none"
  },
  {
    "package": "freemarker.template",
    "class": "Configuration",
    "method": "setTemplateLoader",
    "signature": "void setTemplateLoader(TemplateLoader p0)",
    "type": "none"
  },
  {
    "package": "freemarker.template",
    "class": "DefaultObjectWrapper",
    "method": "DefaultObjectWrapper",
    "signature": "DefaultObjectWrapper(Version p0)",
    "type": "none"
  },
  {
    "package": "freemarker.template",
    "class": "DefaultObjectWrapper",
    "method": "handleUnknownType",
    "signature": "TemplateModel handleUnknownType(Object p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "freemarker.template",
    "class": "SimpleCollection",
    "method": "SimpleCollection",
    "signature": "SimpleCollection(Collection<> p0, ObjectWrapper p1)",
    "type": "none"
  },
  {
    "package": "freemarker.template",
    "class": "Template",
    "method": "process",
    "signature": "void process(Object p0, Writer p1)",
    "type": "none"
  },
  {
    "package": "freemarker.template",
    "class": "WrappingTemplateModel",
    "method": "WrappingTemplateModel",
    "signature": "WrappingTemplateModel(ObjectWrapper p0)",
    "type": "none"
  },
  {
    "package": "freemarker.template",
    "class": "WrappingTemplateModel",
    "method": "getObjectWrapper",
    "signature": "ObjectWrapper getObjectWrapper()",
    "type": "none"
  },
  {
    "package": "freemarker.template",
    "class": "WrappingTemplateModel",
    "method": "wrap",
    "signature": "TemplateModel wrap(Object p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "graphql",
    "class": "Builder",
    "method": "build",
    "signature": "ExecutionInput build()",
    "type": "none"
  },
  {
    "package": "graphql",
    "class": "Builder",
    "method": "build",
    "signature": "GraphQL build()",
    "type": "none"
  },
  {
    "package": "graphql",
    "class": "Builder",
    "method": "context",
    "signature": "Builder context(Object p0)",
    "type": "none"
  },
  {
    "package": "graphql",
    "class": "Builder",
    "method": "dataLoaderRegistry",
    "signature": "Builder dataLoaderRegistry(DataLoaderRegistry p0)",
    "type": "none"
  },
  {
    "package": "graphql",
    "class": "Builder",
    "method": "instrumentation",
    "signature": "Builder instrumentation(Instrumentation p0)",
    "type": "none"
  },
  {
    "package": "graphql",
    "class": "Builder",
    "method": "locale",
    "signature": "Builder locale(Locale p0)",
    "type": "none"
  },
  {
    "package": "graphql",
    "class": "Builder",
    "method": "operationName",
    "signature": "Builder operationName(String p0)",
    "type": "none"
  },
  {
    "package": "graphql",
    "class": "Builder",
    "method": "query",
    "signature": "Builder query(String p0)",
    "type": "none"
  },
  {
    "package": "graphql",
    "class": "Builder",
    "method": "variables",
    "signature": "Builder variables(Map<String,Object> p0)",
    "type": "none"
  },
  {
    "package": "graphql",
    "class": "ExecutionInput",
    "method": "newExecutionInput",
    "signature": "Builder newExecutionInput()",
    "type": "none"
  },
  {
    "package": "graphql",
    "class": "ExecutionResult",
    "method": "getData",
    "signature": "T getData()",
    "type": "none"
  },
  {
    "package": "graphql",
    "class": "ExecutionResult",
    "method": "toSpecification",
    "signature": "Map<String,Object> toSpecification()",
    "type": "none"
  },
  {
    "package": "graphql",
    "class": "GraphQL",
    "method": "executeAsync",
    "signature": "CompletableFuture<ExecutionResult> executeAsync(Builder p0)",
    "type": "none"
  },
  {
    "package": "graphql",
    "class": "GraphQL",
    "method": "executeAsync",
    "signature": "CompletableFuture<ExecutionResult> executeAsync(ExecutionInput p0)",
    "type": "none"
  },
  {
    "package": "graphql",
    "class": "GraphQL",
    "method": "newGraphQL",
    "signature": "Builder newGraphQL(GraphQLSchema p0)",
    "type": "none"
  },
  {
    "package": "graphql.execution.instrumentation.dataloader",
    "class": "DataLoaderDispatcherInstrumentation",
    "method": "DataLoaderDispatcherInstrumentation",
    "signature": "DataLoaderDispatcherInstrumentation()",
    "type": "none"
  },
  {
    "package": "graphql.language",
    "class": "FieldDefinition",
    "method": "getName",
    "signature": "String getName()",
    "type": "none"
  },
  {
    "package": "graphql.schema",
    "class": "DataFetchingEnvironment",
    "method": "getArgument",
    "signature": "T getArgument(String p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "graphql.schema",
    "class": "DataFetchingEnvironment",
    "method": "getContext",
    "signature": "T getContext()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "graphql.schema",
    "class": "DataFetchingEnvironment",
    "method": "getDataLoader",
    "signature": "DataLoader<K,V> getDataLoader(String p0)",
    "type": "none"
  },
  {
    "package": "graphql.schema",
    "class": "DataFetchingEnvironment",
    "method": "getLocale",
    "signature": "Locale getLocale()",
    "type": "none"
  },
  {
    "package": "graphql.schema",
    "class": "DataFetchingEnvironment",
    "method": "getSource",
    "signature": "T getSource()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "graphql.schema",
    "class": "PropertyDataFetcher",
    "method": "PropertyDataFetcher",
    "signature": "PropertyDataFetcher(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "graphql.schema",
    "class": "PropertyDataFetcher",
    "method": "get",
    "signature": "Object get(DataFetchingEnvironment p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "graphql.schema",
    "class": "PropertyDataFetcher",
    "method": "getPropertyName",
    "signature": "String getPropertyName()",
    "type": "none"
  },
  {
    "package": "graphql.schema.idl",
    "class": "Builder",
    "method": "build",
    "signature": "RuntimeWiring build()",
    "type": "none"
  },
  {
    "package": "graphql.schema.idl",
    "class": "Builder",
    "method": "dataFetcher",
    "signature": "Builder dataFetcher(String p0, DataFetcher<> p1)",
    "type": "none"
  },
  {
    "package": "graphql.schema.idl",
    "class": "Builder",
    "method": "type",
    "signature": "Builder type(String p0, UnaryOperator<Builder> p1)",
    "type": "none"
  },
  {
    "package": "graphql.schema.idl",
    "class": "Builder",
    "method": "wiringFactory",
    "signature": "Builder wiringFactory(WiringFactory p0)",
    "type": "none"
  },
  {
    "package": "graphql.schema.idl",
    "class": "FieldWiringEnvironment",
    "method": "getFieldDefinition",
    "signature": "FieldDefinition getFieldDefinition()",
    "type": "none"
  },
  {
    "package": "graphql.schema.idl",
    "class": "RuntimeWiring",
    "method": "newRuntimeWiring",
    "signature": "Builder newRuntimeWiring()",
    "type": "none"
  },
  {
    "package": "graphql.schema.idl",
    "class": "SchemaGenerator",
    "method": "SchemaGenerator",
    "signature": "SchemaGenerator()",
    "type": "none"
  },
  {
    "package": "graphql.schema.idl",
    "class": "SchemaGenerator",
    "method": "makeExecutableSchema",
    "signature": "GraphQLSchema makeExecutableSchema(TypeDefinitionRegistry p0, RuntimeWiring p1)",
    "type": "none"
  },
  {
    "package": "graphql.schema.idl",
    "class": "SchemaParser",
    "method": "SchemaParser",
    "signature": "SchemaParser()",
    "type": "none"
  },
  {
    "package": "graphql.schema.idl",
    "class": "SchemaParser",
    "method": "parse",
    "signature": "TypeDefinitionRegistry parse(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.netty.buffer",
    "class": "ByteBufHolder",
    "method": "content",
    "signature": "ByteBuf content()",
    "type": "none"
  },
  {
    "package": "io.netty.buffer",
    "class": "UnpooledByteBufAllocator",
    "method": "UnpooledByteBufAllocator",
    "signature": "UnpooledByteBufAllocator(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.netty.handler.codec.http",
    "class": "DefaultFullHttpRequest",
    "method": "DefaultFullHttpRequest",
    "signature": "DefaultFullHttpRequest(HttpVersion p0, HttpMethod p1, String p2)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.netty.handler.codec.http",
    "class": "DefaultFullHttpRequest",
    "method": "content",
    "signature": "ByteBuf content()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.netty.handler.codec.http",
    "class": "DefaultHttpMessage",
    "method": "headers",
    "signature": "HttpHeaders headers()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.netty.handler.codec.http",
    "class": "HttpResponseStatus",
    "method": "code",
    "signature": "int code()",
    "type": "none"
  },
  {
    "package": "io.netty.handler.codec.http",
    "class": "HttpResponseStatus",
    "method": "reasonPhrase",
    "signature": "String reasonPhrase()",
    "type": "none"
  },
  {
    "package": "io.netty.handler.codec.http",
    "class": "HttpResponseStatus",
    "method": "valueOf",
    "signature": "HttpResponseStatus valueOf(int p0)",
    "type": "none"
  },
  {
    "package": "io.netty.handler.codec.http",
    "class": "QueryStringDecoder",
    "method": "QueryStringDecoder",
    "signature": "QueryStringDecoder(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.netty.handler.codec.http",
    "class": "QueryStringDecoder",
    "method": "parameters",
    "signature": "Map<String,List<String>> parameters()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.netty.handler.codec.http",
    "class": "QueryStringEncoder",
    "method": "QueryStringEncoder",
    "signature": "QueryStringEncoder(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.netty.handler.codec.http",
    "class": "QueryStringEncoder",
    "method": "addParam",
    "signature": "void addParam(String p0, String p1)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.netty.handler.codec.http",
    "class": "QueryStringEncoder",
    "method": "toString",
    "signature": "String toString()",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.netty.handler.codec.http",
    "class": "QueryStringEncoder",
    "method": "toUri",
    "signature": "URI toUri()",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.netty.handler.codec.http.cookie",
    "class": "ClientCookieDecoder",
    "method": "decode",
    "signature": "Cookie decode(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.netty.handler.codec.http.cookie",
    "class": "ClientCookieEncoder",
    "method": "encode",
    "signature": "String encode(Cookie p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.netty.handler.codec.http.cookie",
    "class": "Cookie",
    "method": "domain",
    "signature": "String domain()",
    "type": "none"
  },
  {
    "package": "io.netty.handler.codec.http.cookie",
    "class": "Cookie",
    "method": "isSecure",
    "signature": "boolean isSecure()",
    "type": "none"
  },
  {
    "package": "io.netty.handler.codec.http.cookie",
    "class": "Cookie",
    "method": "name",
    "signature": "String name()",
    "type": "none"
  },
  {
    "package": "io.netty.handler.codec.http.cookie",
    "class": "Cookie",
    "method": "path",
    "signature": "String path()",
    "type": "none"
  },
  {
    "package": "io.netty.handler.codec.http.cookie",
    "class": "Cookie",
    "method": "setDomain",
    "signature": "void setDomain(String p0)",
    "type": "none"
  },
  {
    "package": "io.netty.handler.codec.http.cookie",
    "class": "Cookie",
    "method": "setPath",
    "signature": "void setPath(String p0)",
    "type": "none"
  },
  {
    "package": "io.netty.handler.codec.http.cookie",
    "class": "Cookie",
    "method": "setSecure",
    "signature": "void setSecure(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.netty.handler.codec.http.cookie",
    "class": "Cookie",
    "method": "value",
    "signature": "String value()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.netty.handler.codec.http.cookie",
    "class": "DefaultCookie",
    "method": "DefaultCookie",
    "signature": "DefaultCookie(String p0, String p1)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.netty.handler.codec.http.cookie",
    "class": "ServerCookieDecoder",
    "method": "decode",
    "signature": "Set<Cookie> decode(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.netty.handler.codec.http.cookie",
    "class": "ServerCookieEncoder",
    "method": "encode",
    "signature": "String encode(Cookie p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.netty.handler.codec.http.multipart",
    "class": "AbstractMemoryHttpData",
    "method": "setContent",
    "signature": "void setContent(ByteBuf p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.netty.handler.codec.http.multipart",
    "class": "DefaultHttpDataFactory",
    "method": "DefaultHttpDataFactory",
    "signature": "DefaultHttpDataFactory(long p0)",
    "type": "none"
  },
  {
    "package": "io.netty.handler.codec.http.multipart",
    "class": "HttpPostRequestEncoder",
    "method": "HttpPostRequestEncoder",
    "signature": "HttpPostRequestEncoder(HttpDataFactory p0, HttpRequest p1, boolean p2, Charset p3, EncoderMode p4)",
    "type": "none"
  },
  {
    "package": "io.netty.handler.codec.http.multipart",
    "class": "HttpPostRequestEncoder",
    "method": "addBodyAttribute",
    "signature": "void addBodyAttribute(String p0, String p1)",
    "type": "none"
  },
  {
    "package": "io.netty.handler.codec.http.multipart",
    "class": "HttpPostRequestEncoder",
    "method": "addBodyFileUpload",
    "signature": "void addBodyFileUpload(String p0, String p1, File p2, String p3, boolean p4)",
    "sink_args": [
      "p2"
    ],
    "type": "sink"
  },
  {
    "package": "io.netty.handler.codec.http.multipart",
    "class": "HttpPostRequestEncoder",
    "method": "addBodyHttpData",
    "signature": "void addBodyHttpData(InterfaceHttpData p0)",
    "type": "none"
  },
  {
    "package": "io.netty.handler.codec.http.multipart",
    "class": "HttpPostRequestEncoder",
    "method": "finalizeRequest",
    "signature": "HttpRequest finalizeRequest()",
    "type": "none"
  },
  {
    "package": "io.netty.handler.codec.http.multipart",
    "class": "HttpPostRequestEncoder",
    "method": "isChunked",
    "signature": "boolean isChunked()",
    "type": "none"
  },
  {
    "package": "io.netty.handler.codec.http.multipart",
    "class": "HttpPostRequestEncoder",
    "method": "isEndOfInput",
    "signature": "boolean isEndOfInput()",
    "type": "none"
  },
  {
    "package": "io.netty.handler.codec.http.multipart",
    "class": "HttpPostRequestEncoder",
    "method": "readChunk",
    "signature": "HttpContent readChunk(ByteBufAllocator p0)",
    "type": "none"
  },
  {
    "package": "io.netty.handler.codec.http.multipart",
    "class": "MemoryFileUpload",
    "method": "MemoryFileUpload",
    "signature": "MemoryFileUpload(String p0, String p1, String p2, String p3, Charset p4, long p5)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.netty.util",
    "class": "AsciiString",
    "method": "toString",
    "signature": "String toString()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models",
    "class": "Components",
    "method": "getSchemas",
    "signature": "Map<String,Schema<>> getSchemas()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models",
    "class": "OpenAPI",
    "method": "getComponents",
    "signature": "Components getComponents()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models",
    "class": "OpenAPI",
    "method": "getPaths",
    "signature": "Paths getPaths()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models",
    "class": "OpenAPI",
    "method": "getSecurity",
    "signature": "List<SecurityRequirement> getSecurity()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models",
    "class": "Operation",
    "method": "getExtensions",
    "signature": "Map<String,Object> getExtensions()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models",
    "class": "Operation",
    "method": "getOperationId",
    "signature": "String getOperationId()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models",
    "class": "Operation",
    "method": "getParameters",
    "signature": "List<Parameter> getParameters()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models",
    "class": "Operation",
    "method": "getRequestBody",
    "signature": "RequestBody getRequestBody()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models",
    "class": "Operation",
    "method": "getResponses",
    "signature": "ApiResponses getResponses()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models",
    "class": "Operation",
    "method": "getSecurity",
    "signature": "List<SecurityRequirement> getSecurity()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models",
    "class": "Operation",
    "method": "getTags",
    "signature": "List<String> getTags()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models",
    "class": "Operation",
    "method": "setParameters",
    "signature": "void setParameters(List<Parameter> p0)",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models",
    "class": "PathItem",
    "method": "getExtensions",
    "signature": "Map<String,Object> getExtensions()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models",
    "class": "PathItem",
    "method": "getGet",
    "signature": "Operation getGet()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models",
    "class": "PathItem",
    "method": "getParameters",
    "signature": "List<Parameter> getParameters()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models",
    "class": "PathItem",
    "method": "getPost",
    "signature": "Operation getPost()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models",
    "class": "PathItem",
    "method": "readOperations",
    "signature": "List<Operation> readOperations()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models",
    "class": "PathItem",
    "method": "readOperationsMap",
    "signature": "Map<HttpMethod,Operation> readOperationsMap()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.media",
    "class": "ArraySchema",
    "method": "getItems",
    "signature": "Schema<?> getItems()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.media",
    "class": "ComposedSchema",
    "method": "getAllOf",
    "signature": "List<Schema<>> getAllOf()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.media",
    "class": "ComposedSchema",
    "method": "getAnyOf",
    "signature": "List<Schema<>> getAnyOf()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.media",
    "class": "ComposedSchema",
    "method": "getOneOf",
    "signature": "List<Schema<>> getOneOf()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.media",
    "class": "Encoding",
    "method": "getContentType",
    "signature": "String getContentType()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.swagger.v3.oas.models.media",
    "class": "MediaType",
    "method": "getEncoding",
    "signature": "Map<String,Encoding> getEncoding()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.media",
    "class": "MediaType",
    "method": "getSchema",
    "signature": "Schema<> getSchema()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.media",
    "class": "Schema",
    "method": "getAdditionalProperties",
    "signature": "Object getAdditionalProperties()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.media",
    "class": "Schema",
    "method": "getDefault",
    "signature": "Object getDefault()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.media",
    "class": "Schema",
    "method": "getEnum",
    "signature": "List<> getEnum()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.media",
    "class": "Schema",
    "method": "getExclusiveMaximum",
    "signature": "Boolean getExclusiveMaximum()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.media",
    "class": "Schema",
    "method": "getExclusiveMinimum",
    "signature": "Boolean getExclusiveMinimum()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.media",
    "class": "Schema",
    "method": "getFormat",
    "signature": "String getFormat()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.swagger.v3.oas.models.media",
    "class": "Schema",
    "method": "getMaxItems",
    "signature": "Integer getMaxItems()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.media",
    "class": "Schema",
    "method": "getMaxLength",
    "signature": "Integer getMaxLength()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.media",
    "class": "Schema",
    "method": "getMaximum",
    "signature": "BigDecimal getMaximum()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.media",
    "class": "Schema",
    "method": "getMinItems",
    "signature": "Integer getMinItems()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.media",
    "class": "Schema",
    "method": "getMinLength",
    "signature": "Integer getMinLength()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.media",
    "class": "Schema",
    "method": "getMinimum",
    "signature": "BigDecimal getMinimum()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.media",
    "class": "Schema",
    "method": "getMultipleOf",
    "signature": "BigDecimal getMultipleOf()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.media",
    "class": "Schema",
    "method": "getPattern",
    "signature": "String getPattern()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.swagger.v3.oas.models.media",
    "class": "Schema",
    "method": "getProperties",
    "signature": "Map<> getProperties()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.media",
    "class": "Schema",
    "method": "getRequired",
    "signature": "List<> getRequired()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.media",
    "class": "Schema",
    "method": "getType",
    "signature": "String getType()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.swagger.v3.oas.models.parameters",
    "class": "Parameter",
    "method": "get$ref",
    "signature": "String get$ref()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.swagger.v3.oas.models.parameters",
    "class": "Parameter",
    "method": "getAllowEmptyValue",
    "signature": "Boolean getAllowEmptyValue()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.parameters",
    "class": "Parameter",
    "method": "getAllowReserved",
    "signature": "Boolean getAllowReserved()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.parameters",
    "class": "Parameter",
    "method": "getContent",
    "signature": "Content getContent()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.parameters",
    "class": "Parameter",
    "method": "getExplode",
    "signature": "Boolean getExplode()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.parameters",
    "class": "Parameter",
    "method": "getIn",
    "signature": "String getIn()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.swagger.v3.oas.models.parameters",
    "class": "Parameter",
    "method": "getName",
    "signature": "String getName()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.swagger.v3.oas.models.parameters",
    "class": "Parameter",
    "method": "getRequired",
    "signature": "Boolean getRequired()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.parameters",
    "class": "Parameter",
    "method": "getSchema",
    "signature": "Schema<> getSchema()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.parameters",
    "class": "Parameter",
    "method": "getStyle",
    "signature": "StyleEnum getStyle()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.parameters",
    "class": "RequestBody",
    "method": "get$ref",
    "signature": "String get$ref()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.parameters",
    "class": "RequestBody",
    "method": "getContent",
    "signature": "Content getContent()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.parameters",
    "class": "RequestBody",
    "method": "getRequired",
    "signature": "Boolean getRequired()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.parameters",
    "class": "StyleEnum",
    "method": "toString",
    "signature": "String toString()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.oas.models.responses",
    "class": "ApiResponse",
    "method": "getContent",
    "signature": "Content getContent()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.parser",
    "class": "ObjectMapperFactory",
    "method": "createJson",
    "signature": "ObjectMapper createJson()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.parser",
    "class": "OpenAPIV3Parser",
    "method": "OpenAPIV3Parser",
    "signature": "OpenAPIV3Parser()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.parser",
    "class": "OpenAPIV3Parser",
    "method": "readContents",
    "signature": "SwaggerParseResult readContents(String p0, List<AuthorizationValue> p1, ParseOptions p2)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.swagger.v3.parser",
    "class": "OpenAPIV3Parser",
    "method": "readLocation",
    "signature": "SwaggerParseResult readLocation(String p0, List<AuthorizationValue> p1, ParseOptions p2)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.swagger.v3.parser",
    "class": "ResolverCache",
    "method": "ResolverCache",
    "signature": "ResolverCache(OpenAPI p0, List<AuthorizationValue> p1, String p2)",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.parser",
    "class": "ResolverCache",
    "method": "loadRef",
    "signature": "T loadRef(String p0, RefFormat p1, Class<T> p2)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.swagger.v3.parser.core.models",
    "class": "AuthorizationValue",
    "method": "AuthorizationValue",
    "signature": "AuthorizationValue()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.parser.core.models",
    "class": "AuthorizationValue",
    "method": "keyName",
    "signature": "AuthorizationValue keyName(String p0)",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.parser.core.models",
    "class": "AuthorizationValue",
    "method": "type",
    "signature": "AuthorizationValue type(String p0)",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.parser.core.models",
    "class": "AuthorizationValue",
    "method": "value",
    "signature": "AuthorizationValue value(String p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.swagger.v3.parser.core.models",
    "class": "ParseOptions",
    "method": "ParseOptions",
    "signature": "ParseOptions()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.parser.core.models",
    "class": "ParseOptions",
    "method": "setResolve",
    "signature": "void setResolve(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.parser.core.models",
    "class": "ParseOptions",
    "method": "setResolveCombinators",
    "signature": "void setResolveCombinators(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.parser.core.models",
    "class": "ParseOptions",
    "method": "setResolveFully",
    "signature": "void setResolveFully(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.parser.core.models",
    "class": "SwaggerParseResult",
    "method": "getMessages",
    "signature": "List<String> getMessages()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.parser.core.models",
    "class": "SwaggerParseResult",
    "method": "getOpenAPI",
    "signature": "OpenAPI getOpenAPI()",
    "type": "none"
  },
  {
    "package": "io.swagger.v3.parser.util",
    "class": "RefUtils",
    "method": "computeRefFormat",
    "signature": "RefFormat computeRefFormat(String p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.codegen",
    "class": "ClassModel",
    "method": "getIfaceFQCN",
    "signature": "String getIfaceFQCN()",
    "type": "none"
  },
  {
    "package": "io.vertx.codegen",
    "class": "ClassModel",
    "method": "getIfaceSimpleName",
    "signature": "String getIfaceSimpleName()",
    "type": "none"
  },
  {
    "package": "io.vertx.codegen",
    "class": "ClassModel",
    "method": "getImportedTypes",
    "signature": "Set<ClassTypeInfo> getImportedTypes()",
    "type": "none"
  },
  {
    "package": "io.vertx.codegen",
    "class": "CodeGen",
    "method": "getModel",
    "signature": "Model getModel(String p0, String p1)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.codegen",
    "class": "GenException",
    "method": "GenException",
    "signature": "GenException(Element p0, String p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.codegen",
    "class": "MethodInfo",
    "method": "getComment",
    "signature": "String getComment()",
    "type": "none"
  },
  {
    "package": "io.vertx.codegen",
    "class": "MethodInfo",
    "method": "getDeprecatedDesc",
    "signature": "Text getDeprecatedDesc()",
    "type": "none"
  },
  {
    "package": "io.vertx.codegen",
    "class": "MethodInfo",
    "method": "getDoc",
    "signature": "Doc getDoc()",
    "type": "none"
  },
  {
    "package": "io.vertx.codegen",
    "class": "MethodInfo",
    "method": "getKind",
    "signature": "MethodKind getKind()",
    "type": "none"
  },
  {
    "package": "io.vertx.codegen",
    "class": "MethodInfo",
    "method": "getName",
    "signature": "String getName()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.codegen",
    "class": "MethodInfo",
    "method": "getOwnerTypes",
    "signature": "Set<ClassTypeInfo> getOwnerTypes()",
    "type": "none"
  },
  {
    "package": "io.vertx.codegen",
    "class": "MethodInfo",
    "method": "getParams",
    "signature": "List<ParamInfo> getParams()",
    "type": "none"
  },
  {
    "package": "io.vertx.codegen",
    "class": "MethodInfo",
    "method": "getReturnDescription",
    "signature": "Text getReturnDescription()",
    "type": "none"
  },
  {
    "package": "io.vertx.codegen",
    "class": "MethodInfo",
    "method": "getReturnType",
    "signature": "TypeInfo getReturnType()",
    "type": "none"
  },
  {
    "package": "io.vertx.codegen",
    "class": "MethodInfo",
    "method": "getTypeParams",
    "signature": "List<Method> getTypeParams()",
    "type": "none"
  },
  {
    "package": "io.vertx.codegen",
    "class": "MethodInfo",
    "method": "isCacheReturn",
    "signature": "boolean isCacheReturn()",
    "type": "none"
  },
  {
    "package": "io.vertx.codegen",
    "class": "MethodInfo",
    "method": "isDefaultMethod",
    "signature": "boolean isDefaultMethod()",
    "type": "none"
  },
  {
    "package": "io.vertx.codegen",
    "class": "MethodInfo",
    "method": "isDeprecated",
    "signature": "boolean isDeprecated()",
    "type": "none"
  },
  {
    "package": "io.vertx.codegen",
    "class": "MethodInfo",
    "method": "isFluent",
    "signature": "boolean isFluent()",
    "type": "none"
  },
  {
    "package": "io.vertx.codegen",
    "class": "MethodInfo",
    "method": "isStaticMethod",
    "signature": "boolean isStaticMethod()",
    "type": "none"
  },
  {
    "package": "io.vertx.codegen",
    "class": "ParamInfo",
    "method": "getName",
    "signature": "String getName()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.codegen",
    "class": "ParamInfo",
    "method": "getType",
    "signature": "TypeInfo getType()",
    "type": "none"
  },
  {
    "package": "io.vertx.codegen.type",
    "class": "ClassTypeInfo",
    "method": "getPackageName",
    "signature": "String getPackageName()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.codegen.type",
    "class": "ParameterizedTypeInfo",
    "method": "getArg",
    "signature": "TypeInfo getArg(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.codegen.type",
    "class": "TypeInfo",
    "method": "getKind",
    "signature": "ClassKind getKind()",
    "type": "none"
  },
  {
    "package": "io.vertx.codegen.type",
    "class": "TypeInfo",
    "method": "getName",
    "signature": "String getName()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.codegen.type",
    "class": "TypeInfo",
    "method": "toString",
    "signature": "String toString()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.codegen.writer",
    "class": "CodeWriter",
    "method": "code",
    "signature": "CodeWriter code(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.codegen.writer",
    "class": "CodeWriter",
    "method": "indent",
    "signature": "CodeWriter indent()",
    "type": "none"
  },
  {
    "package": "io.vertx.codegen.writer",
    "class": "CodeWriter",
    "method": "indentation",
    "signature": "String indentation()",
    "type": "none"
  },
  {
    "package": "io.vertx.codegen.writer",
    "class": "CodeWriter",
    "method": "stmt",
    "signature": "CodeWriter stmt(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.codegen.writer",
    "class": "CodeWriter",
    "method": "unindent",
    "signature": "CodeWriter unindent()",
    "type": "none"
  },
  {
    "package": "io.vertx.codegen.writer",
    "class": "CodeWriter",
    "method": "writeSeq",
    "signature": "CodeWriter writeSeq(Stream<String> p0, String p1)",
    "sink_args": [
      "p0",
      "p1"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core",
    "class": "AbstractVerticle",
    "method": "AbstractVerticle",
    "signature": "AbstractVerticle()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "cause",
    "signature": "Throwable cause()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "failed",
    "signature": "boolean failed()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "AccessToken result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "AsyncFile result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "AsyncMap<String,Session> result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "BodyStream<T> result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "Boolean result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "Buffer result()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "FileProps result()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "HttpClientRequest result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "HttpClientResponse result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "HttpResponse<> result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "HttpResponse<Buffer> result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "HttpResponse<JsonObject> result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "HttpResponse<T> result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "HttpResponse<User> result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "HttpResponse<Void> result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "HttpServerResponse result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "Integer result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "JsonObject result()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "List<Book> result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "List<Link> result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "List<String> result()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "List<V> result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "Map<K,V> result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "Message<JsonObject> result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "Message<Object> result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "OpenAPI3RouterFactory result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "OperationResponse result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "Session result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "String result()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "T result()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "User result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "result",
    "signature": "Vertx result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "AsyncResult",
    "method": "succeeded",
    "signature": "boolean succeeded()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Context",
    "method": "isOnEventLoopThread",
    "signature": "boolean isOnEventLoopThread()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Context",
    "method": "owner",
    "signature": "Vertx owner()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Context",
    "method": "runOnContext",
    "signature": "void runOnContext(Handler<Void> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "DeploymentOptions",
    "method": "DeploymentOptions",
    "signature": "DeploymentOptions()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "DeploymentOptions",
    "method": "setInstances",
    "signature": "DeploymentOptions setInstances(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Future",
    "method": "failedFuture",
    "signature": "Future<T> failedFuture(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Future",
    "method": "failedFuture",
    "signature": "Future<T> failedFuture(Throwable p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Future",
    "method": "isComplete",
    "signature": "boolean isComplete()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Future",
    "method": "onComplete",
    "signature": "Future<Boolean> onComplete(Handler<AsyncResult<Boolean>> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Future",
    "method": "onComplete",
    "signature": "Future<HttpClientRequest> onComplete(Handler<AsyncResult<HttpClientRequest>> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Future",
    "method": "onComplete",
    "signature": "Future<HttpClientResponse> onComplete(Handler<AsyncResult<HttpClientResponse>> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Future",
    "method": "onComplete",
    "signature": "Future<HttpResponse<T>> onComplete(Handler<AsyncResult<HttpResponse<T>>> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Future",
    "method": "onComplete",
    "signature": "Future<JsonObject> onComplete(Handler<AsyncResult<JsonObject>> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Future",
    "method": "onComplete",
    "signature": "Future<List<V>> onComplete(Handler<AsyncResult<List<V>>> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Future",
    "method": "onComplete",
    "signature": "Future<Map<K,V>> onComplete(Handler<AsyncResult<Map<K,V>>> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Future",
    "method": "onComplete",
    "signature": "Future<T> onComplete(Handler<AsyncResult<T>> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Future",
    "method": "onComplete",
    "signature": "Future<Void> onComplete(Handler<AsyncResult<Void>> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Future",
    "method": "onSuccess",
    "signature": "Future<Void> onSuccess(Handler<Void> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Future",
    "method": "result",
    "signature": "T result()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Future",
    "method": "succeededFuture",
    "signature": "Future<T> succeededFuture()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Future",
    "method": "succeededFuture",
    "signature": "Future<T> succeededFuture(T p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(ApolloWSMessage p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(AsyncResult<AsyncMap<String,Session>> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(AsyncResult<BodyStream<T>> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(AsyncResult<BodyStream<Void>> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(AsyncResult<Boolean> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(AsyncResult<Buffer> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(AsyncResult<FileProps> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(AsyncResult<HttpResponse<T>> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(AsyncResult<Integer> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(AsyncResult<JsonObject> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(AsyncResult<OperationResponse> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(AsyncResult<Session> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(AsyncResult<String> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(AsyncResult<User> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(AsyncResult<Void> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(BridgeEvent p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(Buffer p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(E p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(HttpContext<?> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(HttpServerRequest p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(Object p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(Router p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(RoutingContext p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(ServerWebSocket p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(SockJSSocket p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(Throwable p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(Void p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "MultiMap",
    "method": "add",
    "signature": "MultiMap add(CharSequence p0, CharSequence p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "MultiMap",
    "method": "add",
    "signature": "MultiMap add(String p0, Iterable<String> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "MultiMap",
    "method": "add",
    "signature": "MultiMap add(String p0, String p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "MultiMap",
    "method": "addAll",
    "signature": "MultiMap addAll(MultiMap p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "MultiMap",
    "method": "caseInsensitiveMultiMap",
    "signature": "MultiMap caseInsensitiveMultiMap()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "MultiMap",
    "method": "clear",
    "signature": "MultiMap clear()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "MultiMap",
    "method": "contains",
    "signature": "boolean contains(CharSequence p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "MultiMap",
    "method": "contains",
    "signature": "boolean contains(CharSequence p0, CharSequence p1, boolean p2)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "MultiMap",
    "method": "contains",
    "signature": "boolean contains(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "MultiMap",
    "method": "contains",
    "signature": "boolean contains(String p0, String p1, boolean p2)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "MultiMap",
    "method": "entries",
    "signature": "List<Entry<String,String>> entries()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core",
    "class": "MultiMap",
    "method": "get",
    "signature": "String get(CharSequence p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core",
    "class": "MultiMap",
    "method": "get",
    "signature": "String get(String p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core",
    "class": "MultiMap",
    "method": "getAll",
    "signature": "List<String> getAll(CharSequence p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core",
    "class": "MultiMap",
    "method": "getAll",
    "signature": "List<String> getAll(String p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core",
    "class": "MultiMap",
    "method": "isEmpty",
    "signature": "boolean isEmpty()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "MultiMap",
    "method": "names",
    "signature": "Set<String> names()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core",
    "class": "MultiMap",
    "method": "remove",
    "signature": "MultiMap remove(CharSequence p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "MultiMap",
    "method": "remove",
    "signature": "MultiMap remove(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "MultiMap",
    "method": "set",
    "signature": "MultiMap set(String p0, Iterable<String> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "MultiMap",
    "method": "set",
    "signature": "MultiMap set(String p0, String p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "MultiMap",
    "method": "size",
    "signature": "int size()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "complete",
    "signature": "void complete()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "complete",
    "signature": "void complete(Boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "complete",
    "signature": "void complete(HttpResponse<T> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "complete",
    "signature": "void complete(JsonObject p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "complete",
    "signature": "void complete(List<User> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "complete",
    "signature": "void complete(Map<String,User> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "complete",
    "signature": "void complete(Object p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "complete",
    "signature": "void complete(OpenAPI3RouterFactory p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "complete",
    "signature": "void complete(T p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "fail",
    "signature": "void fail(String p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "fail",
    "signature": "void fail(Throwable p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "future",
    "signature": "Future<Boolean> future()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "future",
    "signature": "Future<HttpClientResponse> future()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "future",
    "signature": "Future<HttpResponse<T>> future()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "future",
    "signature": "Future<JsonObject> future()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "future",
    "signature": "Future<List<V>> future()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "future",
    "signature": "Future<Map<K,V>> future()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "future",
    "signature": "Future<T> future()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "future",
    "signature": "Future<Void> future()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "handle",
    "signature": "void handle(AsyncResult<Boolean> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "promise",
    "signature": "Promise<T> promise()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "tryComplete",
    "signature": "boolean tryComplete()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "tryComplete",
    "signature": "boolean tryComplete(Boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "tryComplete",
    "signature": "boolean tryComplete(T p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "tryFail",
    "signature": "boolean tryFail(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Promise",
    "method": "tryFail",
    "signature": "boolean tryFail(Throwable p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "ServiceHelper",
    "method": "loadFactoryOrNull",
    "signature": "T loadFactoryOrNull(Class<T> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "cancelTimer",
    "signature": "boolean cancelTimer(long p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "close",
    "signature": "void close()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "close",
    "signature": "void close(Handler<AsyncResult<Void>> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "clusteredVertx",
    "signature": "void clusteredVertx(VertxOptions p0, Handler<AsyncResult<Vertx>> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "createHttpClient",
    "signature": "HttpClient createHttpClient(HttpClientOptions p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "createHttpServer",
    "signature": "HttpServer createHttpServer()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "createHttpServer",
    "signature": "HttpServer createHttpServer(HttpServerOptions p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "createNetClient",
    "signature": "NetClient createNetClient(NetClientOptions p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "createNetServer",
    "signature": "NetServer createNetServer()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "currentContext",
    "signature": "Context currentContext()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "deployVerticle",
    "signature": "void deployVerticle(String p0, Handler<AsyncResult<String>> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "deployVerticle",
    "signature": "void deployVerticle(Supplier<Verticle> p0, DeploymentOptions p1, Handler<AsyncResult<String>> p2)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "deployVerticle",
    "signature": "void deployVerticle(Verticle p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "deployVerticle",
    "signature": "void deployVerticle(Verticle p0, Handler<AsyncResult<String>> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "eventBus",
    "signature": "EventBus eventBus()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "exceptionHandler",
    "signature": "Vertx exceptionHandler(Handler<Throwable> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "executeBlocking",
    "signature": "void executeBlocking(Handler<Promise<T>> p0, Handler<AsyncResult<T>> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "executeBlocking",
    "signature": "void executeBlocking(Handler<Promise<T>> p0, boolean p1, Handler<AsyncResult<T>> p2)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "fileSystem",
    "signature": "FileSystem fileSystem()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "getOrCreateContext",
    "signature": "Context getOrCreateContext()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "isClustered",
    "signature": "boolean isClustered()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "runOnContext",
    "signature": "void runOnContext(Handler<Void> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "setPeriodic",
    "signature": "long setPeriodic(long p0, Handler<Long> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "setTimer",
    "signature": "long setTimer(long p0, Handler<Long> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "sharedData",
    "signature": "SharedData sharedData()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "undeploy",
    "signature": "void undeploy(String p0, Handler<AsyncResult<Void>> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "vertx",
    "signature": "Vertx vertx()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "vertx",
    "signature": "Vertx vertx(VertxOptions p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "VertxException",
    "method": "VertxException",
    "signature": "VertxException(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "VertxException",
    "method": "VertxException",
    "signature": "VertxException(Throwable p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "VertxOptions",
    "method": "VertxOptions",
    "signature": "VertxOptions()",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "VertxOptions",
    "method": "setAddressResolverOptions",
    "signature": "VertxOptions setAddressResolverOptions(AddressResolverOptions p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "VertxOptions",
    "method": "setClusterManager",
    "signature": "VertxOptions setClusterManager(ClusterManager p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "VertxOptions",
    "method": "setClustered",
    "signature": "VertxOptions setClustered(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core",
    "class": "VertxOptions",
    "method": "setFileResolverCachingEnabled",
    "signature": "VertxOptions setFileResolverCachingEnabled(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "appendBuffer",
    "signature": "Buffer appendBuffer(Buffer p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "appendByte",
    "signature": "Buffer appendByte(byte p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "appendBytes",
    "signature": "Buffer appendBytes(byte[] p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "appendDouble",
    "signature": "Buffer appendDouble(double p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "appendFloat",
    "signature": "Buffer appendFloat(float p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "appendInt",
    "signature": "Buffer appendInt(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "appendLong",
    "signature": "Buffer appendLong(long p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "appendShort",
    "signature": "Buffer appendShort(short p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "appendString",
    "signature": "Buffer appendString(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "appendUnsignedByte",
    "signature": "Buffer appendUnsignedByte(short p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "buffer",
    "signature": "Buffer buffer()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "buffer",
    "signature": "Buffer buffer(ByteBuf p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "buffer",
    "signature": "Buffer buffer(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "buffer",
    "signature": "Buffer buffer(byte[] p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "buffer",
    "signature": "Buffer buffer(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "getBuffer",
    "signature": "Buffer getBuffer(int p0, int p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "getByte",
    "signature": "byte getByte(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "getByteBuf",
    "signature": "ByteBuf getByteBuf()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "getBytes",
    "signature": "byte[] getBytes()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "getBytes",
    "signature": "byte[] getBytes(int p0, int p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "getDouble",
    "signature": "double getDouble(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "getFloat",
    "signature": "float getFloat(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "getInt",
    "signature": "int getInt(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "getLong",
    "signature": "long getLong(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "getShort",
    "signature": "short getShort(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "getUnsignedByte",
    "signature": "short getUnsignedByte(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "length",
    "signature": "int length()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "slice",
    "signature": "Buffer slice(int p0, int p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "toJson",
    "signature": "Object toJson()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "toJsonArray",
    "signature": "JsonArray toJsonArray()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "toJsonObject",
    "signature": "JsonObject toJsonObject()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "toString",
    "signature": "String toString()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "toString",
    "signature": "String toString(Charset p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.buffer",
    "class": "Buffer",
    "method": "toString",
    "signature": "String toString(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.dns",
    "class": "AddressResolverOptions",
    "method": "AddressResolverOptions",
    "signature": "AddressResolverOptions()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.dns",
    "class": "AddressResolverOptions",
    "method": "setHostsValue",
    "signature": "AddressResolverOptions setHostsValue(Buffer p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "DeliveryOptions",
    "method": "DeliveryOptions",
    "signature": "DeliveryOptions()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "DeliveryOptions",
    "method": "DeliveryOptions",
    "signature": "DeliveryOptions(JsonObject p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "DeliveryOptions",
    "method": "addHeader",
    "signature": "DeliveryOptions addHeader(String p0, String p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "DeliveryOptions",
    "method": "setHeaders",
    "signature": "DeliveryOptions setHeaders(MultiMap p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "DeliveryOptions",
    "method": "setSendTimeout",
    "signature": "DeliveryOptions setSendTimeout(long p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "EventBus",
    "method": "consumer",
    "signature": "MessageConsumer<T> consumer(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "EventBus",
    "method": "consumer",
    "signature": "MessageConsumer<T> consumer(String p0, Handler<Message<T>> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "EventBus",
    "method": "publish",
    "signature": "EventBus publish(String p0, Object p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "EventBus",
    "method": "publish",
    "signature": "EventBus publish(String p0, Object p1, DeliveryOptions p2)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "EventBus",
    "method": "registerDefaultCodec",
    "signature": "EventBus registerDefaultCodec(Class<T> p0, MessageCodec<T,?> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "EventBus",
    "method": "request",
    "signature": "EventBus request(String p0, Object p1, DeliveryOptions p2, Handler<AsyncResult<Message<T>>> p3)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "EventBus",
    "method": "send",
    "signature": "EventBus send(String p0, Object p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "EventBus",
    "method": "send",
    "signature": "EventBus send(String p0, Object p1, DeliveryOptions p2)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "EventBus",
    "method": "send",
    "signature": "EventBus send(String p0, Object p1, DeliveryOptions p2, Handler<AsyncResult<Message<T>>> p3)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "EventBus",
    "method": "send",
    "signature": "EventBus send(String p0, Object p1, Handler<AsyncResult<Message<T>>> p2)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "Message",
    "method": "body",
    "signature": "Buffer body()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "Message",
    "method": "body",
    "signature": "JsonObject body()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "Message",
    "method": "body",
    "signature": "Object body()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "Message",
    "method": "headers",
    "signature": "MultiMap headers()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "Message",
    "method": "reply",
    "signature": "void reply(Object p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "Message",
    "method": "reply",
    "signature": "void reply(Object p0, DeliveryOptions p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "Message",
    "method": "reply",
    "signature": "void reply(Object p0, Handler<AsyncResult<Message<R>>> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "Message",
    "method": "replyAddress",
    "signature": "String replyAddress()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "Message",
    "method": "replyAndRequest",
    "signature": "void replyAndRequest(Object p0, DeliveryOptions p1, Handler<> p2)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "MessageConsumer",
    "method": "address",
    "signature": "String address()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "MessageConsumer",
    "method": "handler",
    "signature": "MessageConsumer<Buffer> handler(Handler<Message<Buffer>> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "MessageConsumer",
    "method": "handler",
    "signature": "MessageConsumer<Object> handler(Handler<Message<Object>> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "MessageConsumer",
    "method": "unregister",
    "signature": "void unregister()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "MessageConsumer",
    "method": "unregister",
    "signature": "void unregister(Handler<AsyncResult<Void>> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "ReplyException",
    "method": "failureCode",
    "signature": "int failureCode()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.eventbus",
    "class": "ReplyException",
    "method": "failureType",
    "signature": "ReplyFailure failureType()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.file",
    "class": "AsyncFile",
    "method": "close",
    "signature": "void close()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.file",
    "class": "AsyncFile",
    "method": "close",
    "signature": "void close(Handler<AsyncResult<Void>> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.file",
    "class": "AsyncFile",
    "method": "write",
    "signature": "AsyncFile write(Buffer p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileProps",
    "method": "isDirectory",
    "signature": "boolean isDirectory()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileProps",
    "method": "lastModifiedTime",
    "signature": "long lastModifiedTime()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileProps",
    "method": "size",
    "signature": "long size()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "delete",
    "signature": "FileSystem delete(String p0, Handler<AsyncResult<Void>> p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "deleteBlocking",
    "signature": "FileSystem deleteBlocking(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "deleteRecursiveBlocking",
    "signature": "FileSystem deleteRecursiveBlocking(String p0, boolean p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "exists",
    "signature": "FileSystem exists(String p0, Handler<AsyncResult<Boolean>> p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "existsBlocking",
    "signature": "boolean existsBlocking(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "mkdirsBlocking",
    "signature": "FileSystem mkdirsBlocking(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "open",
    "signature": "FileSystem open(String p0, OpenOptions p1, Handler<AsyncResult<AsyncFile>> p2)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "openBlocking",
    "signature": "AsyncFile openBlocking(String p0, OpenOptions p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "props",
    "signature": "FileSystem props(String p0, Handler<AsyncResult<FileProps>> p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "propsBlocking",
    "signature": "FileProps propsBlocking(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "readDir",
    "signature": "FileSystem readDir(String p0, Handler<AsyncResult<List<String>>> p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "readDirBlocking",
    "signature": "List<String> readDirBlocking(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "readFileBlocking",
    "signature": "Buffer readFileBlocking(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "writeFileBlocking",
    "signature": "FileSystem writeFileBlocking(String p0, Buffer p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "OpenOptions",
    "method": "OpenOptions",
    "signature": "OpenOptions()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.file",
    "class": "OpenOptions",
    "method": "setSync",
    "signature": "OpenOptions setSync(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.file",
    "class": "OpenOptions",
    "method": "setTruncateExisting",
    "signature": "OpenOptions setTruncateExisting(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "CaseInsensitiveHeaders",
    "method": "CaseInsensitiveHeaders",
    "signature": "CaseInsensitiveHeaders()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "CaseInsensitiveHeaders",
    "method": "add",
    "signature": "MultiMap add(CharSequence p0, CharSequence p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "CaseInsensitiveHeaders",
    "method": "add",
    "signature": "MultiMap add(CharSequence p0, Iterable<CharSequence> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "CaseInsensitiveHeaders",
    "method": "add",
    "signature": "MultiMap add(String p0, Iterable<String> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "CaseInsensitiveHeaders",
    "method": "add",
    "signature": "MultiMap add(String p0, String p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "CaseInsensitiveHeaders",
    "method": "addAll",
    "signature": "MultiMap addAll(MultiMap p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "CaseInsensitiveHeaders",
    "method": "remove",
    "signature": "MultiMap remove(CharSequence p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "CaseInsensitiveHeaders",
    "method": "remove",
    "signature": "MultiMap remove(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "Cookie",
    "method": "cookie",
    "signature": "Cookie cookie(String p0, String p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "Cookie",
    "method": "encode",
    "signature": "String encode()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "Cookie",
    "method": "getDomain",
    "signature": "String getDomain()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "Cookie",
    "method": "getName",
    "signature": "String getName()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "Cookie",
    "method": "getPath",
    "signature": "String getPath()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "Cookie",
    "method": "getSameSite",
    "signature": "CookieSameSite getSameSite()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "Cookie",
    "method": "getValue",
    "signature": "String getValue()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "Cookie",
    "method": "isHttpOnly",
    "signature": "boolean isHttpOnly()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "Cookie",
    "method": "isSecure",
    "signature": "boolean isSecure()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "Cookie",
    "method": "setDomain",
    "signature": "Cookie setDomain(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "Cookie",
    "method": "setHttpOnly",
    "signature": "Cookie setHttpOnly(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "Cookie",
    "method": "setMaxAge",
    "signature": "Cookie setMaxAge(long p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "Cookie",
    "method": "setPath",
    "signature": "Cookie setPath(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "Cookie",
    "method": "setSameSite",
    "signature": "Cookie setSameSite(CookieSameSite p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "Cookie",
    "method": "setSecure",
    "signature": "Cookie setSecure(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "Cookie",
    "method": "setValue",
    "signature": "Cookie setValue(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClient",
    "method": "close",
    "signature": "void close()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClient",
    "method": "get",
    "signature": "HttpClientRequest get(String p0, Handler<HttpClientResponse> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClient",
    "method": "get",
    "signature": "HttpClientRequest get(int p0, String p1, String p2)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClient",
    "method": "get",
    "signature": "HttpClientRequest get(int p0, String p1, String p2, Handler<HttpClientResponse> p3)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClient",
    "method": "getNow",
    "signature": "HttpClient getNow(String p0, Handler<HttpClientResponse> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClient",
    "method": "post",
    "signature": "HttpClientRequest post(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClient",
    "method": "post",
    "signature": "HttpClientRequest post(String p0, Handler<HttpClientResponse> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClient",
    "method": "request",
    "signature": "HttpClientRequest request(HttpMethod p0, String p1, Handler<HttpClientResponse> p2)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClient",
    "method": "request",
    "signature": "HttpClientRequest request(HttpMethod p0, int p1, String p2, String p3)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClient",
    "method": "request",
    "signature": "HttpClientRequest request(HttpMethod p0, int p1, String p2, String p3, Handler<HttpClientResponse> p4)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClient",
    "method": "webSocket",
    "signature": "void webSocket(String p0, Handler<AsyncResult<WebSocket>> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClient",
    "method": "websocket",
    "signature": "HttpClient websocket(String p0, Handler<WebSocket> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClient",
    "method": "websocket",
    "signature": "HttpClient websocket(String p0, MultiMap p1, Handler<WebSocket> p2)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "HttpClientOptions",
    "signature": "HttpClientOptions()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "HttpClientOptions",
    "signature": "HttpClientOptions(HttpClientOptions p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "HttpClientOptions",
    "signature": "HttpClientOptions(JsonObject p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "addCrlPath",
    "signature": "HttpClientOptions addCrlPath(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "addCrlValue",
    "signature": "HttpClientOptions addCrlValue(Buffer p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "addEnabledCipherSuite",
    "signature": "HttpClientOptions addEnabledCipherSuite(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "addEnabledSecureTransportProtocol",
    "signature": "HttpClientOptions addEnabledSecureTransportProtocol(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "getDefaultHost",
    "signature": "String getDefaultHost()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "getDefaultPort",
    "signature": "int getDefaultPort()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "getMaxPoolSize",
    "signature": "int getMaxPoolSize()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "getMaxRedirects",
    "signature": "int getMaxRedirects()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "removeEnabledSecureTransportProtocol",
    "signature": "HttpClientOptions removeEnabledSecureTransportProtocol(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setAlpnVersions",
    "signature": "HttpClientOptions setAlpnVersions(List<HttpVersion> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setConnectTimeout",
    "signature": "HttpClientOptions setConnectTimeout(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setDecoderInitialBufferSize",
    "signature": "HttpClientOptions setDecoderInitialBufferSize(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setDefaultHost",
    "signature": "HttpClientOptions setDefaultHost(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setDefaultPort",
    "signature": "HttpClientOptions setDefaultPort(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setEnabledSecureTransportProtocols",
    "signature": "HttpClientOptions setEnabledSecureTransportProtocols(Set<String> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setForceSni",
    "signature": "HttpClientOptions setForceSni(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setHttp2ClearTextUpgrade",
    "signature": "HttpClientOptions setHttp2ClearTextUpgrade(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setHttp2ConnectionWindowSize",
    "signature": "HttpClientOptions setHttp2ConnectionWindowSize(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setHttp2KeepAliveTimeout",
    "signature": "HttpClientOptions setHttp2KeepAliveTimeout(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setHttp2MaxPoolSize",
    "signature": "HttpClientOptions setHttp2MaxPoolSize(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setHttp2MultiplexingLimit",
    "signature": "HttpClientOptions setHttp2MultiplexingLimit(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setIdleTimeout",
    "signature": "HttpClientOptions setIdleTimeout(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setIdleTimeoutUnit",
    "signature": "HttpClientOptions setIdleTimeoutUnit(TimeUnit p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setInitialSettings",
    "signature": "HttpClientOptions setInitialSettings(Http2Settings p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setJdkSslEngineOptions",
    "signature": "HttpClientOptions setJdkSslEngineOptions(JdkSSLEngineOptions p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setKeepAlive",
    "signature": "HttpClientOptions setKeepAlive(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setKeepAliveTimeout",
    "signature": "HttpClientOptions setKeepAliveTimeout(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setKeyCertOptions",
    "signature": "HttpClientOptions setKeyCertOptions(KeyCertOptions p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setKeyStoreOptions",
    "signature": "HttpClientOptions setKeyStoreOptions(JksOptions p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setLocalAddress",
    "signature": "HttpClientOptions setLocalAddress(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setLogActivity",
    "signature": "HttpClientOptions setLogActivity(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setMaxChunkSize",
    "signature": "HttpClientOptions setMaxChunkSize(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setMaxHeaderSize",
    "signature": "HttpClientOptions setMaxHeaderSize(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setMaxInitialLineLength",
    "signature": "HttpClientOptions setMaxInitialLineLength(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setMaxPoolSize",
    "signature": "HttpClientOptions setMaxPoolSize(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setMaxRedirects",
    "signature": "HttpClientOptions setMaxRedirects(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setMaxWaitQueueSize",
    "signature": "HttpClientOptions setMaxWaitQueueSize(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setMaxWebSocketFrameSize",
    "signature": "HttpClientOptions setMaxWebSocketFrameSize(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setMaxWebSocketMessageSize",
    "signature": "HttpClientOptions setMaxWebSocketMessageSize(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setMetricsName",
    "signature": "HttpClientOptions setMetricsName(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setOpenSslEngineOptions",
    "signature": "HttpClientOptions setOpenSslEngineOptions(OpenSSLEngineOptions p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setPemKeyCertOptions",
    "signature": "HttpClientOptions setPemKeyCertOptions(PemKeyCertOptions p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setPemTrustOptions",
    "signature": "HttpClientOptions setPemTrustOptions(PemTrustOptions p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setPfxKeyCertOptions",
    "signature": "HttpClientOptions setPfxKeyCertOptions(PfxOptions p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setPfxTrustOptions",
    "signature": "HttpClientOptions setPfxTrustOptions(PfxOptions p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setPipelining",
    "signature": "HttpClientOptions setPipelining(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setPipeliningLimit",
    "signature": "HttpClientOptions setPipeliningLimit(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setPoolCleanerPeriod",
    "signature": "HttpClientOptions setPoolCleanerPeriod(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setProtocolVersion",
    "signature": "HttpClientOptions setProtocolVersion(HttpVersion p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setProxyOptions",
    "signature": "HttpClientOptions setProxyOptions(ProxyOptions p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setReceiveBufferSize",
    "signature": "HttpClientOptions setReceiveBufferSize(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setReuseAddress",
    "signature": "HttpClientOptions setReuseAddress(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setReusePort",
    "signature": "HttpClientOptions setReusePort(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setSendBufferSize",
    "signature": "HttpClientOptions setSendBufferSize(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setSendUnmaskedFrames",
    "signature": "HttpClientOptions setSendUnmaskedFrames(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setSoLinger",
    "signature": "HttpClientOptions setSoLinger(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setSsl",
    "signature": "HttpClientOptions setSsl(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setSslEngineOptions",
    "signature": "HttpClientOptions setSslEngineOptions(SSLEngineOptions p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setSslHandshakeTimeout",
    "signature": "HttpClientOptions setSslHandshakeTimeout(long p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setSslHandshakeTimeoutUnit",
    "signature": "HttpClientOptions setSslHandshakeTimeoutUnit(TimeUnit p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setTcpCork",
    "signature": "HttpClientOptions setTcpCork(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setTcpFastOpen",
    "signature": "HttpClientOptions setTcpFastOpen(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setTcpKeepAlive",
    "signature": "HttpClientOptions setTcpKeepAlive(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setTcpNoDelay",
    "signature": "HttpClientOptions setTcpNoDelay(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setTcpQuickAck",
    "signature": "HttpClientOptions setTcpQuickAck(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setTrafficClass",
    "signature": "HttpClientOptions setTrafficClass(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setTrustAll",
    "signature": "HttpClientOptions setTrustAll(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setTrustOptions",
    "signature": "HttpClientOptions setTrustOptions(TrustOptions p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setTrustStoreOptions",
    "signature": "HttpClientOptions setTrustStoreOptions(JksOptions p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setTryUseCompression",
    "signature": "HttpClientOptions setTryUseCompression(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setTryUsePerFrameWebSocketCompression",
    "signature": "HttpClientOptions setTryUsePerFrameWebSocketCompression(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setTryUsePerMessageWebSocketCompression",
    "signature": "HttpClientOptions setTryUsePerMessageWebSocketCompression(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setUseAlpn",
    "signature": "HttpClientOptions setUseAlpn(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setUsePooledBuffers",
    "signature": "HttpClientOptions setUsePooledBuffers(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setVerifyHost",
    "signature": "HttpClientOptions setVerifyHost(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setWebSocketCompressionAllowClientNoContext",
    "signature": "HttpClientOptions setWebSocketCompressionAllowClientNoContext(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setWebSocketCompressionLevel",
    "signature": "HttpClientOptions setWebSocketCompressionLevel(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "setWebSocketCompressionRequestServerNoContext",
    "signature": "HttpClientOptions setWebSocketCompressionRequestServerNoContext(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "toJson",
    "signature": "JsonObject toJson()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientRequest",
    "method": "absoluteURI",
    "signature": "String absoluteURI()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientRequest",
    "method": "connection",
    "signature": "HttpConnection connection()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientRequest",
    "method": "end",
    "signature": "void end()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientRequest",
    "method": "end",
    "signature": "void end(Buffer p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientRequest",
    "method": "end",
    "signature": "void end(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientRequest",
    "method": "exceptionHandler",
    "signature": "HttpClientRequest exceptionHandler(Handler<Throwable> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientRequest",
    "method": "handler",
    "signature": "HttpClientRequest handler(Handler<HttpClientResponse> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientRequest",
    "method": "headers",
    "signature": "MultiMap headers()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientRequest",
    "method": "path",
    "signature": "String path()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientRequest",
    "method": "pushHandler",
    "signature": "HttpClientRequest pushHandler(Handler<HttpClientRequest> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientRequest",
    "method": "putHeader",
    "signature": "HttpClientRequest putHeader(CharSequence p0, CharSequence p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientRequest",
    "method": "putHeader",
    "signature": "HttpClientRequest putHeader(String p0, String p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientRequest",
    "method": "reset",
    "signature": "boolean reset()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientRequest",
    "method": "sendHead",
    "signature": "HttpClientRequest sendHead(Handler<HttpVersion> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientRequest",
    "method": "setChunked",
    "signature": "HttpClientRequest setChunked(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientRequest",
    "method": "setHost",
    "signature": "HttpClientRequest setHost(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientRequest",
    "method": "setRawMethod",
    "signature": "HttpClientRequest setRawMethod(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientRequest",
    "method": "setTimeout",
    "signature": "HttpClientRequest setTimeout(long p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientRequest",
    "method": "write",
    "signature": "HttpClientRequest write(Buffer p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientRequest",
    "method": "write",
    "signature": "HttpClientRequest write(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientRequest",
    "method": "write",
    "signature": "HttpClientRequest write(String p0, String p1)",
    "sink_args": [
      "p0",
      "p1"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientResponse",
    "method": "bodyHandler",
    "signature": "HttpClientResponse bodyHandler(Handler<Buffer> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientResponse",
    "method": "cookies",
    "signature": "List<String> cookies()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientResponse",
    "method": "endHandler",
    "signature": "HttpClientResponse endHandler(Handler<Void> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientResponse",
    "method": "exceptionHandler",
    "signature": "HttpClientResponse exceptionHandler(Handler<Throwable> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientResponse",
    "method": "getHeader",
    "signature": "String getHeader(CharSequence p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientResponse",
    "method": "getHeader",
    "signature": "String getHeader(String p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientResponse",
    "method": "handler",
    "signature": "HttpClientResponse handler(Handler<Buffer> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientResponse",
    "method": "headers",
    "signature": "MultiMap headers()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientResponse",
    "method": "pause",
    "signature": "HttpClientResponse pause()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientResponse",
    "method": "request",
    "signature": "HttpClientRequest request()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientResponse",
    "method": "resume",
    "signature": "HttpClientResponse resume()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientResponse",
    "method": "statusCode",
    "signature": "int statusCode()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientResponse",
    "method": "statusMessage",
    "signature": "String statusMessage()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientResponse",
    "method": "trailers",
    "signature": "MultiMap trailers()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientResponse",
    "method": "version",
    "signature": "HttpVersion version()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpConnection",
    "method": "close",
    "signature": "void close()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpConnection",
    "method": "indicatedServerName",
    "signature": "String indicatedServerName()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpHeaders",
    "method": "createOptimized",
    "signature": "CharSequence createOptimized(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpMethod",
    "method": "valueOf",
    "signature": "HttpMethod valueOf(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServer",
    "method": "actualPort",
    "signature": "int actualPort()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServer",
    "method": "close",
    "signature": "void close()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServer",
    "method": "close",
    "signature": "void close(Handler<AsyncResult<Void>> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServer",
    "method": "listen",
    "signature": "HttpServer listen()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServer",
    "method": "listen",
    "signature": "HttpServer listen(Handler<AsyncResult<HttpServer>> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServer",
    "method": "listen",
    "signature": "HttpServer listen(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServer",
    "method": "listen",
    "signature": "HttpServer listen(int p0, Handler<AsyncResult<HttpServer>> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServer",
    "method": "requestHandler",
    "signature": "HttpServer requestHandler(Handler<HttpServerRequest> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerFileUpload",
    "method": "charset",
    "signature": "String charset()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerFileUpload",
    "method": "contentTransferEncoding",
    "signature": "String contentTransferEncoding()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerFileUpload",
    "method": "contentType",
    "signature": "String contentType()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerFileUpload",
    "method": "endHandler",
    "signature": "HttpServerFileUpload endHandler(Handler<Void> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerFileUpload",
    "method": "exceptionHandler",
    "signature": "HttpServerFileUpload exceptionHandler(Handler<Throwable> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerFileUpload",
    "method": "filename",
    "signature": "String filename()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerFileUpload",
    "method": "handler",
    "signature": "HttpServerFileUpload handler(Handler<Buffer> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerFileUpload",
    "method": "isSizeAvailable",
    "signature": "boolean isSizeAvailable()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerFileUpload",
    "method": "name",
    "signature": "String name()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerFileUpload",
    "method": "size",
    "signature": "long size()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerFileUpload",
    "method": "streamToFileSystem",
    "signature": "HttpServerFileUpload streamToFileSystem(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerOptions",
    "method": "HttpServerOptions",
    "signature": "HttpServerOptions()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerOptions",
    "method": "addWebSocketSubProtocol",
    "signature": "HttpServerOptions addWebSocketSubProtocol(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerOptions",
    "method": "setCompressionSupported",
    "signature": "HttpServerOptions setCompressionSupported(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerOptions",
    "method": "setHost",
    "signature": "HttpServerOptions setHost(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerOptions",
    "method": "setKeyStoreOptions",
    "signature": "HttpServerOptions setKeyStoreOptions(JksOptions p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerOptions",
    "method": "setPemKeyCertOptions",
    "signature": "HttpServerOptions setPemKeyCertOptions(PemKeyCertOptions p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerOptions",
    "method": "setPort",
    "signature": "HttpServerOptions setPort(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerOptions",
    "method": "setSni",
    "signature": "HttpServerOptions setSni(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerOptions",
    "method": "setSsl",
    "signature": "HttpServerOptions setSsl(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerOptions",
    "method": "setUseAlpn",
    "signature": "HttpServerOptions setUseAlpn(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "absoluteURI",
    "signature": "String absoluteURI()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "bodyHandler",
    "signature": "HttpServerRequest bodyHandler(Handler<Buffer> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "bytesRead",
    "signature": "long bytesRead()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "connection",
    "signature": "HttpConnection connection()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "cookieCount",
    "signature": "int cookieCount()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "cookieMap",
    "signature": "Map<String,Cookie> cookieMap()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "customFrameHandler",
    "signature": "HttpServerRequest customFrameHandler(Handler<HttpFrame> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "endHandler",
    "signature": "HttpServerRequest endHandler(Handler<Void> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "exceptionHandler",
    "signature": "HttpServerRequest exceptionHandler(Handler<Throwable> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "fetch",
    "signature": "HttpServerRequest fetch(long p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "formAttributes",
    "signature": "MultiMap formAttributes()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "getCookie",
    "signature": "Cookie getCookie(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "getFormAttribute",
    "signature": "String getFormAttribute(String p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "getHeader",
    "signature": "String getHeader(CharSequence p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "getHeader",
    "signature": "String getHeader(String p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "getParam",
    "signature": "String getParam(String p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "handler",
    "signature": "HttpServerRequest handler(Handler<Buffer> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "headers",
    "signature": "MultiMap headers()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "host",
    "signature": "String host()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "isEnded",
    "signature": "boolean isEnded()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "isExpectMultipart",
    "signature": "boolean isExpectMultipart()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "isSSL",
    "signature": "boolean isSSL()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "localAddress",
    "signature": "SocketAddress localAddress()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "method",
    "signature": "HttpMethod method()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "netSocket",
    "signature": "NetSocket netSocket()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "params",
    "signature": "MultiMap params()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "path",
    "signature": "String path()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "pause",
    "signature": "HttpServerRequest pause()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "peerCertificateChain",
    "signature": "X509Certificate[] peerCertificateChain()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "query",
    "signature": "String query()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "rawMethod",
    "signature": "String rawMethod()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "remoteAddress",
    "signature": "SocketAddress remoteAddress()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "response",
    "signature": "HttpServerResponse response()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "resume",
    "signature": "HttpServerRequest resume()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "scheme",
    "signature": "String scheme()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "setExpectMultipart",
    "signature": "HttpServerRequest setExpectMultipart(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "sslSession",
    "signature": "SSLSession sslSession()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "streamPriority",
    "signature": "StreamPriority streamPriority()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "streamPriorityHandler",
    "signature": "HttpServerRequest streamPriorityHandler(Handler<StreamPriority> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "upgrade",
    "signature": "ServerWebSocket upgrade()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "uploadHandler",
    "signature": "HttpServerRequest uploadHandler(Handler<HttpServerFileUpload> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "uri",
    "signature": "String uri()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerRequest",
    "method": "version",
    "signature": "HttpVersion version()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "addCookie",
    "signature": "HttpServerResponse addCookie(Cookie p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "bodyEndHandler",
    "signature": "HttpServerResponse bodyEndHandler(Handler<Void> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "bytesWritten",
    "signature": "long bytesWritten()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "close",
    "signature": "void close()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "closeHandler",
    "signature": "HttpServerResponse closeHandler(Handler<Void> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "closed",
    "signature": "boolean closed()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "drainHandler",
    "signature": "HttpServerResponse drainHandler(Handler<Void> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "end",
    "signature": "void end()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "end",
    "signature": "void end(Buffer p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "end",
    "signature": "void end(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "endHandler",
    "signature": "HttpServerResponse endHandler(Handler<Void> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "ended",
    "signature": "boolean ended()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "exceptionHandler",
    "signature": "HttpServerResponse exceptionHandler(Handler<Throwable> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "getStatusCode",
    "signature": "int getStatusCode()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "getStatusMessage",
    "signature": "String getStatusMessage()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "headers",
    "signature": "MultiMap headers()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "headersEndHandler",
    "signature": "HttpServerResponse headersEndHandler(Handler<Void> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "push",
    "signature": "HttpServerResponse push(HttpMethod p0, String p1, Handler<AsyncResult<HttpServerResponse>> p2)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "putHeader",
    "signature": "HttpServerResponse putHeader(CharSequence p0, CharSequence p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "putHeader",
    "signature": "HttpServerResponse putHeader(String p0, Iterable<String> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "putHeader",
    "signature": "HttpServerResponse putHeader(String p0, String p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "removeCookie",
    "signature": "Cookie removeCookie(String p0, boolean p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "sendFile",
    "signature": "HttpServerResponse sendFile(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "sendFile",
    "signature": "HttpServerResponse sendFile(String p0, Handler<AsyncResult<Void>> p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "sendFile",
    "signature": "HttpServerResponse sendFile(String p0, long p1, long p2, Handler<AsyncResult<Void>> p3)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "setChunked",
    "signature": "HttpServerResponse setChunked(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "setStatusCode",
    "signature": "HttpServerResponse setStatusCode(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "setStatusMessage",
    "signature": "HttpServerResponse setStatusMessage(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "write",
    "signature": "HttpServerResponse write(Buffer p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "write",
    "signature": "HttpServerResponse write(Buffer p0, Handler<AsyncResult<Void>> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "write",
    "signature": "HttpServerResponse write(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "write",
    "signature": "HttpServerResponse write(String p0, Handler<AsyncResult<Void>> p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpTestBase",
    "method": "HttpTestBase",
    "signature": "HttpTestBase()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpTestBase",
    "method": "setUp",
    "signature": "void setUp()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpTestBase",
    "method": "startProxy",
    "signature": "void startProxy(String p0, ProxyType p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpTestBase",
    "method": "startServer",
    "signature": "void startServer()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpTestBase",
    "method": "startServer",
    "signature": "void startServer(HttpServer p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "RequestOptions",
    "method": "RequestOptions",
    "signature": "RequestOptions()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "RequestOptions",
    "method": "getHost",
    "signature": "String getHost()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "RequestOptions",
    "method": "getPort",
    "signature": "int getPort()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "RequestOptions",
    "method": "getURI",
    "signature": "String getURI()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "RequestOptions",
    "method": "isSsl",
    "signature": "Boolean isSsl()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "RequestOptions",
    "method": "setHost",
    "signature": "RequestOptions setHost(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "RequestOptions",
    "method": "setPort",
    "signature": "RequestOptions setPort(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "RequestOptions",
    "method": "setSsl",
    "signature": "RequestOptions setSsl(Boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "RequestOptions",
    "method": "setURI",
    "signature": "RequestOptions setURI(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.vertx.core.http",
    "class": "ServerWebSocket",
    "method": "close",
    "signature": "void close()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "ServerWebSocket",
    "method": "closeHandler",
    "signature": "ServerWebSocket closeHandler(Handler<Void> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "ServerWebSocket",
    "method": "drainHandler",
    "signature": "ServerWebSocket drainHandler(Handler<Void> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "ServerWebSocket",
    "method": "endHandler",
    "signature": "ServerWebSocket endHandler(Handler<Void> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "ServerWebSocket",
    "method": "exceptionHandler",
    "signature": "ServerWebSocket exceptionHandler(Handler<Throwable> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "ServerWebSocket",
    "method": "fetch",
    "signature": "ServerWebSocket fetch(long p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "ServerWebSocket",
    "method": "pause",
    "signature": "ServerWebSocket pause()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "ServerWebSocket",
    "method": "resume",
    "signature": "ServerWebSocket resume()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "ServerWebSocket",
    "method": "setWriteQueueMaxSize",
    "signature": "ServerWebSocket setWriteQueueMaxSize(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "ServerWebSocket",
    "method": "uri",
    "signature": "String uri()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "ServerWebSocket",
    "method": "writeBinaryMessage",
    "signature": "ServerWebSocket writeBinaryMessage(Buffer p0, Handler<AsyncResult<Void>> p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.http",
    "class": "ServerWebSocket",
    "method": "writeTextMessage",
    "signature": "ServerWebSocket writeTextMessage(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.http",
    "class": "ServerWebSocket",
    "method": "writeTextMessage",
    "signature": "ServerWebSocket writeTextMessage(String p0, Handler<AsyncResult<Void>> p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocket",
    "method": "closeHandler",
    "signature": "WebSocket closeHandler(Handler<Void> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocket",
    "method": "endHandler",
    "signature": "WebSocket endHandler(Handler<Void> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocket",
    "method": "exceptionHandler",
    "signature": "WebSocket exceptionHandler(Handler<Throwable> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocket",
    "method": "frameHandler",
    "signature": "WebSocket frameHandler(Handler<WebSocketFrame> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocket",
    "method": "handler",
    "signature": "WebSocket handler(Handler<Buffer> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocket",
    "method": "write",
    "signature": "WebSocket write(Buffer p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocket",
    "method": "writeFinalBinaryFrame",
    "signature": "WebSocket writeFinalBinaryFrame(Buffer p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocket",
    "method": "writeFrame",
    "signature": "WebSocket writeFrame(WebSocketFrame p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocket",
    "method": "writeTextMessage",
    "signature": "WebSocket writeTextMessage(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocketBase",
    "method": "binaryMessageHandler",
    "signature": "WebSocketBase binaryMessageHandler(Handler<Buffer> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocketBase",
    "method": "close",
    "signature": "void close()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocketBase",
    "method": "close",
    "signature": "void close(short p0, String p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocketBase",
    "method": "end",
    "signature": "void end()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocketBase",
    "method": "headers",
    "signature": "MultiMap headers()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocketBase",
    "method": "isClosed",
    "signature": "boolean isClosed()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocketBase",
    "method": "localAddress",
    "signature": "SocketAddress localAddress()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocketBase",
    "method": "remoteAddress",
    "signature": "SocketAddress remoteAddress()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocketBase",
    "method": "textMessageHandler",
    "signature": "WebSocketBase textMessageHandler(Handler<String> p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocketFrame",
    "method": "binaryData",
    "signature": "Buffer binaryData()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocketFrame",
    "method": "binaryFrame",
    "signature": "WebSocketFrame binaryFrame(Buffer p0, boolean p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocketFrame",
    "method": "closeReason",
    "signature": "String closeReason()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocketFrame",
    "method": "closeStatusCode",
    "signature": "short closeStatusCode()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocketFrame",
    "method": "continuationFrame",
    "signature": "WebSocketFrame continuationFrame(Buffer p0, boolean p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocketFrame",
    "method": "isBinary",
    "signature": "boolean isBinary()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocketFrame",
    "method": "isClose",
    "signature": "boolean isClose()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocketFrame",
    "method": "isText",
    "signature": "boolean isText()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocketFrame",
    "method": "textData",
    "signature": "String textData()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.http",
    "class": "WebSocketFrame",
    "method": "textFrame",
    "signature": "WebSocketFrame textFrame(String p0, boolean p1)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.vertx.core.http.impl",
    "class": "CookieImpl",
    "method": "CookieImpl",
    "signature": "CookieImpl(Cookie p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http.impl",
    "class": "HeadersAdaptor",
    "method": "HeadersAdaptor",
    "signature": "HeadersAdaptor(HttpHeaders p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http.impl",
    "class": "HttpClientImpl",
    "method": "getOptions",
    "signature": "HttpClientOptions getOptions()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http.impl",
    "class": "HttpClientImpl",
    "method": "getVertx",
    "signature": "VertxInternal getVertx()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http.impl",
    "class": "HttpClientImpl",
    "method": "redirectHandler",
    "signature": "Function<HttpClientResponse,Future<HttpClientRequest>> redirectHandler()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http.impl",
    "class": "HttpClientImpl",
    "method": "request",
    "signature": "HttpClientRequest request(HttpMethod p0, SocketAddress p1, RequestOptions p2)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http.impl",
    "class": "HttpClientImpl",
    "method": "request",
    "signature": "HttpClientRequest request(HttpMethod p0, SocketAddress p1, int p2, String p3, String p4)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http.impl",
    "class": "HttpClientImpl",
    "method": "requestAbs",
    "signature": "HttpClientRequest requestAbs(HttpMethod p0, SocketAddress p1, String p2)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http.impl",
    "class": "HttpUtils",
    "method": "normalizePath",
    "signature": "String normalizePath(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.vertx.core.http.impl",
    "class": "HttpUtils",
    "method": "removeDots",
    "signature": "String removeDots(CharSequence p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.vertx.core.http.impl",
    "class": "MimeMapping",
    "method": "getMimeTypeForExtension",
    "signature": "String getMimeTypeForExtension(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.vertx.core.http.impl",
    "class": "MimeMapping",
    "method": "getMimeTypeForFilename",
    "signature": "String getMimeTypeForFilename(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.vertx.core.http.impl",
    "class": "ServerCookie",
    "method": "isChanged",
    "signature": "boolean isChanged()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http.impl",
    "class": "ServerCookie",
    "method": "isFromUserAgent",
    "signature": "boolean isFromUserAgent()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http.impl",
    "class": "ServerCookie",
    "method": "setChanged",
    "signature": "void setChanged(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.http.impl.ws",
    "class": "WebSocketFrameImpl",
    "method": "WebSocketFrameImpl",
    "signature": "WebSocketFrameImpl(FrameType p0, ByteBuf p1, boolean p2)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.impl",
    "class": "NoStackTraceThrowable",
    "method": "NoStackTraceThrowable",
    "signature": "NoStackTraceThrowable(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.impl",
    "class": "StringEscapeUtils",
    "method": "escapeJavaScript",
    "signature": "String escapeJavaScript(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.impl",
    "class": "Utils",
    "method": "Utils",
    "signature": "Utils()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.impl",
    "class": "VertxInternal",
    "method": "getOrCreateContext",
    "signature": "ContextInternal getOrCreateContext()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.impl.launcher.commands",
    "class": "VersionCommand",
    "method": "getVersion",
    "signature": "String getVersion()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "DecodeException",
    "method": "DecodeException",
    "signature": "DecodeException(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "EncodeException",
    "method": "EncodeException",
    "signature": "EncodeException(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonArray",
    "method": "JsonArray",
    "signature": "JsonArray()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonArray",
    "method": "JsonArray",
    "signature": "JsonArray(List<> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonArray",
    "method": "JsonArray",
    "signature": "JsonArray(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonArray",
    "method": "add",
    "signature": "JsonArray add(Integer p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonArray",
    "method": "add",
    "signature": "JsonArray add(JsonObject p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonArray",
    "method": "add",
    "signature": "JsonArray add(Long p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonArray",
    "method": "add",
    "signature": "JsonArray add(Object p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonArray",
    "method": "add",
    "signature": "JsonArray add(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonArray",
    "method": "addAll",
    "signature": "JsonArray addAll(JsonArray p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonArray",
    "method": "contains",
    "signature": "boolean contains(Object p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonArray",
    "method": "encode",
    "signature": "String encode()",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonArray",
    "method": "getJsonObject",
    "signature": "JsonObject getJsonObject(int p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonArray",
    "method": "getList",
    "signature": "List<> getList()",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonArray",
    "method": "getValue",
    "signature": "Object getValue(int p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonArray",
    "method": "isEmpty",
    "signature": "boolean isEmpty()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonArray",
    "method": "size",
    "signature": "int size()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonArray",
    "method": "stream",
    "signature": "Stream<Object> stream()",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonArray",
    "method": "toBuffer",
    "signature": "Buffer toBuffer()",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "JsonObject",
    "signature": "JsonObject()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "JsonObject",
    "signature": "JsonObject(Buffer p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "JsonObject",
    "signature": "JsonObject(Map<String,Object> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "JsonObject",
    "signature": "JsonObject(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "clear",
    "signature": "JsonObject clear()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "containsKey",
    "signature": "boolean containsKey(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "copy",
    "signature": "JsonObject copy()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "encode",
    "signature": "String encode()",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "equals",
    "signature": "boolean equals(Object p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "fieldNames",
    "signature": "Set<String> fieldNames()",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "getBoolean",
    "signature": "Boolean getBoolean(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "getBoolean",
    "signature": "Boolean getBoolean(String p0, Boolean p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "getDouble",
    "signature": "Double getDouble(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "getInteger",
    "signature": "Integer getInteger(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "getInteger",
    "signature": "Integer getInteger(String p0, Integer p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "getJsonArray",
    "signature": "JsonArray getJsonArray(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "getJsonObject",
    "signature": "JsonObject getJsonObject(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "getJsonObject",
    "signature": "JsonObject getJsonObject(String p0, JsonObject p1)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "getLong",
    "signature": "Long getLong(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "getLong",
    "signature": "Long getLong(String p0, Long p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "getMap",
    "signature": "Map<String,Object> getMap()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "getString",
    "signature": "String getString(String p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "getString",
    "signature": "String getString(String p0, String p1)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "getValue",
    "signature": "Object getValue(String p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "isEmpty",
    "signature": "boolean isEmpty()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "mapFrom",
    "signature": "JsonObject mapFrom(Object p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "mapTo",
    "signature": "T mapTo(Class<T> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "mergeIn",
    "signature": "JsonObject mergeIn(JsonObject p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "put",
    "signature": "JsonObject put(String p0, Boolean p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "put",
    "signature": "JsonObject put(String p0, Double p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "put",
    "signature": "JsonObject put(String p0, Enum<> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "put",
    "signature": "JsonObject put(String p0, Float p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "put",
    "signature": "JsonObject put(String p0, Integer p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "put",
    "signature": "JsonObject put(String p0, JsonArray p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "put",
    "signature": "JsonObject put(String p0, JsonObject p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "put",
    "signature": "JsonObject put(String p0, Long p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "put",
    "signature": "JsonObject put(String p0, Object p1)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "put",
    "signature": "JsonObject put(String p0, String p1)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "putNull",
    "signature": "JsonObject putNull(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "remove",
    "signature": "Object remove(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "size",
    "signature": "int size()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "toBuffer",
    "signature": "Buffer toBuffer()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.json",
    "class": "JsonObject",
    "method": "toString",
    "signature": "String toString()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.logging",
    "class": "Logger",
    "method": "debug",
    "signature": "void debug(Object p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.logging",
    "class": "Logger",
    "method": "debug",
    "signature": "void debug(Object p0, Throwable p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.logging",
    "class": "Logger",
    "method": "error",
    "signature": "void error(Object p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.logging",
    "class": "Logger",
    "method": "error",
    "signature": "void error(Object p0, Throwable p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.logging",
    "class": "Logger",
    "method": "info",
    "signature": "void info(Object p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.logging",
    "class": "Logger",
    "method": "info",
    "signature": "void info(Object p0, Object[] p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.logging",
    "class": "Logger",
    "method": "isDebugEnabled",
    "signature": "boolean isDebugEnabled()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.logging",
    "class": "Logger",
    "method": "isTraceEnabled",
    "signature": "boolean isTraceEnabled()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.logging",
    "class": "Logger",
    "method": "isWarnEnabled",
    "signature": "boolean isWarnEnabled()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.logging",
    "class": "Logger",
    "method": "trace",
    "signature": "void trace(Object p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.logging",
    "class": "Logger",
    "method": "trace",
    "signature": "void trace(Object p0, Throwable p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.logging",
    "class": "Logger",
    "method": "warn",
    "signature": "void warn(Object p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.logging",
    "class": "Logger",
    "method": "warn",
    "signature": "void warn(Object p0, Throwable p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.logging",
    "class": "LoggerFactory",
    "method": "getLogger",
    "signature": "Logger getLogger(Class<?> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.net",
    "class": "NetClient",
    "method": "connect",
    "signature": "NetClient connect(int p0, String p1, Handler<AsyncResult<NetSocket>> p2)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.net",
    "class": "NetClientOptions",
    "method": "NetClientOptions",
    "signature": "NetClientOptions()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.net",
    "class": "NetClientOptions",
    "method": "setSoLinger",
    "signature": "NetClientOptions setSoLinger(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.net",
    "class": "NetServer",
    "method": "close",
    "signature": "void close()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.net",
    "class": "NetServer",
    "method": "connectHandler",
    "signature": "NetServer connectHandler(Handler<NetSocket> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.net",
    "class": "NetServer",
    "method": "exceptionHandler",
    "signature": "NetServer exceptionHandler(Handler<Throwable> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.net",
    "class": "NetServer",
    "method": "listen",
    "signature": "NetServer listen(int p0, String p1, Handler<AsyncResult<NetServer>> p2)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.net",
    "class": "NetSocket",
    "method": "close",
    "signature": "void close()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.net",
    "class": "NetSocket",
    "method": "close",
    "signature": "void close(Handler<AsyncResult<Void>> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.net",
    "class": "NetSocket",
    "method": "pause",
    "signature": "NetSocket pause()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.net",
    "class": "NetSocket",
    "method": "resume",
    "signature": "NetSocket resume()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.net",
    "class": "PemKeyCertOptions",
    "method": "PemKeyCertOptions",
    "signature": "PemKeyCertOptions()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.net",
    "class": "PemKeyCertOptions",
    "method": "setCertPath",
    "signature": "PemKeyCertOptions setCertPath(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.net",
    "class": "PemKeyCertOptions",
    "method": "setKeyPath",
    "signature": "PemKeyCertOptions setKeyPath(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.net",
    "class": "PemTrustOptions",
    "method": "PemTrustOptions",
    "signature": "PemTrustOptions()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.net",
    "class": "PemTrustOptions",
    "method": "addCertPath",
    "signature": "PemTrustOptions addCertPath(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.net",
    "class": "ProxyOptions",
    "method": "ProxyOptions",
    "signature": "ProxyOptions()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.net",
    "class": "ProxyOptions",
    "method": "setPort",
    "signature": "ProxyOptions setPort(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.net",
    "class": "SocketAddress",
    "method": "domainSocketAddress",
    "signature": "SocketAddress domainSocketAddress(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.net",
    "class": "SocketAddress",
    "method": "host",
    "signature": "String host()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.net",
    "class": "SocketAddress",
    "method": "inetSocketAddress",
    "signature": "SocketAddress inetSocketAddress(int p0, String p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.net",
    "class": "TCPSSLOptions",
    "method": "isSsl",
    "signature": "boolean isSsl()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.net.impl",
    "class": "URIDecoder",
    "method": "decodeURIComponent",
    "signature": "String decodeURIComponent(String p0, boolean p1)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.shareddata",
    "class": "AsyncMap",
    "method": "clear",
    "signature": "void clear(Handler<AsyncResult<Void>> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.shareddata",
    "class": "AsyncMap",
    "method": "get",
    "signature": "void get(String p0, Handler<AsyncResult<Session>> p1)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.shareddata",
    "class": "AsyncMap",
    "method": "put",
    "signature": "void put(String p0, Session p1, long p2, Handler<AsyncResult<Void>> p3)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.shareddata",
    "class": "AsyncMap",
    "method": "remove",
    "signature": "void remove(String p0, Handler<AsyncResult<Session>> p1)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.shareddata",
    "class": "AsyncMap",
    "method": "size",
    "signature": "void size(Handler<AsyncResult<Integer>> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.shareddata",
    "class": "LocalMap",
    "method": "clear",
    "signature": "void clear()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.shareddata",
    "class": "LocalMap",
    "method": "close",
    "signature": "void close()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.shareddata",
    "class": "LocalMap",
    "method": "computeIfAbsent",
    "signature": "SockJSSession computeIfAbsent(String p0, Function<? super String,? extends SockJSSession> p1)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.shareddata",
    "class": "LocalMap",
    "method": "get",
    "signature": "Session get(Object p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.shareddata",
    "class": "LocalMap",
    "method": "get",
    "signature": "SockJSSession get(Object p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.shareddata",
    "class": "LocalMap",
    "method": "put",
    "signature": "Session put(String p0, Session p1)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.shareddata",
    "class": "LocalMap",
    "method": "remove",
    "signature": "Session remove(Object p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.shareddata",
    "class": "LocalMap",
    "method": "remove",
    "signature": "SockJSSession remove(Object p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.shareddata",
    "class": "LocalMap",
    "method": "size",
    "signature": "int size()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.shareddata",
    "class": "LocalMap",
    "method": "values",
    "signature": "Collection<Session> values()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.shareddata",
    "class": "SharedData",
    "method": "getClusterWideMap",
    "signature": "void getClusterWideMap(String p0, Handler<AsyncResult<AsyncMap<K,V>>> p1)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.shareddata",
    "class": "SharedData",
    "method": "getLocalMap",
    "signature": "LocalMap<K,V> getLocalMap(String p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.shareddata.impl",
    "class": "ClusterSerializable",
    "method": "readFromBuffer",
    "signature": "int readFromBuffer(int p0, Buffer p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.shareddata.impl",
    "class": "ClusterSerializable",
    "method": "writeToBuffer",
    "signature": "void writeToBuffer(Buffer p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.spi.json",
    "class": "JsonCodec",
    "method": "fromBuffer",
    "signature": "T fromBuffer(Buffer p0, Class<T> p1)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.spi.json",
    "class": "JsonCodec",
    "method": "toBuffer",
    "signature": "Buffer toBuffer(Object p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.core.streams",
    "class": "Pump",
    "method": "pump",
    "signature": "Pump pump(ReadStream<T> p0, WriteStream<T> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams",
    "class": "Pump",
    "method": "start",
    "signature": "Pump start()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams",
    "class": "Pump",
    "method": "stop",
    "signature": "Pump stop()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams",
    "class": "ReadStream",
    "method": "endHandler",
    "signature": "ReadStream<Buffer> endHandler(Handler<Void> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams",
    "class": "ReadStream",
    "method": "exceptionHandler",
    "signature": "ReadStream<Buffer> exceptionHandler(Handler<Throwable> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams",
    "class": "ReadStream",
    "method": "pause",
    "signature": "ReadStream<Buffer> pause()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams",
    "class": "ReadStream",
    "method": "pipeTo",
    "signature": "void pipeTo(WriteStream<Buffer> p0, Handler<AsyncResult<Void>> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams",
    "class": "ReadStream",
    "method": "resume",
    "signature": "ReadStream<Buffer> resume()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams",
    "class": "WriteStream",
    "method": "drainHandler",
    "signature": "WriteStream<Buffer> drainHandler(Handler<Void> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams",
    "class": "WriteStream",
    "method": "end",
    "signature": "void end()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams",
    "class": "WriteStream",
    "method": "end",
    "signature": "void end(Handler<AsyncResult<Void>> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams",
    "class": "WriteStream",
    "method": "exceptionHandler",
    "signature": "WriteStream<Buffer> exceptionHandler(Handler<Throwable> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams",
    "class": "WriteStream",
    "method": "setWriteQueueMaxSize",
    "signature": "WriteStream<Buffer> setWriteQueueMaxSize(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams",
    "class": "WriteStream",
    "method": "write",
    "signature": "WriteStream<Buffer> write(Buffer p0, Handler<AsyncResult<Void>> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams",
    "class": "WriteStream",
    "method": "writeQueueFull",
    "signature": "boolean writeQueueFull()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams.impl",
    "class": "InboundBuffer",
    "method": "InboundBuffer<Buffer>",
    "signature": "InboundBuffer<Buffer>(Context p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams.impl",
    "class": "InboundBuffer",
    "method": "InboundBuffer<Object>",
    "signature": "InboundBuffer<Object>(Context p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams.impl",
    "class": "InboundBuffer",
    "method": "clear",
    "signature": "InboundBuffer<Buffer> clear()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams.impl",
    "class": "InboundBuffer",
    "method": "drainHandler",
    "signature": "InboundBuffer<Object> drainHandler(Handler<Void> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams.impl",
    "class": "InboundBuffer",
    "method": "fetch",
    "signature": "boolean fetch(long p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams.impl",
    "class": "InboundBuffer",
    "method": "handler",
    "signature": "InboundBuffer<Buffer> handler(Handler<Buffer> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams.impl",
    "class": "InboundBuffer",
    "method": "handler",
    "signature": "InboundBuffer<Object> handler(Handler<Object> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams.impl",
    "class": "InboundBuffer",
    "method": "pause",
    "signature": "InboundBuffer<Buffer> pause()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams.impl",
    "class": "InboundBuffer",
    "method": "pause",
    "signature": "InboundBuffer<Object> pause()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams.impl",
    "class": "InboundBuffer",
    "method": "resume",
    "signature": "boolean resume()",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams.impl",
    "class": "InboundBuffer",
    "method": "write",
    "signature": "boolean write(Buffer p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.core.streams.impl",
    "class": "InboundBuffer",
    "method": "write",
    "signature": "boolean write(Object p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth",
    "class": "AuthProvider",
    "method": "authenticate",
    "signature": "void authenticate(JsonObject p0, Handler<AsyncResult<User>> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth",
    "class": "JWTOptions",
    "method": "setAlgorithm",
    "signature": "JWTOptions setAlgorithm(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth",
    "class": "KeyStoreOptions",
    "method": "KeyStoreOptions",
    "signature": "KeyStoreOptions()",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth",
    "class": "KeyStoreOptions",
    "method": "setPassword",
    "signature": "KeyStoreOptions setPassword(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth",
    "class": "KeyStoreOptions",
    "method": "setPath",
    "signature": "KeyStoreOptions setPath(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth",
    "class": "KeyStoreOptions",
    "method": "setType",
    "signature": "KeyStoreOptions setType(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth",
    "class": "PRNG",
    "method": "PRNG",
    "signature": "PRNG(Vertx p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth",
    "class": "PRNG",
    "method": "close",
    "signature": "void close()",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth",
    "class": "PRNG",
    "method": "nextBytes",
    "signature": "void nextBytes(byte[] p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth",
    "class": "PubSecKeyOptions",
    "method": "PubSecKeyOptions",
    "signature": "PubSecKeyOptions()",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth",
    "class": "PubSecKeyOptions",
    "method": "setAlgorithm",
    "signature": "PubSecKeyOptions setAlgorithm(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth",
    "class": "PubSecKeyOptions",
    "method": "setPublicKey",
    "signature": "PubSecKeyOptions setPublicKey(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth",
    "class": "User",
    "method": "isAuthorized",
    "signature": "User isAuthorized(String p0, Handler<AsyncResult<Boolean>> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth",
    "class": "User",
    "method": "principal",
    "signature": "JsonObject principal()",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth",
    "class": "User",
    "method": "setAuthProvider",
    "signature": "void setAuthProvider(AuthProvider p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.htdigest",
    "class": "HtdigestAuth",
    "method": "create",
    "signature": "HtdigestAuth create(Vertx p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.htdigest",
    "class": "HtdigestAuth",
    "method": "realm",
    "signature": "String realm()",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.impl",
    "class": "AuthProviderInternal",
    "method": "verifyIsUsingPassword",
    "signature": "void verifyIsUsingPassword()",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.jwt",
    "class": "JWTAuth",
    "method": "create",
    "signature": "JWTAuth create(Vertx p0, JWTAuthOptions p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.jwt",
    "class": "JWTAuth",
    "method": "generateToken",
    "signature": "String generateToken(JsonObject p0, JWTOptions p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.jwt",
    "class": "JWTAuthOptions",
    "method": "JWTAuthOptions",
    "signature": "JWTAuthOptions()",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.jwt",
    "class": "JWTAuthOptions",
    "method": "JWTAuthOptions",
    "signature": "JWTAuthOptions(JsonObject p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.jwt",
    "class": "JWTAuthOptions",
    "method": "setKeyStore",
    "signature": "JWTAuthOptions setKeyStore(KeyStoreOptions p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.oauth2",
    "class": "OAuth2Auth",
    "method": "authorizeURL",
    "signature": "String authorizeURL(JsonObject p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.oauth2",
    "class": "OAuth2Auth",
    "method": "create",
    "signature": "OAuth2Auth create(Vertx p0, OAuth2ClientOptions p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.oauth2",
    "class": "OAuth2Auth",
    "method": "create",
    "signature": "OAuth2Auth create(Vertx p0, OAuth2FlowType p1, OAuth2ClientOptions p2)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.oauth2",
    "class": "OAuth2Auth",
    "method": "decodeToken",
    "signature": "OAuth2Auth decodeToken(String p0, Handler<AsyncResult<AccessToken>> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.oauth2",
    "class": "OAuth2Auth",
    "method": "getFlowType",
    "signature": "OAuth2FlowType getFlowType()",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.oauth2",
    "class": "OAuth2ClientOptions",
    "method": "OAuth2ClientOptions",
    "signature": "OAuth2ClientOptions()",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.oauth2",
    "class": "OAuth2ClientOptions",
    "method": "addPubSecKey",
    "signature": "OAuth2ClientOptions addPubSecKey(PubSecKeyOptions p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.oauth2",
    "class": "OAuth2ClientOptions",
    "method": "setAuthorizationPath",
    "signature": "OAuth2ClientOptions setAuthorizationPath(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.oauth2",
    "class": "OAuth2ClientOptions",
    "method": "setClientID",
    "signature": "OAuth2ClientOptions setClientID(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.oauth2",
    "class": "OAuth2ClientOptions",
    "method": "setClientSecret",
    "signature": "OAuth2ClientOptions setClientSecret(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.oauth2",
    "class": "OAuth2ClientOptions",
    "method": "setFlow",
    "signature": "OAuth2ClientOptions setFlow(OAuth2FlowType p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.oauth2",
    "class": "OAuth2ClientOptions",
    "method": "setSite",
    "signature": "OAuth2ClientOptions setSite(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.oauth2",
    "class": "OAuth2ClientOptions",
    "method": "setTokenPath",
    "signature": "OAuth2ClientOptions setTokenPath(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.oauth2.providers",
    "class": "GithubAuth",
    "method": "create",
    "signature": "OAuth2Auth create(Vertx p0, String p1, String p2)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.shiro",
    "class": "ShiroAuth",
    "method": "create",
    "signature": "ShiroAuth create(Vertx p0, ShiroAuthOptions p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.shiro",
    "class": "ShiroAuthOptions",
    "method": "ShiroAuthOptions",
    "signature": "ShiroAuthOptions()",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.shiro",
    "class": "ShiroAuthOptions",
    "method": "setConfig",
    "signature": "ShiroAuthOptions setConfig(JsonObject p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.auth.shiro",
    "class": "ShiroAuthOptions",
    "method": "setType",
    "signature": "ShiroAuthOptions setType(ShiroAuthRealmType p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.bridge",
    "class": "BaseBridgeEvent",
    "method": "getRawMessage",
    "signature": "JsonObject getRawMessage()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.ext.bridge",
    "class": "BaseBridgeEvent",
    "method": "type",
    "signature": "BridgeEventType type()",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.bridge",
    "class": "PermittedOptions",
    "method": "PermittedOptions",
    "signature": "PermittedOptions()",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.bridge",
    "class": "PermittedOptions",
    "method": "PermittedOptions",
    "signature": "PermittedOptions(JsonObject p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.bridge",
    "class": "PermittedOptions",
    "method": "PermittedOptions",
    "signature": "PermittedOptions(PermittedOptions p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.bridge",
    "class": "PermittedOptions",
    "method": "getAddress",
    "signature": "String getAddress()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.ext.bridge",
    "class": "PermittedOptions",
    "method": "getAddressRegex",
    "signature": "String getAddressRegex()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.ext.bridge",
    "class": "PermittedOptions",
    "method": "getMatch",
    "signature": "JsonObject getMatch()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.ext.bridge",
    "class": "PermittedOptions",
    "method": "getRequiredAuthority",
    "signature": "String getRequiredAuthority()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.ext.bridge",
    "class": "PermittedOptions",
    "method": "setAddress",
    "signature": "PermittedOptions setAddress(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.ext.bridge",
    "class": "PermittedOptions",
    "method": "setAddressRegex",
    "signature": "PermittedOptions setAddressRegex(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.ext.bridge",
    "class": "PermittedOptions",
    "method": "setMatch",
    "signature": "PermittedOptions setMatch(JsonObject p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.ext.bridge",
    "class": "PermittedOptions",
    "method": "setRequiredAuthority",
    "signature": "PermittedOptions setRequiredAuthority(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.ext.jwt",
    "class": "JWK",
    "method": "JWK",
    "signature": "JWK(String p0, String p1, String p2)",
    "sink_args": [
      "p0",
      "p1",
      "p2"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.ext.jwt",
    "class": "JWT",
    "method": "JWT",
    "signature": "JWT()",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.jwt",
    "class": "JWT",
    "method": "addJWK",
    "signature": "JWT addJWK(JWK p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.jwt",
    "class": "JWT",
    "method": "sign",
    "signature": "String sign(JsonObject p0, JWTOptions p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.ext.jwt",
    "class": "JWTOptions",
    "method": "JWTOptions",
    "signature": "JWTOptions()",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.unit",
    "class": "Async",
    "method": "complete",
    "signature": "void complete()",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.unit",
    "class": "Async",
    "method": "countDown",
    "signature": "void countDown()",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.unit",
    "class": "Completion",
    "method": "await",
    "signature": "void await()",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.unit",
    "class": "Completion",
    "method": "awaitSuccess",
    "signature": "void awaitSuccess(long p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.unit",
    "class": "TestContext",
    "method": "assertEquals",
    "signature": "TestContext assertEquals(Object p0, Object p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.unit",
    "class": "TestContext",
    "method": "assertEquals",
    "signature": "TestContext assertEquals(Object p0, Object p1, String p2)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.unit",
    "class": "TestContext",
    "method": "assertFalse",
    "signature": "TestContext assertFalse(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.unit",
    "class": "TestContext",
    "method": "assertFalse",
    "signature": "TestContext assertFalse(boolean p0, String p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.unit",
    "class": "TestContext",
    "method": "assertTrue",
    "signature": "TestContext assertTrue(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.unit",
    "class": "TestContext",
    "method": "async",
    "signature": "Async async()",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.unit",
    "class": "TestContext",
    "method": "async",
    "signature": "Async async(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.unit",
    "class": "TestContext",
    "method": "asyncAssertSuccess",
    "signature": "Handler<AsyncResult<T>> asyncAssertSuccess()",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.unit",
    "class": "TestContext",
    "method": "asyncAssertSuccess",
    "signature": "Handler<AsyncResult<T>> asyncAssertSuccess(Handler<T> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.unit",
    "class": "TestContext",
    "method": "fail",
    "signature": "void fail(Throwable p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.ext.unit.junit",
    "class": "RepeatRule",
    "method": "RepeatRule",
    "signature": "RepeatRule()",
    "type": "none"
  },
  {
    "package": "io.vertx.serviceproxy",
    "class": "HelperUtils",
    "method": "convertList",
    "signature": "List<T> convertList(List<> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.serviceproxy",
    "class": "HelperUtils",
    "method": "convertMap",
    "signature": "Map<String,T> convertMap(Map<> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.serviceproxy",
    "class": "HelperUtils",
    "method": "convertSet",
    "signature": "Set<T> convertSet(List<> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.serviceproxy",
    "class": "ProxyHandler",
    "method": "ProxyHandler",
    "signature": "ProxyHandler()",
    "type": "none"
  },
  {
    "package": "io.vertx.serviceproxy",
    "class": "ProxyHandler",
    "method": "close",
    "signature": "void close()",
    "type": "none"
  },
  {
    "package": "io.vertx.serviceproxy",
    "class": "ServiceBinder",
    "method": "ServiceBinder",
    "signature": "ServiceBinder(Vertx p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.serviceproxy",
    "class": "ServiceBinder",
    "method": "register",
    "signature": "MessageConsumer<JsonObject> register(Class<T> p0, T p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.serviceproxy",
    "class": "ServiceBinder",
    "method": "setAddress",
    "signature": "ServiceBinder setAddress(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.serviceproxy",
    "class": "ServiceBinder",
    "method": "unregister",
    "signature": "void unregister(MessageConsumer<JsonObject> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.serviceproxy",
    "class": "ServiceException",
    "method": "ServiceException",
    "signature": "ServiceException(int p0, String p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.serviceproxy",
    "class": "ServiceExceptionMessageCodec",
    "method": "ServiceExceptionMessageCodec",
    "signature": "ServiceExceptionMessageCodec()",
    "type": "none"
  },
  {
    "package": "io.vertx.serviceproxy.generator",
    "class": "GeneratorUtils",
    "method": "GeneratorUtils",
    "signature": "GeneratorUtils()",
    "type": "none"
  },
  {
    "package": "io.vertx.serviceproxy.generator",
    "class": "GeneratorUtils",
    "method": "loadResource",
    "signature": "String loadResource(String p0, String p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.serviceproxy.generator",
    "class": "ServiceProxyHandlerGen",
    "method": "ServiceProxyHandlerGen",
    "signature": "ServiceProxyHandlerGen(GeneratorUtils p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.serviceproxy.generator",
    "class": "ServiceProxyHandlerGen",
    "method": "generateActionSwitchEntry",
    "signature": "void generateActionSwitchEntry(ProxyMethodInfo p0, CodeWriter p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.serviceproxy.generator.model",
    "class": "ProxyMethodInfo",
    "method": "ProxyMethodInfo",
    "signature": "ProxyMethodInfo(Set<ClassTypeInfo> p0, String p1, TypeInfo p2, Text p3, boolean p4, boolean p5, List<ParamInfo> p6, String p7, Doc p8, boolean p9, boolean p10, List<Method> p11, boolean p12, boolean p13, boolean p14, Text p15)",
    "type": "none"
  },
  {
    "package": "io.vertx.serviceproxy.generator.model",
    "class": "ProxyMethodInfo",
    "method": "isProxyClose",
    "signature": "boolean isProxyClose()",
    "type": "none"
  },
  {
    "package": "io.vertx.serviceproxy.generator.model",
    "class": "ProxyMethodInfo",
    "method": "isProxyIgnore",
    "signature": "boolean isProxyIgnore()",
    "type": "none"
  },
  {
    "package": "io.vertx.serviceproxy.generator.model",
    "class": "ProxyModel",
    "method": "ProxyModel",
    "signature": "ProxyModel(ProcessingEnvironment p0, TypeElement p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.serviceproxy.generator.model",
    "class": "ProxyModel",
    "method": "checkParamType",
    "signature": "void checkParamType(ExecutableElement p0, TypeMirror p1, TypeInfo p2, int p3, int p4, boolean p5)",
    "type": "none"
  },
  {
    "package": "io.vertx.serviceproxy.generator.model",
    "class": "ProxyModel",
    "method": "createMethodInfo",
    "signature": "MethodInfo createMethodInfo(Set<ClassTypeInfo> p0, String p1, String p2, Doc p3, TypeInfo p4, Text p5, boolean p6, boolean p7, List<ParamInfo> p8, ExecutableElement p9, boolean p10, boolean p11, ArrayList<Method> p12, TypeElement p13, boolean p14, Text p15)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.codegen",
    "class": "GeneratorHelper",
    "method": "GeneratorHelper",
    "signature": "GeneratorHelper()",
    "type": "none"
  },
  {
    "package": "io.vertx.test.codegen",
    "class": "GeneratorHelper",
    "method": "generateClass",
    "signature": "M generateClass(Function<CodeGen,M> p0, Class<> p1, Class<> p2, Class<>[] p3)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "assertEquals",
    "signature": "void assertEquals(Object p0, Object p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "assertEquals",
    "signature": "void assertEquals(String p0, Object p1, Object p2)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "assertEquals",
    "signature": "void assertEquals(String p0, long p1, long p2)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "assertEquals",
    "signature": "void assertEquals(double p0, double p1, double p2)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "assertEquals",
    "signature": "void assertEquals(long p0, long p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "assertFalse",
    "signature": "void assertFalse(String p0, boolean p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "assertFalse",
    "signature": "void assertFalse(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "assertNotNull",
    "signature": "void assertNotNull(Object p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "assertNotSame",
    "signature": "void assertNotSame(Object p0, Object p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "assertNull",
    "signature": "void assertNull(Object p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "assertSame",
    "signature": "void assertSame(Object p0, Object p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "assertThat",
    "signature": "void assertThat(T p0, Matcher<T> p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "assertTrue",
    "signature": "void assertTrue(String p0, boolean p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "assertTrue",
    "signature": "void assertTrue(boolean p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "assertWaitUntil",
    "signature": "void assertWaitUntil(BooleanSupplier p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "assertWaitUntil",
    "signature": "void assertWaitUntil(BooleanSupplier p0, long p1, String p2)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "await",
    "signature": "void await()",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "await",
    "signature": "void await(long p0, TimeUnit p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "awaitLatch",
    "signature": "void awaitLatch(CountDownLatch p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "complete",
    "signature": "void complete()",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "fail",
    "signature": "void fail()",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "fail",
    "signature": "void fail(String p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "fail",
    "signature": "void fail(Throwable p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "onFailure",
    "signature": "Handler<AsyncResult<T>> onFailure(Consumer<Throwable> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "onSuccess",
    "signature": "Handler<AsyncResult<T>> onSuccess(Consumer<T> p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "testComplete",
    "signature": "void testComplete()",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "waitFor",
    "signature": "void waitFor(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "AsyncTestBase",
    "method": "waitUntil",
    "signature": "void waitUntil(BooleanSupplier p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "TestUtils",
    "method": "byteArraysEqual",
    "signature": "boolean byteArraysEqual(byte[] p0, byte[] p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "TestUtils",
    "method": "randomAlphaString",
    "signature": "String randomAlphaString(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "TestUtils",
    "method": "randomBuffer",
    "signature": "Buffer randomBuffer(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "TestUtils",
    "method": "randomByteArray",
    "signature": "byte[] randomByteArray(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "TestUtils",
    "method": "randomUnicodeString",
    "signature": "String randomUnicodeString(int p0)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "VertxTestBase",
    "method": "VertxTestBase",
    "signature": "VertxTestBase()",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "VertxTestBase",
    "method": "getOptions",
    "signature": "VertxOptions getOptions()",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "VertxTestBase",
    "method": "setUp",
    "signature": "void setUp()",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "VertxTestBase",
    "method": "startNodes",
    "signature": "void startNodes(int p0, VertxOptions p1)",
    "type": "none"
  },
  {
    "package": "io.vertx.test.core",
    "class": "VertxTestBase",
    "method": "tearDown",
    "signature": "void tearDown()",
    "type": "none"
  },
  {
    "package": "io.vertx.test.fakecluster",
    "class": "FakeClusterManager",
    "method": "FakeClusterManager",
    "signature": "FakeClusterManager()",
    "type": "none"
  },
  {
    "package": "io.vertx.test.proxy",
    "class": "TestProxyBase",
    "method": "getLastUri",
    "signature": "String getLastUri()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "io.vertx.test.proxy",
    "class": "TestProxyBase",
    "method": "getPort",
    "signature": "int getPort()",
    "type": "none"
  },
  {
    "package": "io.vertx.test.proxy",
    "class": "TestProxyBase",
    "method": "setForceUri",
    "signature": "void setForceUri(String p0)",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "BufferedReader",
    "method": "BufferedReader",
    "signature": "BufferedReader(Reader p0)",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "BufferedReader",
    "method": "close",
    "signature": "void close()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "BufferedReader",
    "method": "readLine",
    "signature": "String readLine()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.io",
    "class": "ByteArrayInputStream",
    "method": "ByteArrayInputStream",
    "signature": "ByteArrayInputStream(byte[] p0)",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "ByteArrayInputStream",
    "method": "available",
    "signature": "int available()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "ByteArrayInputStream",
    "method": "read",
    "signature": "int read()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "ByteArrayOutputStream",
    "method": "ByteArrayOutputStream",
    "signature": "ByteArrayOutputStream()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "ByteArrayOutputStream",
    "method": "toByteArray",
    "signature": "byte[] toByteArray()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "ByteArrayOutputStream",
    "method": "write",
    "signature": "void write(byte[] p0, int p1, int p2)",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "File",
    "signature": "File(File p0, String p1)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "File",
    "signature": "File(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "File",
    "signature": "File(String p0, String p1)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "canRead",
    "signature": "boolean canRead()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "createNewFile",
    "signature": "boolean createNewFile()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "createTempFile",
    "signature": "File createTempFile(String p0, String p1)",
    "sink_args": [
      "p0",
      "p1"
    ],
    "type": "sink"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "createTempFile",
    "signature": "File createTempFile(String p0, String p1, File p2)",
    "sink_args": [
      "p0",
      "p1",
      "p2"
    ],
    "type": "sink"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "delete",
    "signature": "boolean delete()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "deleteOnExit",
    "signature": "void deleteOnExit()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "exists",
    "signature": "boolean exists()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "getAbsolutePath",
    "signature": "String getAbsolutePath()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "getCanonicalPath",
    "signature": "String getCanonicalPath()",
    "sink_args": [
      "this"
    ],
    "type": "sink"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "getName",
    "signature": "String getName()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "getParent",
    "signature": "String getParent()",
    "sink_args": [
      "this"
    ],
    "type": "sink"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "getParentFile",
    "signature": "File getParentFile()",
    "sink_args": [
      "this"
    ],
    "type": "sink"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "getPath",
    "signature": "String getPath()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "isDirectory",
    "signature": "boolean isDirectory()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "lastModified",
    "signature": "long lastModified()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "length",
    "signature": "long length()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "listRoots",
    "signature": "File[] listRoots()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "mkdirs",
    "signature": "boolean mkdirs()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "setLastModified",
    "signature": "boolean setLastModified(long p0)",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "toPath",
    "signature": "Path toPath()",
    "sink_args": [
      "this"
    ],
    "type": "sink"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "toURI",
    "signature": "URI toURI()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "FileInputStream",
    "method": "FileInputStream",
    "signature": "FileInputStream(File p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "java.io",
    "class": "FileInputStream",
    "method": "FileInputStream",
    "signature": "FileInputStream(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "java.io",
    "class": "FileInputStream",
    "method": "close",
    "signature": "void close()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "FileNotFoundException",
    "method": "FileNotFoundException",
    "signature": "FileNotFoundException(String p0)",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "FileOutputStream",
    "method": "FileOutputStream",
    "signature": "FileOutputStream(File p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "java.io",
    "class": "FileWriter",
    "method": "FileWriter",
    "signature": "FileWriter(File p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "java.io",
    "class": "IOException",
    "method": "IOException",
    "signature": "IOException(String p0)",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "IOException",
    "method": "IOException",
    "signature": "IOException(String p0, Throwable p1)",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "IOException",
    "method": "IOException",
    "signature": "IOException(Throwable p0)",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "InputStream",
    "method": "close",
    "signature": "void close()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "InputStream",
    "method": "read",
    "signature": "int read()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "InputStream",
    "method": "read",
    "signature": "int read(byte[] p0)",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "InputStream",
    "method": "read",
    "signature": "int read(byte[] p0, int p1, int p2)",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "InputStreamReader",
    "method": "InputStreamReader",
    "signature": "InputStreamReader(InputStream p0)",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "OutputStream",
    "method": "close",
    "signature": "void close()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "OutputStream",
    "method": "flush",
    "signature": "void flush()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "OutputStream",
    "method": "write",
    "signature": "void write(byte[] p0)",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "OutputStream",
    "method": "write",
    "signature": "void write(byte[] p0, int p1, int p2)",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "OutputStreamWriter",
    "method": "OutputStreamWriter",
    "signature": "OutputStreamWriter(OutputStream p0)",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "OutputStreamWriter",
    "method": "close",
    "signature": "void close()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "OutputStreamWriter",
    "method": "flush",
    "signature": "void flush()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "PrintWriter",
    "method": "PrintWriter",
    "signature": "PrintWriter(File p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "java.io",
    "class": "PrintWriter",
    "method": "PrintWriter",
    "signature": "PrintWriter(Writer p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.io",
    "class": "PrintWriter",
    "method": "close",
    "signature": "void close()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "PrintWriter",
    "method": "flush",
    "signature": "void flush()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "PrintWriter",
    "method": "print",
    "signature": "void print(String p0)",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "PrintWriter",
    "method": "println",
    "signature": "void println()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "PrintWriter",
    "method": "write",
    "signature": "void write(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "java.io",
    "class": "Reader",
    "method": "read",
    "signature": "int read(char[] p0)",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "StringReader",
    "method": "StringReader",
    "signature": "StringReader(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.io",
    "class": "StringWriter",
    "method": "StringWriter",
    "signature": "StringWriter()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "StringWriter",
    "method": "StringWriter",
    "signature": "StringWriter(int p0)",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "StringWriter",
    "method": "toString",
    "signature": "String toString()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "Writer",
    "method": "Writer",
    "signature": "Writer()",
    "type": "none"
  },
  {
    "package": "java.io",
    "class": "Writer",
    "method": "write",
    "signature": "void write(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "java.io",
    "class": "Writer",
    "method": "write",
    "signature": "void write(char[] p0, int p1, int p2)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "java.lang",
    "class": "AbstractStringBuilder",
    "method": "charAt",
    "signature": "char charAt(int p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "AbstractStringBuilder",
    "method": "length",
    "signature": "int length()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "AbstractStringBuilder",
    "method": "setLength",
    "signature": "void setLength(int p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Appendable",
    "method": "append",
    "signature": "Appendable append(CharSequence p0, int p1, int p2)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Appendable",
    "method": "append",
    "signature": "Appendable append(char p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "AssertionError",
    "method": "AssertionError",
    "signature": "AssertionError()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "AssertionError",
    "method": "AssertionError",
    "signature": "AssertionError(Object p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Boolean",
    "method": "booleanValue",
    "signature": "boolean booleanValue()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Boolean",
    "method": "equals",
    "signature": "boolean equals(Object p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Boolean",
    "method": "toString",
    "signature": "String toString()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Boolean",
    "method": "valueOf",
    "signature": "Boolean valueOf(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "CharSequence",
    "method": "charAt",
    "signature": "char charAt(int p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "CharSequence",
    "method": "length",
    "signature": "int length()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "CharSequence",
    "method": "toString",
    "signature": "String toString()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Character",
    "method": "charValue",
    "signature": "char charValue()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Character",
    "method": "isWhitespace",
    "signature": "boolean isWhitespace(char p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Character",
    "method": "toChars",
    "signature": "char[] toChars(int p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Character",
    "method": "toUpperCase",
    "signature": "char toUpperCase(char p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Class",
    "method": "cast",
    "signature": "Object cast(Object p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Class",
    "method": "cast",
    "signature": "SparkWebSocketCreator cast(Object p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Class",
    "method": "cast",
    "signature": "T cast(Object p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Class",
    "method": "forName",
    "signature": "Class<?> forName(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.lang",
    "class": "Class",
    "method": "getCanonicalName",
    "signature": "String getCanonicalName()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Class",
    "method": "getClassLoader",
    "signature": "ClassLoader getClassLoader()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Class",
    "method": "getDeclaredConstructor",
    "signature": "Constructor<?> getDeclaredConstructor(Class<?>[] p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Class",
    "method": "getEnumConstants",
    "signature": "T[] getEnumConstants()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Class",
    "method": "getMethod",
    "signature": "Method getMethod(String p0, Class<?>[] p1)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Class",
    "method": "getMethods",
    "signature": "Method[] getMethods()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Class",
    "method": "getName",
    "signature": "String getName()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Class",
    "method": "getResource",
    "signature": "URL getResource(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.lang",
    "class": "Class",
    "method": "getResourceAsStream",
    "signature": "InputStream getResourceAsStream(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.lang",
    "class": "Class",
    "method": "getSimpleName",
    "signature": "String getSimpleName()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Class",
    "method": "getSuperclass",
    "signature": "Class<?> getSuperclass()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Class",
    "method": "isAnnotationPresent",
    "signature": "boolean isAnnotationPresent(Class<? extends Annotation> p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Class",
    "method": "isAssignableFrom",
    "signature": "boolean isAssignableFrom(Class<?> p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Class",
    "method": "newInstance",
    "signature": "Object newInstance()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "ClassCastException",
    "method": "ClassCastException",
    "signature": "ClassCastException(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "ClassLoader",
    "method": "getResource",
    "signature": "URL getResource(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.lang",
    "class": "ClassLoader",
    "method": "getResourceAsStream",
    "signature": "InputStream getResourceAsStream(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.lang",
    "class": "ClassLoader",
    "method": "getSystemClassLoader",
    "signature": "ClassLoader getSystemClassLoader()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "ClassLoader",
    "method": "loadClass",
    "signature": "Class<?> loadClass(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.lang",
    "class": "Double",
    "method": "Double",
    "signature": "Double(double p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Double",
    "method": "doubleValue",
    "signature": "double doubleValue()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Double",
    "method": "floatValue",
    "signature": "float floatValue()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Double",
    "method": "parseDouble",
    "signature": "double parseDouble(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Double",
    "method": "toString",
    "signature": "String toString()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Double",
    "method": "valueOf",
    "signature": "Double valueOf(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Enum",
    "method": "Enum",
    "signature": "Enum(String p0, int p1)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Enum",
    "method": "equals",
    "signature": "boolean equals(Object p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Enum",
    "method": "name",
    "signature": "String name()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Enum",
    "method": "toString",
    "signature": "String toString()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Error",
    "method": "Error",
    "signature": "Error(Throwable p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Exception",
    "method": "Exception",
    "signature": "Exception()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Exception",
    "method": "Exception",
    "signature": "Exception(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Exception",
    "method": "Exception",
    "signature": "Exception(String p0, Throwable p1)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Float",
    "method": "Float",
    "signature": "Float(float p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Float",
    "method": "compare",
    "signature": "int compare(float p0, float p1)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Float",
    "method": "parseFloat",
    "signature": "float parseFloat(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Float",
    "method": "toString",
    "signature": "String toString()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Float",
    "method": "valueOf",
    "signature": "Float valueOf(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "IllegalArgumentException",
    "method": "IllegalArgumentException",
    "signature": "IllegalArgumentException()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "IllegalArgumentException",
    "method": "IllegalArgumentException",
    "signature": "IllegalArgumentException(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "IllegalArgumentException",
    "method": "IllegalArgumentException",
    "signature": "IllegalArgumentException(Throwable p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "IllegalStateException",
    "method": "IllegalStateException",
    "signature": "IllegalStateException()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "IllegalStateException",
    "method": "IllegalStateException",
    "signature": "IllegalStateException(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "IndexOutOfBoundsException",
    "method": "IndexOutOfBoundsException",
    "signature": "IndexOutOfBoundsException()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "IndexOutOfBoundsException",
    "method": "IndexOutOfBoundsException",
    "signature": "IndexOutOfBoundsException(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Integer",
    "method": "Integer",
    "signature": "Integer(int p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Integer",
    "method": "intValue",
    "signature": "int intValue()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Integer",
    "method": "longValue",
    "signature": "long longValue()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Integer",
    "method": "parseInt",
    "signature": "int parseInt(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Integer",
    "method": "toHexString",
    "signature": "String toHexString(int p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Integer",
    "method": "toString",
    "signature": "String toString()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Integer",
    "method": "toString",
    "signature": "String toString(int p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Integer",
    "method": "valueOf",
    "signature": "Integer valueOf(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Iterable",
    "method": "forEach",
    "signature": "void forEach(Consumer<? super Entry<String,Object>> p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Iterable",
    "method": "forEach",
    "signature": "void forEach(Consumer<? super Entry<String,String>> p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Iterable",
    "method": "forEach",
    "signature": "void forEach(Consumer<? super Handler<AsyncResult<Void>>> p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Iterable",
    "method": "forEach",
    "signature": "void forEach(Consumer<? super Handler<Void>> p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Iterable",
    "method": "forEach",
    "signature": "void forEach(Consumer<? super Object> p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Iterable",
    "method": "forEach",
    "signature": "void forEach(Consumer<? super String> p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Iterable",
    "method": "forEach",
    "signature": "void forEach(Consumer<? super Subscription> p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Iterable",
    "method": "iterator",
    "signature": "Iterator<Cookie> iterator()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Long",
    "method": "Long",
    "signature": "Long(long p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Long",
    "method": "byteValue",
    "signature": "byte byteValue()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Long",
    "method": "intValue",
    "signature": "int intValue()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Long",
    "method": "longValue",
    "signature": "long longValue()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Long",
    "method": "parseLong",
    "signature": "long parseLong(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Long",
    "method": "shortValue",
    "signature": "short shortValue()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Long",
    "method": "toString",
    "signature": "String toString(long p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Long",
    "method": "valueOf",
    "signature": "Long valueOf(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Math",
    "method": "max",
    "signature": "float max(float p0, float p1)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Math",
    "method": "min",
    "signature": "float min(float p0, float p1)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Math",
    "method": "pow",
    "signature": "double pow(double p0, double p1)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Math",
    "method": "random",
    "signature": "double random()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "NullPointerException",
    "method": "NullPointerException",
    "signature": "NullPointerException()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Number",
    "method": "byteValue",
    "signature": "byte byteValue()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Number",
    "method": "doubleValue",
    "signature": "double doubleValue()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Number",
    "method": "intValue",
    "signature": "int intValue()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Number",
    "method": "longValue",
    "signature": "long longValue()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Number",
    "method": "shortValue",
    "signature": "short shortValue()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "NumberFormatException",
    "method": "NumberFormatException",
    "signature": "NumberFormatException(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Process",
    "method": "getErrorStream",
    "signature": "InputStream getErrorStream()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Process",
    "method": "waitFor",
    "signature": "int waitFor()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Runnable",
    "method": "run",
    "signature": "void run()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Runtime",
    "method": "exec",
    "signature": "Process exec(String p0, String[] p1, File p2)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Runtime",
    "method": "getRuntime",
    "signature": "Runtime getRuntime()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "RuntimeException",
    "method": "RuntimeException",
    "signature": "RuntimeException()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "RuntimeException",
    "method": "RuntimeException",
    "signature": "RuntimeException(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "RuntimeException",
    "method": "RuntimeException",
    "signature": "RuntimeException(String p0, Throwable p1)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "RuntimeException",
    "method": "RuntimeException",
    "signature": "RuntimeException(String p0, Throwable p1, boolean p2, boolean p3)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "RuntimeException",
    "method": "RuntimeException",
    "signature": "RuntimeException(Throwable p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "StackTraceElement",
    "method": "toString",
    "signature": "String toString()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "String",
    "signature": "String(byte[] p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "String",
    "signature": "String(byte[] p0, Charset p1)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "String",
    "signature": "String(byte[] p0, String p1)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "String",
    "signature": "String(char[] p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "String",
    "signature": "String(char[] p0, int p1, int p2)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "charAt",
    "signature": "char charAt(int p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "compareTo",
    "signature": "int compareTo(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "compareToIgnoreCase",
    "signature": "int compareToIgnoreCase(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "concat",
    "signature": "String concat(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "contains",
    "signature": "boolean contains(CharSequence p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "endsWith",
    "signature": "boolean endsWith(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "equals",
    "signature": "boolean equals(Object p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "equalsIgnoreCase",
    "signature": "boolean equalsIgnoreCase(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "format",
    "signature": "String format(String p0, Object[] p1)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "getBytes",
    "signature": "byte[] getBytes()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "getBytes",
    "signature": "byte[] getBytes(Charset p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "getBytes",
    "signature": "byte[] getBytes(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "hashCode",
    "signature": "int hashCode()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "indexOf",
    "signature": "int indexOf(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "indexOf",
    "signature": "int indexOf(String p0, int p1)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "indexOf",
    "signature": "int indexOf(int p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "indexOf",
    "signature": "int indexOf(int p0, int p1)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "isEmpty",
    "signature": "boolean isEmpty()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "join",
    "signature": "String join(CharSequence p0, CharSequence[] p1)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "join",
    "signature": "String join(CharSequence p0, Iterable<? extends CharSequence> p1)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "lastIndexOf",
    "signature": "int lastIndexOf(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "lastIndexOf",
    "signature": "int lastIndexOf(int p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "lastIndexOf",
    "signature": "int lastIndexOf(int p0, int p1)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "length",
    "signature": "int length()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "matches",
    "signature": "boolean matches(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "regionMatches",
    "signature": "boolean regionMatches(int p0, String p1, int p2, int p3)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "replace",
    "signature": "String replace(CharSequence p0, CharSequence p1)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "replace",
    "signature": "String replace(char p0, char p1)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "replaceAll",
    "signature": "String replaceAll(String p0, String p1)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "split",
    "signature": "String[] split(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "split",
    "signature": "String[] split(String p0, int p1)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "startsWith",
    "signature": "boolean startsWith(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "substring",
    "signature": "String substring(int p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "substring",
    "signature": "String substring(int p0, int p1)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "toCharArray",
    "signature": "char[] toCharArray()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "toLowerCase",
    "signature": "String toLowerCase()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "toUpperCase",
    "signature": "String toUpperCase()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "trim",
    "signature": "String trim()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "valueOf",
    "signature": "String valueOf(Object p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "valueOf",
    "signature": "String valueOf(int p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "String",
    "method": "valueOf",
    "signature": "String valueOf(long p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.lang",
    "class": "StringBuffer",
    "method": "StringBuffer",
    "signature": "StringBuffer()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "StringBuffer",
    "method": "StringBuffer",
    "signature": "StringBuffer(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "StringBuffer",
    "method": "append",
    "signature": "StringBuffer append(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "StringBuffer",
    "method": "append",
    "signature": "StringBuffer append(char p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "StringBuffer",
    "method": "toString",
    "signature": "String toString()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "StringBuilder",
    "method": "StringBuilder",
    "signature": "StringBuilder()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "StringBuilder",
    "method": "StringBuilder",
    "signature": "StringBuilder(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "StringBuilder",
    "method": "StringBuilder",
    "signature": "StringBuilder(int p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "StringBuilder",
    "method": "append",
    "signature": "StringBuilder append(CharSequence p0, int p1, int p2)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "StringBuilder",
    "method": "append",
    "signature": "StringBuilder append(Object p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "StringBuilder",
    "method": "append",
    "signature": "StringBuilder append(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "StringBuilder",
    "method": "append",
    "signature": "StringBuilder append(char p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "StringBuilder",
    "method": "append",
    "signature": "StringBuilder append(int p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "StringBuilder",
    "method": "delete",
    "signature": "StringBuilder delete(int p0, int p1)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "StringBuilder",
    "method": "deleteCharAt",
    "signature": "StringBuilder deleteCharAt(int p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "StringBuilder",
    "method": "insert",
    "signature": "StringBuilder insert(int p0, String p1)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "StringBuilder",
    "method": "insert",
    "signature": "StringBuilder insert(int p0, char p1)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "StringBuilder",
    "method": "toString",
    "signature": "String toString()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "System",
    "method": "currentTimeMillis",
    "signature": "long currentTimeMillis()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "System",
    "method": "getProperty",
    "signature": "String getProperty(String p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.lang",
    "class": "System",
    "method": "getProperty",
    "signature": "String getProperty(String p0, String p1)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.lang",
    "class": "System",
    "method": "getenv",
    "signature": "String getenv(String p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.lang",
    "class": "System",
    "method": "nanoTime",
    "signature": "long nanoTime()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "System",
    "method": "setProperty",
    "signature": "String setProperty(String p0, String p1)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.lang",
    "class": "Thread",
    "method": "Thread",
    "signature": "Thread(Runnable p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Thread",
    "method": "currentThread",
    "signature": "Thread currentThread()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Thread",
    "method": "getContextClassLoader",
    "signature": "ClassLoader getContextClassLoader()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Thread",
    "method": "interrupt",
    "signature": "void interrupt()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Thread",
    "method": "setContextClassLoader",
    "signature": "void setContextClassLoader(ClassLoader p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Thread",
    "method": "start",
    "signature": "void start()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Throwable",
    "method": "Throwable",
    "signature": "Throwable()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Throwable",
    "method": "getCause",
    "signature": "Throwable getCause()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Throwable",
    "method": "getMessage",
    "signature": "String getMessage()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.lang",
    "class": "Throwable",
    "method": "getStackTrace",
    "signature": "StackTraceElement[] getStackTrace()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Throwable",
    "method": "printStackTrace",
    "signature": "void printStackTrace()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Throwable",
    "method": "printStackTrace",
    "signature": "void printStackTrace(PrintWriter p0)",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "Throwable",
    "method": "toString",
    "signature": "String toString()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "UnsupportedOperationException",
    "method": "UnsupportedOperationException",
    "signature": "UnsupportedOperationException()",
    "type": "none"
  },
  {
    "package": "java.lang",
    "class": "UnsupportedOperationException",
    "method": "UnsupportedOperationException",
    "signature": "UnsupportedOperationException(String p0)",
    "type": "none"
  },
  {
    "package": "java.lang.reflect",
    "class": "Array",
    "method": "newInstance",
    "signature": "Object newInstance(Class<?> p0, int p1)",
    "type": "none"
  },
  {
    "package": "java.lang.reflect",
    "class": "Constructor",
    "method": "newInstance",
    "signature": "Object newInstance(Object[] p0)",
    "type": "none"
  },
  {
    "package": "java.lang.reflect",
    "class": "Executable",
    "method": "getParameters",
    "signature": "Parameter[] getParameters()",
    "type": "none"
  },
  {
    "package": "java.lang.reflect",
    "class": "Method",
    "method": "getName",
    "signature": "String getName()",
    "type": "none"
  },
  {
    "package": "java.lang.reflect",
    "class": "Method",
    "method": "invoke",
    "signature": "Object invoke(Object p0, Object[] p1)",
    "type": "none"
  },
  {
    "package": "java.lang.reflect",
    "class": "Parameter",
    "method": "getType",
    "signature": "Class<?> getType()",
    "type": "none"
  },
  {
    "package": "java.math",
    "class": "BigDecimal",
    "method": "doubleValue",
    "signature": "double doubleValue()",
    "type": "none"
  },
  {
    "package": "java.net",
    "class": "HttpURLConnection",
    "method": "disconnect",
    "signature": "void disconnect()",
    "type": "none"
  },
  {
    "package": "java.net",
    "class": "HttpURLConnection",
    "method": "getErrorStream",
    "signature": "InputStream getErrorStream()",
    "type": "none"
  },
  {
    "package": "java.net",
    "class": "HttpURLConnection",
    "method": "getResponseCode",
    "signature": "int getResponseCode()",
    "type": "none"
  },
  {
    "package": "java.net",
    "class": "HttpURLConnection",
    "method": "getResponseMessage",
    "signature": "String getResponseMessage()",
    "type": "none"
  },
  {
    "package": "java.net",
    "class": "HttpURLConnection",
    "method": "setRequestMethod",
    "signature": "void setRequestMethod(String p0)",
    "type": "none"
  },
  {
    "package": "java.net",
    "class": "MalformedURLException",
    "method": "MalformedURLException",
    "signature": "MalformedURLException(String p0)",
    "type": "none"
  },
  {
    "package": "java.net",
    "class": "ServerSocket",
    "method": "ServerSocket",
    "signature": "ServerSocket(int p0)",
    "type": "none"
  },
  {
    "package": "java.net",
    "class": "ServerSocket",
    "method": "getLocalPort",
    "signature": "int getLocalPort()",
    "type": "none"
  },
  {
    "package": "java.net",
    "class": "URI",
    "method": "URI",
    "signature": "URI(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.net",
    "class": "URI",
    "method": "URI",
    "signature": "URI(String p0, String p1, String p2, int p3, String p4, String p5, String p6)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.net",
    "class": "URI",
    "method": "create",
    "signature": "URI create(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.net",
    "class": "URI",
    "method": "getHost",
    "signature": "String getHost()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.net",
    "class": "URI",
    "method": "getRawQuery",
    "signature": "String getRawQuery()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.net",
    "class": "URI",
    "method": "getScheme",
    "signature": "String getScheme()",
    "type": "none"
  },
  {
    "package": "java.net",
    "class": "URI",
    "method": "getSchemeSpecificPart",
    "signature": "String getSchemeSpecificPart()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.net",
    "class": "URI",
    "method": "toString",
    "signature": "String toString()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.net",
    "class": "URI",
    "method": "toURL",
    "signature": "URL toURL()",
    "type": "none"
  },
  {
    "package": "java.net",
    "class": "URL",
    "method": "URL",
    "signature": "URL(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.net",
    "class": "URL",
    "method": "getFile",
    "signature": "String getFile()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.net",
    "class": "URL",
    "method": "getHost",
    "signature": "String getHost()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.net",
    "class": "URL",
    "method": "getPath",
    "signature": "String getPath()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.net",
    "class": "URL",
    "method": "getPort",
    "signature": "int getPort()",
    "type": "none"
  },
  {
    "package": "java.net",
    "class": "URL",
    "method": "getProtocol",
    "signature": "String getProtocol()",
    "type": "none"
  },
  {
    "package": "java.net",
    "class": "URL",
    "method": "openConnection",
    "signature": "URLConnection openConnection()",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.net",
    "class": "URL",
    "method": "toString",
    "signature": "String toString()",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.net",
    "class": "URLClassLoader",
    "method": "URLClassLoader",
    "signature": "URLClassLoader(URL[] p0, ClassLoader p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "java.net",
    "class": "URLClassLoader",
    "method": "getURLs",
    "signature": "URL[] getURLs()",
    "type": "none"
  },
  {
    "package": "java.net",
    "class": "URLConnection",
    "method": "addRequestProperty",
    "signature": "void addRequestProperty(String p0, String p1)",
    "type": "none"
  },
  {
    "package": "java.net",
    "class": "URLConnection",
    "method": "connect",
    "signature": "void connect()",
    "type": "none"
  },
  {
    "package": "java.net",
    "class": "URLConnection",
    "method": "getContentLength",
    "signature": "int getContentLength()",
    "type": "none"
  },
  {
    "package": "java.net",
    "class": "URLConnection",
    "method": "getHeaderFields",
    "signature": "Map<String,List<String>> getHeaderFields()",
    "type": "none"
  },
  {
    "package": "java.net",
    "class": "URLConnection",
    "method": "getInputStream",
    "signature": "InputStream getInputStream()",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.net",
    "class": "URLConnection",
    "method": "getLastModified",
    "signature": "long getLastModified()",
    "type": "none"
  },
  {
    "package": "java.net",
    "class": "URLConnection",
    "method": "setUseCaches",
    "signature": "void setUseCaches(boolean p0)",
    "type": "none"
  },
  {
    "package": "java.net",
    "class": "URLDecoder",
    "method": "decode",
    "signature": "String decode(String p0, String p1)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.net",
    "class": "URLEncoder",
    "method": "encode",
    "signature": "String encode(String p0, String p1)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.nio",
    "class": "ByteBuffer",
    "method": "array",
    "signature": "byte[] array()",
    "type": "none"
  },
  {
    "package": "java.nio",
    "class": "ByteBuffer",
    "method": "wrap",
    "signature": "ByteBuffer wrap(byte[] p0)",
    "type": "none"
  },
  {
    "package": "java.nio.charset",
    "class": "Charset",
    "method": "defaultCharset",
    "signature": "Charset defaultCharset()",
    "type": "none"
  },
  {
    "package": "java.nio.charset",
    "class": "Charset",
    "method": "forName",
    "signature": "Charset forName(String p0)",
    "type": "none"
  },
  {
    "package": "java.nio.charset",
    "class": "Charset",
    "method": "isSupported",
    "signature": "boolean isSupported(String p0)",
    "type": "none"
  },
  {
    "package": "java.nio.charset",
    "class": "Charset",
    "method": "name",
    "signature": "String name()",
    "type": "none"
  },
  {
    "package": "java.nio.file",
    "class": "Files",
    "method": "createTempFile",
    "signature": "Path createTempFile(String p0, String p1, FileAttribute<?>[] p2)",
    "sink_args": [
      "p0",
      "p1"
    ],
    "type": "sink"
  },
  {
    "package": "java.nio.file",
    "class": "Files",
    "method": "readAllBytes",
    "signature": "byte[] readAllBytes(Path p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "java.nio.file",
    "class": "Files",
    "method": "readAllLines",
    "signature": "List<String> readAllLines(Path p0, Charset p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "java.nio.file",
    "class": "Files",
    "method": "write",
    "signature": "Path write(Path p0, byte[] p1, OpenOption[] p2)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "java.nio.file",
    "class": "Path",
    "method": "toAbsolutePath",
    "signature": "Path toAbsolutePath()",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.nio.file",
    "class": "Path",
    "method": "toFile",
    "signature": "File toFile()",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.nio.file",
    "class": "Path",
    "method": "toString",
    "signature": "String toString()",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.nio.file",
    "class": "Paths",
    "method": "get",
    "signature": "Path get(String p0, String[] p1)",
    "sink_args": [
      "p0",
      "p1"
    ],
    "type": "sink"
  },
  {
    "package": "java.security",
    "class": "KeyStore",
    "method": "getDefaultType",
    "signature": "String getDefaultType()",
    "type": "none"
  },
  {
    "package": "java.security",
    "class": "KeyStore",
    "method": "getInstance",
    "signature": "KeyStore getInstance(String p0)",
    "type": "none"
  },
  {
    "package": "java.security",
    "class": "KeyStore",
    "method": "load",
    "signature": "void load(InputStream p0, char[] p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "java.security",
    "class": "MessageDigest",
    "method": "digest",
    "signature": "byte[] digest(byte[] p0)",
    "type": "none"
  },
  {
    "package": "java.security",
    "class": "MessageDigest",
    "method": "getInstance",
    "signature": "MessageDigest getInstance(String p0)",
    "type": "none"
  },
  {
    "package": "java.security",
    "class": "MessageDigest",
    "method": "reset",
    "signature": "void reset()",
    "type": "none"
  },
  {
    "package": "java.security",
    "class": "SecureRandom",
    "method": "SecureRandom",
    "signature": "SecureRandom()",
    "type": "none"
  },
  {
    "package": "java.security",
    "class": "SecureRandom",
    "method": "nextBytes",
    "signature": "void nextBytes(byte[] p0)",
    "type": "none"
  },
  {
    "package": "java.text",
    "class": "DateFormat",
    "method": "format",
    "signature": "String format(Date p0)",
    "type": "none"
  },
  {
    "package": "java.text",
    "class": "SimpleDateFormat",
    "method": "SimpleDateFormat",
    "signature": "SimpleDateFormat(String p0)",
    "type": "none"
  },
  {
    "package": "java.time",
    "class": "Instant",
    "method": "atZone",
    "signature": "ZonedDateTime atZone(ZoneId p0)",
    "type": "none"
  },
  {
    "package": "java.time",
    "class": "Instant",
    "method": "ofEpochMilli",
    "signature": "Instant ofEpochMilli(long p0)",
    "type": "none"
  },
  {
    "package": "java.time",
    "class": "Instant",
    "method": "toEpochMilli",
    "signature": "long toEpochMilli()",
    "type": "none"
  },
  {
    "package": "java.time",
    "class": "LocalDateTime",
    "method": "parse",
    "signature": "LocalDateTime parse(CharSequence p0, DateTimeFormatter p1)",
    "type": "none"
  },
  {
    "package": "java.time",
    "class": "ZoneId",
    "method": "of",
    "signature": "ZoneId of(String p0)",
    "type": "none"
  },
  {
    "package": "java.time.chrono",
    "class": "ChronoLocalDateTime",
    "method": "toInstant",
    "signature": "Instant toInstant(ZoneOffset p0)",
    "type": "none"
  },
  {
    "package": "java.time.format",
    "class": "DateTimeFormatter",
    "method": "format",
    "signature": "String format(TemporalAccessor p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayDeque",
    "method": "ArrayDeque<K>",
    "signature": "ArrayDeque<K>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayDeque",
    "method": "ArrayDeque<String>",
    "signature": "ArrayDeque<String>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList",
    "signature": "ArrayList()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList",
    "signature": "ArrayList(Collection<? extends E> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList",
    "signature": "ArrayList(int p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<>",
    "signature": "ArrayList<>(Collection<> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<AbstractResourceHandler>",
    "signature": "ArrayList<AbstractResourceHandler>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<AuthHandler>",
    "signature": "ArrayList<AuthHandler>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<Buffer>",
    "signature": "ArrayList<Buffer>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<Byte>",
    "signature": "ArrayList<Byte>(Collection<? extends Byte> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<ClientPhase>",
    "signature": "ArrayList<ClientPhase>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<Context>",
    "signature": "ArrayList<Context>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<Cookie>",
    "signature": "ArrayList<Cookie>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<CustomValidator>",
    "signature": "ArrayList<CustomValidator>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<E>",
    "signature": "ArrayList<E>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<E>",
    "signature": "ArrayList<E>(Collection<? extends E> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<FormDataPart>",
    "signature": "ArrayList<FormDataPart>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<Handler<>>",
    "signature": "ArrayList<Handler<>>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<Handler<AsyncResult<Void>>>",
    "signature": "ArrayList<Handler<AsyncResult<Void>>>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<Handler<RoutingContext>>",
    "signature": "ArrayList<Handler<RoutingContext>>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<Handler<RoutingContext>>",
    "signature": "ArrayList<Handler<RoutingContext>>(Collection<? extends Handler<RoutingContext>> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<Handler>",
    "signature": "ArrayList<Handler>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<Http2PushMapping>",
    "signature": "ArrayList<Http2PushMapping>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<Http2PushMapping>",
    "signature": "ArrayList<Http2PushMapping>(Collection<? extends Http2PushMapping> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<Integer>",
    "signature": "ArrayList<Integer>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<Integer>",
    "signature": "ArrayList<Integer>(Collection<? extends Integer> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<JsonArray>",
    "signature": "ArrayList<JsonArray>(Collection<? extends JsonArray> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<JsonObject>",
    "signature": "ArrayList<JsonObject>(Collection<? extends JsonObject> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<Link>",
    "signature": "ArrayList<Link>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<Long>",
    "signature": "ArrayList<Long>(Collection<? extends Long> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<Object>",
    "signature": "ArrayList<Object>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<Parameter>",
    "signature": "ArrayList<Parameter>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<Parameter>",
    "signature": "ArrayList<Parameter>(Collection<? extends Parameter> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<ParameterTypeValidator>",
    "signature": "ArrayList<ParameterTypeValidator>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<PermittedOptions>",
    "signature": "ArrayList<PermittedOptions>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<PermittedOptions>",
    "signature": "ArrayList<PermittedOptions>(Collection<? extends PermittedOptions> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<RequestParameter>",
    "signature": "ArrayList<RequestParameter>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<ResponsePredicate>",
    "signature": "ArrayList<ResponsePredicate>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<Route>",
    "signature": "ArrayList<Route>(Collection<? extends Route> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<RouteEntry>",
    "signature": "ArrayList<RouteEntry>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<RouteMatch>",
    "signature": "ArrayList<RouteMatch>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<Schema<>>",
    "signature": "ArrayList<Schema<>>(Collection<? extends Schema<>> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<SecurityRequirementKey>",
    "signature": "ArrayList<SecurityRequirementKey>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<Short>",
    "signature": "ArrayList<Short>(Collection<? extends Short> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<String>",
    "signature": "ArrayList<String>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<String>",
    "signature": "ArrayList<String>(Collection<? extends String> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<Thread>",
    "signature": "ArrayList<Thread>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<TimeoutInfo>",
    "signature": "ArrayList<TimeoutInfo>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "ArrayList<Upload>",
    "signature": "ArrayList<Upload>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "add",
    "signature": "boolean add(String p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "get",
    "signature": "GraphQLQuery get(int p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "ArrayList",
    "method": "size",
    "signature": "int size()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Arrays",
    "method": "asList",
    "signature": "List<T> asList(T[] p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Base64",
    "method": "getDecoder",
    "signature": "Decoder getDecoder()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Base64",
    "method": "getEncoder",
    "signature": "Encoder getEncoder()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Base64",
    "method": "getMimeEncoder",
    "signature": "Encoder getMimeEncoder()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "add",
    "signature": "boolean add(Cookie p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "add",
    "signature": "boolean add(Integer p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "clear",
    "signature": "void clear()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "contains",
    "signature": "boolean contains(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "isEmpty",
    "signature": "boolean isEmpty()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "iterator",
    "signature": "Iterator<?> iterator()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "iterator",
    "signature": "Iterator<Byte> iterator()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "iterator",
    "signature": "Iterator<Integer> iterator()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "iterator",
    "signature": "Iterator<JsonArray> iterator()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "iterator",
    "signature": "Iterator<JsonObject> iterator()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "iterator",
    "signature": "Iterator<Long> iterator()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "iterator",
    "signature": "Iterator<Short> iterator()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "iterator",
    "signature": "Iterator<String> iterator()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "remove",
    "signature": "boolean remove(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "removeIf",
    "signature": "boolean removeIf(Predicate<? super Entry<String,Nonce>> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "size",
    "signature": "int size()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<ClassTypeInfo> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<CompletableFuture<JsonObject>> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<Cookie> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<E> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<Entry<String,List<String>>> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<Entry<String,MediaType>> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<Entry<String,Object>> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<Entry<String,OperationValue>> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<Entry<String,PathItem>> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<Entry<String,RequestParameter>> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<Entry<String,String>> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<FilterData> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<GraphQLQuery> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<JsonObject> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<Link> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<MediaType> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<Object> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<Operation> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<ParamInfo> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<Parameter> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<PathItem> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<RequestParameter> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<Route> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<SecurityRequirement> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<SecurityRequirementKey> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "stream",
    "signature": "Stream<String> stream()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "toArray",
    "signature": "Object[] toArray()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collection",
    "method": "toArray",
    "signature": "T[] toArray(T[] p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collections",
    "method": "emptyList",
    "signature": "List<T> emptyList()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collections",
    "method": "emptyMap",
    "signature": "Map<K,V> emptyMap()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collections",
    "method": "emptySet",
    "signature": "Set<T> emptySet()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collections",
    "method": "enumeration",
    "signature": "Enumeration<T> enumeration(Collection<T> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collections",
    "method": "list",
    "signature": "ArrayList<T> list(Enumeration<T> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collections",
    "method": "reverseOrder",
    "signature": "Comparator<T> reverseOrder()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collections",
    "method": "singleton",
    "signature": "Set<T> singleton(T p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collections",
    "method": "singletonList",
    "signature": "List<T> singletonList(T p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collections",
    "method": "singletonMap",
    "signature": "Map<K,V> singletonMap(K p0, V p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collections",
    "method": "sort",
    "signature": "void sort(List<T> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collections",
    "method": "synchronizedList",
    "signature": "List<T> synchronizedList(List<T> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collections",
    "method": "unmodifiableList",
    "signature": "List<T> unmodifiableList(List<? extends T> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Collections",
    "method": "unmodifiableMap",
    "signature": "Map<K,V> unmodifiableMap(Map<? extends K,? extends V> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Date",
    "method": "Date",
    "signature": "Date()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Date",
    "method": "Date",
    "signature": "Date(long p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Date",
    "method": "toString",
    "signature": "String toString()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Decoder",
    "method": "decode",
    "signature": "byte[] decode(String p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Deque",
    "method": "add",
    "signature": "boolean add(String p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Deque",
    "method": "addLast",
    "signature": "void addLast(String p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Deque",
    "method": "removeLast",
    "signature": "String removeLast()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Encoder",
    "method": "encode",
    "signature": "byte[] encode(byte[] p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Encoder",
    "method": "encodeToString",
    "signature": "String encodeToString(byte[] p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Entry",
    "method": "getKey",
    "signature": "Class<?> getKey()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Entry",
    "method": "getKey",
    "signature": "HttpMethod getKey()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Entry",
    "method": "getKey",
    "signature": "K getKey()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Entry",
    "method": "getKey",
    "signature": "Key getKey()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Entry",
    "method": "getKey",
    "signature": "String getKey()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Entry",
    "method": "getValue",
    "signature": "Class<?> getValue()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Entry",
    "method": "getValue",
    "signature": "Cookie getValue()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Entry",
    "method": "getValue",
    "signature": "List<String> getValue()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Entry",
    "method": "getValue",
    "signature": "MediaType getValue()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Entry",
    "method": "getValue",
    "signature": "Nonce getValue()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Entry",
    "method": "getValue",
    "signature": "Object getValue()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Entry",
    "method": "getValue",
    "signature": "ObjectField getValue()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Entry",
    "method": "getValue",
    "signature": "Operation getValue()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Entry",
    "method": "getValue",
    "signature": "OperationValue getValue()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Entry",
    "method": "getValue",
    "signature": "PathItem getValue()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Entry",
    "method": "getValue",
    "signature": "Pattern getValue()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Entry",
    "method": "getValue",
    "signature": "QueryParamsMap getValue()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Entry",
    "method": "getValue",
    "signature": "RequestParameter getValue()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Entry",
    "method": "getValue",
    "signature": "Schema<> getValue()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Entry",
    "method": "getValue",
    "signature": "String getValue()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Entry",
    "method": "getValue",
    "signature": "String[] getValue()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Entry",
    "method": "getValue",
    "signature": "V getValue()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Entry",
    "method": "setValue",
    "signature": "List<String> setValue(List<String> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Entry",
    "method": "setValue",
    "signature": "String setValue(String p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Enumeration",
    "method": "hasMoreElements",
    "signature": "boolean hasMoreElements()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Enumeration",
    "method": "nextElement",
    "signature": "String nextElement()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap",
    "signature": "HashMap()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<>",
    "signature": "HashMap<>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<Class<? extends Exception>,ExceptionHandlerImpl<>>",
    "signature": "HashMap<Class<? extends Exception>,ExceptionHandlerImpl<>>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<Class<?>,Class<?>>",
    "signature": "HashMap<Class<?>,Class<?>>(int p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<Class<?>,Method>",
    "signature": "HashMap<Class<?>,Method>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<Class<?>,String>",
    "signature": "HashMap<Class<?>,String>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<Integer,Handler<RoutingContext>>",
    "signature": "HashMap<Integer,Handler<RoutingContext>>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<Integer,Handler<RoutingContext>>",
    "signature": "HashMap<Integer,Handler<RoutingContext>>(Map<? extends Integer,? extends Handler<RoutingContext>> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<Integer,Object>",
    "signature": "HashMap<Integer,Object>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<Integer,String>",
    "signature": "HashMap<Integer,String>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<Object,EmbeddedServerFactory>",
    "signature": "HashMap<Object,EmbeddedServerFactory>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<ParameterType,List<String>>",
    "signature": "HashMap<ParameterType,List<String>>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<SecurityRequirementKey,List<Handler<RoutingContext>>>",
    "signature": "HashMap<SecurityRequirementKey,List<Handler<RoutingContext>>>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<SockJSSocket,SockInfo>",
    "signature": "HashMap<SockJSSocket,SockInfo>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<String,ApolloWSMessageType>",
    "signature": "HashMap<String,ApolloWSMessageType>(int p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<String,Book>",
    "signature": "HashMap<String,Book>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<String,Class<?>>",
    "signature": "HashMap<String,Class<?>>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<String,Class<?>>",
    "signature": "HashMap<String,Class<?>>(int p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<String,HttpMethod>",
    "signature": "HashMap<String,HttpMethod>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<String,List<String>>",
    "signature": "HashMap<String,List<String>>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<String,Message<>>",
    "signature": "HashMap<String,Message<>>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<String,MessageConsumer<>>",
    "signature": "HashMap<String,MessageConsumer<>>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<String,Nonce>",
    "signature": "HashMap<String,Nonce>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<String,Object>",
    "signature": "HashMap<String,Object>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<String,ObjectField>",
    "signature": "HashMap<String,ObjectField>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<String,ParameterValidationRule>",
    "signature": "HashMap<String,ParameterValidationRule>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<String,Pattern>",
    "signature": "HashMap<String,Pattern>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<String,QueryParamsMap>",
    "signature": "HashMap<String,QueryParamsMap>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<String,RequestParameter>",
    "signature": "HashMap<String,RequestParameter>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<String,RouteEntry>",
    "signature": "HashMap<String,RouteEntry>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<String,String>",
    "signature": "HashMap<String,String>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<String,String>",
    "signature": "HashMap<String,String>(Map<? extends String,? extends String> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<String,String[]>",
    "signature": "HashMap<String,String[]>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<String,User>",
    "signature": "HashMap<String,User>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "HashMap<String,WebSocketHandlerWrapper>",
    "signature": "HashMap<String,WebSocketHandlerWrapper>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "containsKey",
    "signature": "boolean containsKey(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "get",
    "signature": "HttpMethod get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "get",
    "signature": "Object get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "get",
    "signature": "String get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "put",
    "signature": "Class<?> put(String p0, Class<?> p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "put",
    "signature": "HttpMethod put(String p0, HttpMethod p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "put",
    "signature": "Method put(Class<?> p0, Method p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "put",
    "signature": "Object put(Integer p0, Object p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "put",
    "signature": "Object put(Object p0, Object p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "put",
    "signature": "String put(Class<?> p0, String p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "put",
    "signature": "String put(Integer p0, String p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashMap",
    "method": "size",
    "signature": "int size()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashSet",
    "method": "HashSet<>",
    "signature": "HashSet<>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashSet",
    "method": "HashSet<Class<?>>",
    "signature": "HashSet<Class<?>>(int p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashSet",
    "method": "HashSet<FileUpload>",
    "signature": "HashSet<FileUpload>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashSet",
    "method": "HashSet<HttpMethod>",
    "signature": "HashSet<HttpMethod>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashSet",
    "method": "HashSet<HttpMethod>",
    "signature": "HashSet<HttpMethod>(Collection<? extends HttpMethod> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashSet",
    "method": "HashSet<MIMEHeader>",
    "signature": "HashSet<MIMEHeader>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashSet",
    "method": "HashSet<MIMEHeader>",
    "signature": "HashSet<MIMEHeader>(Collection<? extends MIMEHeader> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashSet",
    "method": "HashSet<String>",
    "signature": "HashSet<String>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "HashSet",
    "method": "HashSet<String>",
    "signature": "HashSet<String>(Collection<? extends String> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Iterator",
    "method": "hasNext",
    "signature": "boolean hasNext()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Iterator",
    "method": "next",
    "signature": "Byte next()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Iterator",
    "method": "next",
    "signature": "Cookie next()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Iterator",
    "method": "next",
    "signature": "FileUpload next()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Iterator",
    "method": "next",
    "signature": "Handler<HttpContext<?>> next()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Iterator",
    "method": "next",
    "signature": "Integer next()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Iterator",
    "method": "next",
    "signature": "JsonArray next()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Iterator",
    "method": "next",
    "signature": "JsonObject next()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Iterator",
    "method": "next",
    "signature": "Long next()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Iterator",
    "method": "next",
    "signature": "Object next()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Iterator",
    "method": "next",
    "signature": "RouteImpl next()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Iterator",
    "method": "next",
    "signature": "Short next()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Iterator",
    "method": "next",
    "signature": "String next()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Iterator",
    "method": "next",
    "signature": "TimeoutInfo next()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Iterator",
    "method": "next",
    "signature": "ValidationMessage next()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "LinkedHashMap",
    "method": "LinkedHashMap",
    "signature": "LinkedHashMap()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "LinkedHashMap",
    "method": "LinkedHashMap",
    "signature": "LinkedHashMap(Map<? extends K,? extends V> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "LinkedHashMap",
    "method": "LinkedHashMap",
    "signature": "LinkedHashMap(int p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "LinkedHashMap",
    "method": "LinkedHashMap",
    "signature": "LinkedHashMap(int p0, float p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "LinkedHashMap",
    "method": "LinkedHashMap",
    "signature": "LinkedHashMap(int p0, float p1, boolean p2)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "LinkedHashMap",
    "method": "LinkedHashMap<String,OperationValue>",
    "signature": "LinkedHashMap<String,OperationValue>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "LinkedHashMap",
    "method": "LinkedHashMap<String,String>",
    "signature": "LinkedHashMap<String,String>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "LinkedHashMap",
    "method": "entrySet",
    "signature": "Set<Entry<String,List<String>>> entrySet()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "LinkedHashMap",
    "method": "entrySet",
    "signature": "Set<Entry<String,MediaType>> entrySet()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "LinkedHashMap",
    "method": "entrySet",
    "signature": "Set<Entry<String,PathItem>> entrySet()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "LinkedHashMap",
    "method": "get",
    "signature": "PathItem get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "LinkedHashMap",
    "method": "keySet",
    "signature": "Set<String> keySet()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "LinkedHashMap",
    "method": "values",
    "signature": "Collection<ApiResponse> values()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "LinkedHashMap",
    "method": "values",
    "signature": "Collection<PathItem> values()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "LinkedHashSet",
    "method": "LinkedHashSet<HttpMethod>",
    "signature": "LinkedHashSet<HttpMethod>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "LinkedHashSet",
    "method": "LinkedHashSet<HttpMethod>",
    "signature": "LinkedHashSet<HttpMethod>(Collection<? extends HttpMethod> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "LinkedHashSet",
    "method": "LinkedHashSet<String>",
    "signature": "LinkedHashSet<String>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "LinkedHashSet",
    "method": "LinkedHashSet<String>",
    "signature": "LinkedHashSet<String>(Collection<? extends String> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Locale",
    "method": "forLanguageTag",
    "signature": "Locale forLanguageTag(String p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Locale",
    "method": "getCountry",
    "signature": "String getCountry()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Locale",
    "method": "getDefault",
    "signature": "Locale getDefault()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Locale",
    "method": "getLanguage",
    "signature": "String getLanguage()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Locale",
    "method": "getVariant",
    "signature": "String getVariant()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Locale",
    "method": "setDefault",
    "signature": "void setDefault(Locale p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Locale",
    "method": "toLanguageTag",
    "signature": "String toLanguageTag()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "clear",
    "signature": "void clear()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "computeIfAbsent",
    "signature": "List<Handler<RoutingContext>> computeIfAbsent(SecurityRequirementKey p0, Function<? super SecurityRequirementKey,? extends List<Handler<RoutingContext>>> p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "computeIfAbsent",
    "signature": "Pattern computeIfAbsent(String p0, Function<? super String,? extends Pattern> p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "containsKey",
    "signature": "boolean containsKey(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "entrySet",
    "signature": "Set<Entry<Class<?>,Class<?>>> entrySet()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "entrySet",
    "signature": "Set<Entry<HttpMethod,Operation>> entrySet()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "entrySet",
    "signature": "Set<Entry<String,List<String>>> entrySet()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "entrySet",
    "signature": "Set<Entry<String,MediaType>> entrySet()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "entrySet",
    "signature": "Set<Entry<String,Nonce>> entrySet()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "entrySet",
    "signature": "Set<Entry<String,Object>> entrySet()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "entrySet",
    "signature": "Set<Entry<String,ObjectField>> entrySet()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "entrySet",
    "signature": "Set<Entry<String,OperationValue>> entrySet()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "entrySet",
    "signature": "Set<Entry<String,Pattern>> entrySet()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "entrySet",
    "signature": "Set<Entry<String,QueryParamsMap>> entrySet()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "entrySet",
    "signature": "Set<Entry<String,RequestParameter>> entrySet()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "entrySet",
    "signature": "Set<Entry<String,Schema<>>> entrySet()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "entrySet",
    "signature": "Set<Entry<String,String>> entrySet()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "entrySet",
    "signature": "Set<Entry<String,String[]>> entrySet()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "forEach",
    "signature": "void forEach(BiConsumer<? super String,? super List<String>> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "forEach",
    "signature": "void forEach(BiConsumer<? super String,? super MessageConsumer<>> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "forEach",
    "signature": "void forEach(BiConsumer<? super String,? super Object> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "forEach",
    "signature": "void forEach(BiConsumer<? super String,? super String> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "ApolloWSMessageType get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "Book get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "Buffer get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "CacheEntry get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "Class<?> get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "ConnectionFactory get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "EmbeddedServerFactory get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "Encoding get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "ExceptionHandlerImpl<> get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "Handler<RoutingContext> get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "List<Handler<RoutingContext>> get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "List<String> get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "Nonce get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "Object get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "OperationValue get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "QueryParamsMap get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "RequestParameter get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "RouteEntry get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "Schema<> get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "SockInfo get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "String get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "String[] get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "Subscription get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "User get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "V get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "get",
    "signature": "WebSocketHandlerWrapper get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "getOrDefault",
    "signature": "Handler<RoutingContext> getOrDefault(Object p0, Handler<RoutingContext> p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "getOrDefault",
    "signature": "String getOrDefault(Object p0, String p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "isEmpty",
    "signature": "boolean isEmpty()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "keySet",
    "signature": "Set<? extends K> keySet()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "keySet",
    "signature": "Set<String> keySet()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "ApolloWSMessageType put(String p0, ApolloWSMessageType p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "Book put(String p0, Book p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "Buffer put(String p0, Buffer p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "CacheEntry put(String p0, CacheEntry p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "Class<?> put(Class<?> p0, Class<?> p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "Class<?> put(String p0, Class<?> p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "EmbeddedServerFactory put(Object p0, EmbeddedServerFactory p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "ExceptionHandlerImpl<> put(Class<? extends Exception> p0, ExceptionHandlerImpl<> p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "Handler<AsyncResult<Void>> put(Integer p0, Handler<AsyncResult<Void>> p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "Handler<RoutingContext> put(Integer p0, Handler<RoutingContext> p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "Handler<RoutingContext> put(String p0, Handler<RoutingContext> p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "Handler<Void> put(Integer p0, Handler<Void> p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "List<String> put(ParameterType p0, List<String> p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "List<String> put(String p0, List<String> p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "Message<> put(String p0, Message<> p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "MessageConsumer<> put(String p0, MessageConsumer<> p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "Nonce put(String p0, Nonce p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "Object put(String p0, Object p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "ObjectField put(String p0, ObjectField p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "OperationValue put(String p0, OperationValue p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "ParameterValidationRule put(String p0, ParameterValidationRule p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "Pattern put(String p0, Pattern p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "QueryParamsMap put(String p0, QueryParamsMap p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "RequestParameter put(String p0, RequestParameter p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "RouteEntry put(String p0, RouteEntry p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "SockInfo put(SockJSSocket p0, SockInfo p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "String put(String p0, String p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "String[] put(String p0, String[] p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "Subscription put(String p0, Subscription p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "User put(String p0, User p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "put",
    "signature": "WebSocketHandlerWrapper put(String p0, WebSocketHandlerWrapper p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "putAll",
    "signature": "void putAll(Map<? extends String,? extends RequestParameter> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "putAll",
    "signature": "void putAll(Map<? extends String,? extends String> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "putIfAbsent",
    "signature": "Object putIfAbsent(String p0, Object p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "putIfAbsent",
    "signature": "V putIfAbsent(K p0, V p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "remove",
    "signature": "Book remove(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "remove",
    "signature": "Buffer remove(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "remove",
    "signature": "CacheEntry remove(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "remove",
    "signature": "Handler<AsyncResult<Void>> remove(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "remove",
    "signature": "Handler<RoutingContext> remove(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "remove",
    "signature": "Handler<Void> remove(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "remove",
    "signature": "List<String> remove(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "remove",
    "signature": "Message<> remove(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "remove",
    "signature": "MessageConsumer<> remove(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "remove",
    "signature": "Object remove(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "remove",
    "signature": "SockInfo remove(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "remove",
    "signature": "String remove(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "remove",
    "signature": "Subscription remove(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "size",
    "signature": "int size()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "values",
    "signature": "Collection<Byte> values()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "values",
    "signature": "Collection<Class<?>> values()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "values",
    "signature": "Collection<Cookie> values()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "values",
    "signature": "Collection<Handler<AsyncResult<Void>>> values()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "values",
    "signature": "Collection<Handler<Void>> values()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "values",
    "signature": "Collection<Integer> values()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "values",
    "signature": "Collection<JsonArray> values()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "values",
    "signature": "Collection<JsonObject> values()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "values",
    "signature": "Collection<Long> values()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "values",
    "signature": "Collection<Object> values()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "values",
    "signature": "Collection<OperationValue> values()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "values",
    "signature": "Collection<ParameterValidationRule> values()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "values",
    "signature": "Collection<Short> values()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "values",
    "signature": "Collection<String> values()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Map",
    "method": "values",
    "signature": "Collection<Subscription> values()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Objects",
    "method": "hash",
    "signature": "int hash(Object[] p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Objects",
    "method": "requireNonNull",
    "signature": "T requireNonNull(T p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Objects",
    "method": "requireNonNull",
    "signature": "T requireNonNull(T p0, String p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "empty",
    "signature": "Optional<T> empty()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "get",
    "signature": "Integer get()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "get",
    "signature": "Parameter get()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "get",
    "signature": "Pattern get()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "get",
    "signature": "String get()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "isPresent",
    "signature": "boolean isPresent()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "map",
    "signature": "Optional<U> map(Function<? super Double,? extends U> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "map",
    "signature": "Optional<U> map(Function<? super JsonArray,? extends U> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "map",
    "signature": "Optional<U> map(Function<? super JsonObject,? extends U> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "map",
    "signature": "Optional<U> map(Function<? super Long,? extends U> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "map",
    "signature": "Optional<U> map(Function<? super Pattern,? extends U> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "map",
    "signature": "Optional<U> map(Function<? super String,? extends U> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "of",
    "signature": "Optional<T> of(T p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "ofNullable",
    "signature": "Optional<T> ofNullable(T p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "Byte orElse(Byte p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "Double orElse(Double p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "FilterData orElse(FilterData p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "Float orElse(Float p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "Integer orElse(Integer p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "List<> orElse(List<> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "List<Byte> orElse(List<Byte> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "List<FilterData> orElse(List<FilterData> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "List<Integer> orElse(List<Integer> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "List<Long> orElse(List<Long> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "List<Short> orElse(List<Short> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "Long orElse(Long p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "Map<String,Byte> orElse(Map<String,Byte> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "Map<String,Integer> orElse(Map<String,Integer> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "Map<String,Long> orElse(Map<String,Long> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "Map<String,Object> orElse(Map<String,Object> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "Map<String,Short> orElse(Map<String,Short> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "Operation orElse(Operation p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "Set<Byte> orElse(Set<Byte> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "Set<FilterData> orElse(Set<FilterData> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "Set<Integer> orElse(Set<Integer> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "Set<Long> orElse(Set<Long> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "Set<Short> orElse(Set<Short> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "Short orElse(Short p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "SomeEnum orElse(SomeEnum p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElse",
    "signature": "String orElse(String p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElseGet",
    "signature": "List<Handler<RoutingContext>> orElseGet(Supplier<? extends List<Handler<RoutingContext>>> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElseGet",
    "signature": "OperationValue orElseGet(Supplier<? extends OperationValue> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElseGet",
    "signature": "Route orElseGet(Supplier<? extends Route> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Optional",
    "method": "orElseThrow",
    "signature": "List<Handler<RoutingContext>> orElseThrow(Supplier<? extends X> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Queue",
    "method": "add",
    "signature": "boolean add(K p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Queue",
    "method": "poll",
    "signature": "K poll()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Random",
    "method": "Random",
    "signature": "Random()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Random",
    "method": "nextBoolean",
    "signature": "boolean nextBoolean()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Random",
    "method": "nextBytes",
    "signature": "void nextBytes(byte[] p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Random",
    "method": "nextInt",
    "signature": "int nextInt()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Random",
    "method": "nextInt",
    "signature": "int nextInt(int p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Set",
    "method": "add",
    "signature": "boolean add(Class<?> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Set",
    "method": "add",
    "signature": "boolean add(FileUpload p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Set",
    "method": "add",
    "signature": "boolean add(HttpMethod p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Set",
    "method": "add",
    "signature": "boolean add(MIMEHeader p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Set",
    "method": "add",
    "signature": "boolean add(RouteImpl p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Set",
    "method": "add",
    "signature": "boolean add(String p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Set",
    "method": "addAll",
    "signature": "boolean addAll(Collection<? extends Class<?>> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Set",
    "method": "addAll",
    "signature": "boolean addAll(Collection<? extends HttpMethod> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Set",
    "method": "addAll",
    "signature": "boolean addAll(Collection<? extends RouteImpl> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Set",
    "method": "addAll",
    "signature": "boolean addAll(Collection<? extends String> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Set",
    "method": "contains",
    "signature": "boolean contains(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Set",
    "method": "isEmpty",
    "signature": "boolean isEmpty()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Set",
    "method": "iterator",
    "signature": "Iterator<FileUpload> iterator()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Set",
    "method": "iterator",
    "signature": "Iterator<RouteImpl> iterator()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Set",
    "method": "iterator",
    "signature": "Iterator<String> iterator()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Set",
    "method": "iterator",
    "signature": "Iterator<ValidationMessage> iterator()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Set",
    "method": "remove",
    "signature": "boolean remove(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Set",
    "method": "removeAll",
    "signature": "boolean removeAll(Collection<?> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Set",
    "method": "size",
    "signature": "int size()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "Set",
    "method": "toArray",
    "signature": "Object[] toArray()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "SimpleEntry",
    "method": "SimpleEntry<K,V>",
    "signature": "SimpleEntry<K,V>(K p0, V p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "SimpleEntry",
    "method": "getKey",
    "signature": "K getKey()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "SimpleEntry",
    "method": "getValue",
    "signature": "V getValue()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "SimpleImmutableEntry",
    "method": "SimpleImmutableEntry<K,V>",
    "signature": "SimpleImmutableEntry<K,V>(K p0, V p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "SimpleImmutableEntry",
    "method": "getKey",
    "signature": "String getKey()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "SimpleImmutableEntry",
    "method": "getValue",
    "signature": "Operation getValue()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "SortedMap",
    "method": "entrySet",
    "signature": "Set<Entry<Key,Cookie>> entrySet()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "TreeMap",
    "method": "TreeMap<Integer,Handler<AsyncResult<Void>>>",
    "signature": "TreeMap<Integer,Handler<AsyncResult<Void>>>(Comparator<? super Integer> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "TreeMap",
    "method": "TreeMap<Integer,Handler<Void>>",
    "signature": "TreeMap<Integer,Handler<Void>>(Comparator<? super Integer> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "TreeMap",
    "method": "TreeMap<String,Cookie>",
    "signature": "TreeMap<String,Cookie>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "TreeMap",
    "method": "put",
    "signature": "Cookie put(String p0, Cookie p1)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "TreeMap",
    "method": "values",
    "signature": "Collection<Cookie> values()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "TreeSet",
    "method": "TreeSet<RouteImpl>",
    "signature": "TreeSet<RouteImpl>(Comparator<? super RouteImpl> p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "TreeSet",
    "method": "TreeSet<String>",
    "signature": "TreeSet<String>()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "TreeSet",
    "method": "add",
    "signature": "boolean add(String p0)",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "UUID",
    "method": "fromString",
    "signature": "UUID fromString(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.util",
    "class": "UUID",
    "method": "randomUUID",
    "signature": "UUID randomUUID()",
    "type": "none"
  },
  {
    "package": "java.util",
    "class": "UUID",
    "method": "toString",
    "signature": "String toString()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.util.concurrent",
    "class": "Callable",
    "method": "call",
    "signature": "T call()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CompletableFuture",
    "method": "CompletableFuture<Boolean>",
    "signature": "CompletableFuture<Boolean>()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CompletableFuture",
    "method": "CompletableFuture<List<Link>>",
    "signature": "CompletableFuture<List<Link>>()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CompletableFuture",
    "method": "CompletableFuture<List<V>>",
    "signature": "CompletableFuture<List<V>>()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CompletableFuture",
    "method": "CompletableFuture<Map<K,V>>",
    "signature": "CompletableFuture<Map<K,V>>()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CompletableFuture",
    "method": "CompletableFuture<Session>",
    "signature": "CompletableFuture<Session>()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CompletableFuture",
    "method": "CompletableFuture<T>",
    "signature": "CompletableFuture<T>()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CompletableFuture",
    "method": "CompletableFuture<Void>",
    "signature": "CompletableFuture<Void>()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CompletableFuture",
    "method": "allOf",
    "signature": "CompletableFuture<Void> allOf(CompletableFuture<?>[] p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CompletableFuture",
    "method": "complete",
    "signature": "boolean complete(Boolean p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CompletableFuture",
    "method": "complete",
    "signature": "boolean complete(List<Link> p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CompletableFuture",
    "method": "complete",
    "signature": "boolean complete(List<V> p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CompletableFuture",
    "method": "complete",
    "signature": "boolean complete(Map<K,V> p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CompletableFuture",
    "method": "complete",
    "signature": "boolean complete(Session p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CompletableFuture",
    "method": "complete",
    "signature": "boolean complete(T p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CompletableFuture",
    "method": "complete",
    "signature": "boolean complete(Void p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CompletableFuture",
    "method": "completeExceptionally",
    "signature": "boolean completeExceptionally(Throwable p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CompletableFuture",
    "method": "get",
    "signature": "Boolean get()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CompletableFuture",
    "method": "get",
    "signature": "Session get()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CompletableFuture",
    "method": "join",
    "signature": "T join()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CompletableFuture",
    "method": "thenAccept",
    "signature": "CompletableFuture<Void> thenAccept(Consumer<? super Void> p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CompletableFuture",
    "method": "thenApply",
    "signature": "CompletableFuture<U> thenApply(Function<? super JsonObject,? extends U> p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CompletableFuture",
    "method": "thenApply",
    "signature": "CompletableFuture<U> thenApply(Function<? super Void,? extends U> p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CompletableFuture",
    "method": "thenApplyAsync",
    "signature": "CompletableFuture<U> thenApplyAsync(Function<? super ExecutionResult,? extends U> p0, Executor p1)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CompletableFuture",
    "method": "whenComplete",
    "signature": "CompletableFuture<Buffer> whenComplete(BiConsumer<? super Buffer,? super Throwable> p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CompletableFuture",
    "method": "whenCompleteAsync",
    "signature": "CompletableFuture<ExecutionResult> whenCompleteAsync(BiConsumer<? super ExecutionResult,? super Throwable> p0, Executor p1)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentHashMap",
    "method": "ConcurrentHashMap",
    "signature": "ConcurrentHashMap()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentHashMap",
    "method": "ConcurrentHashMap",
    "signature": "ConcurrentHashMap(Map<? extends K,? extends V> p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentHashMap",
    "method": "ConcurrentHashMap",
    "signature": "ConcurrentHashMap(int p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentHashMap",
    "method": "ConcurrentHashMap",
    "signature": "ConcurrentHashMap(int p0, float p1)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentHashMap",
    "method": "ConcurrentHashMap",
    "signature": "ConcurrentHashMap(int p0, float p1, int p2)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentHashMap",
    "method": "ConcurrentHashMap<Key,Cookie>",
    "signature": "ConcurrentHashMap<Key,Cookie>()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentHashMap",
    "method": "ConcurrentHashMap<String,Buffer>",
    "signature": "ConcurrentHashMap<String,Buffer>()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentHashMap",
    "method": "ConcurrentHashMap<String,Handler<RoutingContext>>",
    "signature": "ConcurrentHashMap<String,Handler<RoutingContext>>()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentHashMap",
    "method": "ConcurrentHashMap<String,Object>",
    "signature": "ConcurrentHashMap<String,Object>()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentHashMap",
    "method": "ConcurrentHashMap<String,Object>",
    "signature": "ConcurrentHashMap<String,Object>(int p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentHashMap",
    "method": "ConcurrentHashMap<String,Subscription>",
    "signature": "ConcurrentHashMap<String,Subscription>()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentHashMap",
    "method": "clear",
    "signature": "void clear()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentHashMap",
    "method": "containsKey",
    "signature": "boolean containsKey(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentHashMap",
    "method": "get",
    "signature": "CompiledTemplate get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentHashMap",
    "method": "get",
    "signature": "JadeTemplate get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentHashMap",
    "method": "get",
    "signature": "PebbleTemplate get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentHashMap",
    "method": "get",
    "signature": "Template get(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentHashMap",
    "method": "put",
    "signature": "Cookie put(Key p0, Cookie p1)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentHashMap",
    "method": "put",
    "signature": "V put(K p0, V p1)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentHashMap",
    "method": "putAll",
    "signature": "void putAll(Map<? extends K,? extends V> p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentHashMap",
    "method": "putIfAbsent",
    "signature": "V putIfAbsent(K p0, V p1)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentHashMap",
    "method": "remove",
    "signature": "Cookie remove(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentHashMap",
    "method": "remove",
    "signature": "V remove(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentHashMap",
    "method": "remove",
    "signature": "boolean remove(Object p0, Object p1)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentHashMap",
    "method": "values",
    "signature": "Collection<Cookie> values()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentSkipListMap",
    "method": "ConcurrentSkipListMap<Key,Cookie>",
    "signature": "ConcurrentSkipListMap<Key,Cookie>()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentSkipListMap",
    "method": "put",
    "signature": "Cookie put(Key p0, Cookie p1)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentSkipListMap",
    "method": "remove",
    "signature": "Cookie remove(Object p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ConcurrentSkipListMap",
    "method": "tailMap",
    "signature": "ConcurrentNavigableMap<Key,Cookie> tailMap(Key p0, boolean p1)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CopyOnWriteArrayList",
    "method": "CopyOnWriteArrayList<Handler<HttpContext<?>>>",
    "signature": "CopyOnWriteArrayList<Handler<HttpContext<?>>>()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CopyOnWriteArrayList",
    "method": "CopyOnWriteArrayList<Handler<HttpContext<?>>>",
    "signature": "CopyOnWriteArrayList<Handler<HttpContext<?>>>(Collection<? extends Handler<HttpContext<?>>> p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CopyOnWriteArrayList",
    "method": "CopyOnWriteArrayList<String>",
    "signature": "CopyOnWriteArrayList<String>()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CopyOnWriteArrayList",
    "method": "add",
    "signature": "boolean add(String p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CountDownLatch",
    "method": "CountDownLatch",
    "signature": "CountDownLatch(int p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CountDownLatch",
    "method": "await",
    "signature": "boolean await(long p0, TimeUnit p1)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CountDownLatch",
    "method": "await",
    "signature": "void await()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CountDownLatch",
    "method": "countDown",
    "signature": "void countDown()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "CountDownLatch",
    "method": "getCount",
    "signature": "long getCount()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ThreadLocalRandom",
    "method": "current",
    "signature": "ThreadLocalRandom current()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "ThreadLocalRandom",
    "method": "nextInt",
    "signature": "int nextInt(int p0, int p1)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "TimeUnit",
    "method": "convert",
    "signature": "long convert(long p0, TimeUnit p1)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent",
    "class": "TimeUnit",
    "method": "toMillis",
    "signature": "long toMillis(long p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicBoolean",
    "method": "AtomicBoolean",
    "signature": "AtomicBoolean()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicBoolean",
    "method": "AtomicBoolean",
    "signature": "AtomicBoolean(boolean p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicBoolean",
    "method": "compareAndSet",
    "signature": "boolean compareAndSet(boolean p0, boolean p1)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicBoolean",
    "method": "get",
    "signature": "boolean get()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicBoolean",
    "method": "set",
    "signature": "void set(boolean p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicInteger",
    "method": "AtomicInteger",
    "signature": "AtomicInteger()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicInteger",
    "method": "AtomicInteger",
    "signature": "AtomicInteger(int p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicInteger",
    "method": "addAndGet",
    "signature": "int addAndGet(int p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicInteger",
    "method": "decrementAndGet",
    "signature": "int decrementAndGet()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicInteger",
    "method": "get",
    "signature": "int get()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicInteger",
    "method": "getAndDecrement",
    "signature": "int getAndDecrement()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicInteger",
    "method": "getAndIncrement",
    "signature": "int getAndIncrement()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicInteger",
    "method": "incrementAndGet",
    "signature": "int incrementAndGet()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicInteger",
    "method": "intValue",
    "signature": "int intValue()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicInteger",
    "method": "set",
    "signature": "void set(int p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicLong",
    "method": "AtomicLong",
    "signature": "AtomicLong()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicLong",
    "method": "addAndGet",
    "signature": "long addAndGet(long p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicLong",
    "method": "get",
    "signature": "long get()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "AtomicReference<Buffer>",
    "signature": "AtomicReference<Buffer>()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "AtomicReference<Context>",
    "signature": "AtomicReference<Context>()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "AtomicReference<Handler<Buffer>>",
    "signature": "AtomicReference<Handler<Buffer>>()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "AtomicReference<Handler<Void>>",
    "signature": "AtomicReference<Handler<Void>>()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "AtomicReference<HttpConnection>",
    "signature": "AtomicReference<HttpConnection>()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "AtomicReference<Object>",
    "signature": "AtomicReference<Object>()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "AtomicReference<Session>",
    "signature": "AtomicReference<Session>()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "AtomicReference<String>",
    "signature": "AtomicReference<String>()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "AtomicReference<Subscription>",
    "signature": "AtomicReference<Subscription>()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "AtomicReference<WebSocket>",
    "signature": "AtomicReference<WebSocket>()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "compareAndSet",
    "signature": "boolean compareAndSet(Context p0, Context p1)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "compareAndSet",
    "signature": "boolean compareAndSet(Object p0, Object p1)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "compareAndSet",
    "signature": "boolean compareAndSet(String p0, String p1)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "compareAndSet",
    "signature": "boolean compareAndSet(Subscription p0, Subscription p1)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "get",
    "signature": "Buffer get()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "get",
    "signature": "Context get()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "get",
    "signature": "Handler<Buffer> get()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "get",
    "signature": "Handler<Void> get()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "get",
    "signature": "HttpConnection get()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "get",
    "signature": "Object get()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "get",
    "signature": "Session get()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "get",
    "signature": "String get()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "get",
    "signature": "Subscription get()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "get",
    "signature": "WebSocket get()",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "set",
    "signature": "void set(Buffer p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "set",
    "signature": "void set(Handler<Buffer> p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "set",
    "signature": "void set(Handler<Void> p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "set",
    "signature": "void set(HttpConnection p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "set",
    "signature": "void set(Session p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "set",
    "signature": "void set(String p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "set",
    "signature": "void set(Subscription p0)",
    "type": "none"
  },
  {
    "package": "java.util.concurrent.atomic",
    "class": "AtomicReference",
    "method": "set",
    "signature": "void set(WebSocket p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "BiConsumer",
    "method": "accept",
    "signature": "void accept(DataFetchingEnvironment p0, Promise<T> p1)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "BiConsumer",
    "method": "accept",
    "signature": "void accept(HttpServerRequest p0, List<Upload> p1)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "BiConsumer",
    "method": "accept",
    "signature": "void accept(SockJSSocket p0, Buffer p1)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "BiConsumer",
    "method": "accept",
    "signature": "void accept(String p0, Buffer p1)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "BiConsumer",
    "method": "accept",
    "signature": "void accept(String p0, HttpClientRequest p1)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "BiConsumer",
    "method": "accept",
    "signature": "void accept(String p0, String p1)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "BiConsumer",
    "method": "accept",
    "signature": "void accept(WebSocket p0, JsonObject p1)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "BiFunction",
    "method": "apply",
    "signature": "List<Thread> apply(Thread p0, Thread p1)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "BooleanSupplier",
    "method": "getAsBoolean",
    "signature": "boolean getAsBoolean()",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Consumer",
    "method": "accept",
    "signature": "void accept(AsyncResult<?> p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Consumer",
    "method": "accept",
    "signature": "void accept(Buffer p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Consumer",
    "method": "accept",
    "signature": "void accept(Cookie p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Consumer",
    "method": "accept",
    "signature": "void accept(Exception p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Consumer",
    "method": "accept",
    "signature": "void accept(Float p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Consumer",
    "method": "accept",
    "signature": "void accept(HttpClientRequest p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Consumer",
    "method": "accept",
    "signature": "void accept(HttpClientResponse p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Consumer",
    "method": "accept",
    "signature": "void accept(HttpRequest<?> p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Consumer",
    "method": "accept",
    "signature": "void accept(HttpRequest<Buffer> p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Consumer",
    "method": "accept",
    "signature": "void accept(HttpServerRequest p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Consumer",
    "method": "accept",
    "signature": "void accept(HttpServerResponse p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Consumer",
    "method": "accept",
    "signature": "void accept(Router p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Consumer",
    "method": "accept",
    "signature": "void accept(RoutingContext p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Consumer",
    "method": "accept",
    "signature": "void accept(String p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Consumer",
    "method": "accept",
    "signature": "void accept(T p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Function",
    "method": "apply",
    "signature": "Boolean apply(Boolean p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Function",
    "method": "apply",
    "signature": "Boolean apply(Session p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Function",
    "method": "apply",
    "signature": "DataLoaderRegistry apply(ApolloWSMessage p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Function",
    "method": "apply",
    "signature": "DataLoaderRegistry apply(RoutingContext p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Function",
    "method": "apply",
    "signature": "Future<HttpClientRequest> apply(HttpClientResponse p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Function",
    "method": "apply",
    "signature": "HttpRequest<Buffer> apply(WebClient p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Function",
    "method": "apply",
    "signature": "JsonArray apply(Buffer p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Function",
    "method": "apply",
    "signature": "JsonObject apply(Buffer p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Function",
    "method": "apply",
    "signature": "JsonObject apply(RoutingContext p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Function",
    "method": "apply",
    "signature": "Locale apply(ApolloWSMessage p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Function",
    "method": "apply",
    "signature": "Locale apply(RoutingContext p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Function",
    "method": "apply",
    "signature": "MultiMap apply(RoutingContext p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Function",
    "method": "apply",
    "signature": "Number apply(String p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Function",
    "method": "apply",
    "signature": "Object apply(ApolloWSMessage p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Function",
    "method": "apply",
    "signature": "Object apply(RoutingContext p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Function",
    "method": "apply",
    "signature": "R apply(Buffer p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Function",
    "method": "apply",
    "signature": "R apply(T p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Function",
    "method": "apply",
    "signature": "ResponsePredicateResult apply(HttpResponse<Void> p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Function",
    "method": "apply",
    "signature": "String apply(Buffer p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Function",
    "method": "apply",
    "signature": "String apply(RoutingContext p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Function",
    "method": "apply",
    "signature": "T apply(Buffer p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Function",
    "method": "apply",
    "signature": "T apply(String p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Function",
    "method": "apply",
    "signature": "Throwable apply(ResponsePredicateResult p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Function",
    "method": "identity",
    "signature": "Function<T,T> identity()",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Predicate",
    "method": "test",
    "signature": "boolean test(String p0)",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Supplier",
    "method": "get",
    "signature": "BridgeEventImpl get()",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Supplier",
    "method": "get",
    "signature": "Handler<SockJSSocket> get()",
    "type": "none"
  },
  {
    "package": "java.util.function",
    "class": "Supplier",
    "method": "get",
    "signature": "JksOptions get()",
    "type": "none"
  },
  {
    "package": "java.util.regex",
    "class": "Matcher",
    "method": "appendReplacement",
    "signature": "Matcher appendReplacement(StringBuffer p0, String p1)",
    "type": "none"
  },
  {
    "package": "java.util.regex",
    "class": "Matcher",
    "method": "appendTail",
    "signature": "StringBuffer appendTail(StringBuffer p0)",
    "type": "none"
  },
  {
    "package": "java.util.regex",
    "class": "Matcher",
    "method": "end",
    "signature": "int end()",
    "type": "none"
  },
  {
    "package": "java.util.regex",
    "class": "Matcher",
    "method": "find",
    "signature": "boolean find()",
    "type": "none"
  },
  {
    "package": "java.util.regex",
    "class": "Matcher",
    "method": "group",
    "signature": "String group()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "java.util.regex",
    "class": "Matcher",
    "method": "group",
    "signature": "String group(String p0)",
    "type": "none"
  },
  {
    "package": "java.util.regex",
    "class": "Matcher",
    "method": "group",
    "signature": "String group(int p0)",
    "type": "none"
  },
  {
    "package": "java.util.regex",
    "class": "Matcher",
    "method": "groupCount",
    "signature": "int groupCount()",
    "type": "none"
  },
  {
    "package": "java.util.regex",
    "class": "Matcher",
    "method": "lookingAt",
    "signature": "boolean lookingAt()",
    "type": "none"
  },
  {
    "package": "java.util.regex",
    "class": "Matcher",
    "method": "matches",
    "signature": "boolean matches()",
    "type": "none"
  },
  {
    "package": "java.util.regex",
    "class": "Matcher",
    "method": "replaceAll",
    "signature": "String replaceAll(String p0)",
    "type": "none"
  },
  {
    "package": "java.util.regex",
    "class": "Matcher",
    "method": "reset",
    "signature": "Matcher reset()",
    "type": "none"
  },
  {
    "package": "java.util.regex",
    "class": "Matcher",
    "method": "start",
    "signature": "int start()",
    "type": "none"
  },
  {
    "package": "java.util.regex",
    "class": "Matcher",
    "method": "start",
    "signature": "int start(String p0)",
    "type": "none"
  },
  {
    "package": "java.util.regex",
    "class": "Pattern",
    "method": "compile",
    "signature": "Pattern compile(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.util.regex",
    "class": "Pattern",
    "method": "compile",
    "signature": "Pattern compile(String p0, int p1)",
    "type": "none"
  },
  {
    "package": "java.util.regex",
    "class": "Pattern",
    "method": "matcher",
    "signature": "Matcher matcher(CharSequence p0)",
    "type": "none"
  },
  {
    "package": "java.util.regex",
    "class": "Pattern",
    "method": "pattern",
    "signature": "String pattern()",
    "type": "none"
  },
  {
    "package": "java.util.regex",
    "class": "Pattern",
    "method": "quote",
    "signature": "String quote(String p0)",
    "type": "none"
  },
  {
    "package": "java.util.regex",
    "class": "Pattern",
    "method": "split",
    "signature": "String[] split(CharSequence p0)",
    "type": "none"
  },
  {
    "package": "java.util.regex",
    "class": "Pattern",
    "method": "toString",
    "signature": "String toString()",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Collector",
    "method": "of",
    "signature": "Collector<T,R,R> of(Supplier<R> p0, BiConsumer<R,T> p1, BinaryOperator<R> p2, Characteristics[] p3)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Collectors",
    "method": "joining",
    "signature": "Collector<CharSequence,?,String> joining(CharSequence p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Collectors",
    "method": "toCollection",
    "signature": "Collector<T,?,C> toCollection(Supplier<C> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Collectors",
    "method": "toList",
    "signature": "Collector<T,?,List<T>> toList()",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Collectors",
    "method": "toMap",
    "signature": "Collector<T,?,Map<K,U>> toMap(Function<? super T,? extends K> p0, Function<? super T,? extends U> p1)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Collectors",
    "method": "toSet",
    "signature": "Collector<T,?,Set<T>> toSet()",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "IntStream",
    "method": "forEach",
    "signature": "void forEach(IntConsumer p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "IntStream",
    "method": "mapToObj",
    "signature": "Stream<U> mapToObj(IntFunction<? extends U> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "IntStream",
    "method": "range",
    "signature": "IntStream range(int p0, int p1)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "anyMatch",
    "signature": "boolean anyMatch(Predicate<? super String> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "collect",
    "signature": "R collect(Collector<? super AuthorizationValue,A,R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "collect",
    "signature": "R collect(Collector<? super Byte,A,R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "collect",
    "signature": "R collect(Collector<? super CompletableFuture<JsonObject>,A,R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "collect",
    "signature": "R collect(Collector<? super Cookie,A,R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "collect",
    "signature": "R collect(Collector<? super Entry<String,Object>,A,R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "collect",
    "signature": "R collect(Collector<? super Entry<String,RequestParameter>,A,R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "collect",
    "signature": "R collect(Collector<? super FilterData,A,R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "collect",
    "signature": "R collect(Collector<? super Handler<RoutingContext>,A,R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "collect",
    "signature": "R collect(Collector<? super Integer,A,R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "collect",
    "signature": "R collect(Collector<? super JsonObject,A,R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "collect",
    "signature": "R collect(Collector<? super JsonTypeValidator,A,R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "collect",
    "signature": "R collect(Collector<? super Link,A,R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "collect",
    "signature": "R collect(Collector<? super Long,A,R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "collect",
    "signature": "R collect(Collector<? super MediaType,A,R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "collect",
    "signature": "R collect(Collector<? super Object,A,R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "collect",
    "signature": "R collect(Collector<? super Parameter,A,R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "collect",
    "signature": "R collect(Collector<? super SecurityRequirementKey,A,R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "collect",
    "signature": "R collect(Collector<? super Short,A,R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "collect",
    "signature": "R collect(Collector<? super SimpleEntry<String,RequestParameterImpl>,A,R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "collect",
    "signature": "R collect(Collector<? super String,A,R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "collect",
    "signature": "R collect(Collector<? super User,A,R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "collect",
    "signature": "R collect(Supplier<R> p0, BiConsumer<R,? super JsonObject> p1, BiConsumer<R,R> p2)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "concat",
    "signature": "Stream<T> concat(Stream<? extends T> p0, Stream<? extends T> p1)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "filter",
    "signature": "Stream<ClassTypeInfo> filter(Predicate<? super ClassTypeInfo> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "filter",
    "signature": "Stream<Entry<String,MediaType>> filter(Predicate<? super Entry<String,MediaType>> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "filter",
    "signature": "Stream<Entry<String,OperationValue>> filter(Predicate<? super Entry<String,OperationValue>> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "filter",
    "signature": "Stream<Entry<String,String>> filter(Predicate<? super Entry<String,String>> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "filter",
    "signature": "Stream<Link> filter(Predicate<? super Link> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "filter",
    "signature": "Stream<List<Handler<RoutingContext>>> filter(Predicate<? super List<Handler<RoutingContext>>> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "filter",
    "signature": "Stream<Operation> filter(Predicate<? super Operation> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "filter",
    "signature": "Stream<Parameter> filter(Predicate<? super Parameter> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "filter",
    "signature": "Stream<SimpleImmutableEntry<String,Operation>> filter(Predicate<? super SimpleImmutableEntry<String,Operation>> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "filter",
    "signature": "Stream<String> filter(Predicate<? super String> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "findFirst",
    "signature": "Optional<Operation> findFirst()",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "findFirst",
    "signature": "Optional<OperationValue> findFirst()",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "findFirst",
    "signature": "Optional<Parameter> findFirst()",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "findFirst",
    "signature": "Optional<String> findFirst()",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "flatMap",
    "signature": "Stream<R> flatMap(Function<? super Entry<String,List<String>>,? extends Stream<? extends R>> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "flatMap",
    "signature": "Stream<R> flatMap(Function<? super Entry<String,PathItem>,? extends Stream<? extends R>> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "flatMap",
    "signature": "Stream<R> flatMap(Function<? super List<Handler<RoutingContext>>,? extends Stream<? extends R>> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "flatMap",
    "signature": "Stream<R> flatMap(Function<? super PathItem,? extends Stream<? extends R>> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "flatMap",
    "signature": "Stream<R> flatMap(Function<? super SecurityRequirement,? extends Stream<? extends R>> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "map",
    "signature": "Stream<R> map(Function<? super ClassTypeInfo,? extends R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "map",
    "signature": "Stream<R> map(Function<? super CompletableFuture<JsonObject>,? extends R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "map",
    "signature": "Stream<R> map(Function<? super Cookie,? extends R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "map",
    "signature": "Stream<R> map(Function<? super Entry<String,MediaType>,? extends R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "map",
    "signature": "Stream<R> map(Function<? super Entry<String,Object>,? extends R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "map",
    "signature": "Stream<R> map(Function<? super Entry<String,OperationValue>,? extends R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "map",
    "signature": "Stream<R> map(Function<? super Entry<String,String>,? extends R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "map",
    "signature": "Stream<R> map(Function<? super FilterData,? extends R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "map",
    "signature": "Stream<R> map(Function<? super GraphQLQuery,? extends R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "map",
    "signature": "Stream<R> map(Function<? super JsonObject,? extends R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "map",
    "signature": "Stream<R> map(Function<? super Link,? extends R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "map",
    "signature": "Stream<R> map(Function<? super MediaType,? extends R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "map",
    "signature": "Stream<R> map(Function<? super Object,? extends R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "map",
    "signature": "Stream<R> map(Function<? super Operation,? extends R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "map",
    "signature": "Stream<R> map(Function<? super ParamInfo,? extends R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "map",
    "signature": "Stream<R> map(Function<? super Parameter,? extends R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "map",
    "signature": "Stream<R> map(Function<? super RequestParameter,? extends R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "map",
    "signature": "Stream<R> map(Function<? super Route,? extends R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "map",
    "signature": "Stream<R> map(Function<? super SecurityRequirementKey,? extends R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "map",
    "signature": "Stream<R> map(Function<? super ServerCookie,? extends R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "map",
    "signature": "Stream<R> map(Function<? super SimpleImmutableEntry<String,Operation>,? extends R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "map",
    "signature": "Stream<R> map(Function<? super String,? extends R> p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "map",
    "signature": "Stream<R> map(Function<? super User,? extends R> p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "of",
    "signature": "Stream<T> of(T p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "of",
    "signature": "Stream<T> of(T[] p0)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "reduce",
    "signature": "String reduce(String p0, BinaryOperator<String> p1)",
    "type": "none"
  },
  {
    "package": "java.util.stream",
    "class": "Stream",
    "method": "toArray",
    "signature": "A[] toArray(IntFunction<A[]> p0)",
    "type": "none"
  },
  {
    "package": "java.util.zip",
    "class": "GZIPInputStream",
    "method": "GZIPInputStream",
    "signature": "GZIPInputStream(InputStream p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "java.util.zip",
    "class": "GZIPOutputStream",
    "method": "GZIPOutputStream",
    "signature": "GZIPOutputStream(OutputStream p0, boolean p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "javax.crypto",
    "class": "Mac",
    "method": "doFinal",
    "signature": "byte[] doFinal(byte[] p0)",
    "type": "none"
  },
  {
    "package": "javax.crypto",
    "class": "Mac",
    "method": "getInstance",
    "signature": "Mac getInstance(String p0)",
    "type": "none"
  },
  {
    "package": "javax.crypto",
    "class": "Mac",
    "method": "init",
    "signature": "void init(Key p0)",
    "type": "none"
  },
  {
    "package": "javax.crypto.spec",
    "class": "SecretKeySpec",
    "method": "SecretKeySpec",
    "signature": "SecretKeySpec(byte[] p0, String p1)",
    "type": "none"
  },
  {
    "package": "javax.lang.model.element",
    "class": "Element",
    "method": "getAnnotation",
    "signature": "A getAnnotation(Class<A> p0)",
    "type": "none"
  },
  {
    "package": "javax.net.ssl",
    "class": "SSLContext",
    "method": "getInstance",
    "signature": "SSLContext getInstance(String p0)",
    "type": "none"
  },
  {
    "package": "javax.net.ssl",
    "class": "SSLContext",
    "method": "getSocketFactory",
    "signature": "SSLSocketFactory getSocketFactory()",
    "type": "none"
  },
  {
    "package": "javax.net.ssl",
    "class": "SSLContext",
    "method": "init",
    "signature": "void init(KeyManager[] p0, TrustManager[] p1, SecureRandom p2)",
    "type": "none"
  },
  {
    "package": "javax.net.ssl",
    "class": "TrustManagerFactory",
    "method": "getDefaultAlgorithm",
    "signature": "String getDefaultAlgorithm()",
    "type": "none"
  },
  {
    "package": "javax.net.ssl",
    "class": "TrustManagerFactory",
    "method": "getInstance",
    "signature": "TrustManagerFactory getInstance(String p0)",
    "type": "none"
  },
  {
    "package": "javax.net.ssl",
    "class": "TrustManagerFactory",
    "method": "getTrustManagers",
    "signature": "TrustManager[] getTrustManagers()",
    "type": "none"
  },
  {
    "package": "javax.net.ssl",
    "class": "TrustManagerFactory",
    "method": "init",
    "signature": "void init(KeyStore p0)",
    "type": "none"
  },
  {
    "package": "javax.servlet",
    "class": "Filter",
    "method": "doFilter",
    "signature": "void doFilter(ServletRequest p0, ServletResponse p1, FilterChain p2)",
    "type": "none"
  },
  {
    "package": "javax.servlet",
    "class": "FilterChain",
    "method": "doFilter",
    "signature": "void doFilter(ServletRequest p0, ServletResponse p1)",
    "type": "none"
  },
  {
    "package": "javax.servlet",
    "class": "FilterConfig",
    "method": "getFilterName",
    "signature": "String getFilterName()",
    "type": "none"
  },
  {
    "package": "javax.servlet",
    "class": "FilterConfig",
    "method": "getInitParameter",
    "signature": "String getInitParameter(String p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "javax.servlet",
    "class": "FilterConfig",
    "method": "getInitParameterNames",
    "signature": "Enumeration<String> getInitParameterNames()",
    "type": "none"
  },
  {
    "package": "javax.servlet",
    "class": "FilterConfig",
    "method": "getServletContext",
    "signature": "ServletContext getServletContext()",
    "type": "none"
  },
  {
    "package": "javax.servlet",
    "class": "ServletContext",
    "method": "getAttribute",
    "signature": "Object getAttribute(String p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "javax.servlet",
    "class": "ServletException",
    "method": "ServletException",
    "signature": "ServletException(String p0)",
    "type": "none"
  },
  {
    "package": "javax.servlet",
    "class": "ServletException",
    "method": "ServletException",
    "signature": "ServletException(Throwable p0)",
    "type": "none"
  },
  {
    "package": "javax.servlet",
    "class": "ServletInputStream",
    "method": "ServletInputStream",
    "signature": "ServletInputStream()",
    "type": "none"
  },
  {
    "package": "javax.servlet",
    "class": "ServletRequest",
    "method": "getAttribute",
    "signature": "Object getAttribute(String p0)",
    "type": "none"
  },
  {
    "package": "javax.servlet",
    "class": "ServletRequest",
    "method": "getAttributeNames",
    "signature": "Enumeration<String> getAttributeNames()",
    "type": "none"
  },
  {
    "package": "javax.servlet",
    "class": "ServletRequest",
    "method": "getCharacterEncoding",
    "signature": "String getCharacterEncoding()",
    "type": "none"
  },
  {
    "package": "javax.servlet",
    "class": "ServletRequest",
    "method": "getContentLength",
    "signature": "int getContentLength()",
    "type": "none"
  },
  {
    "package": "javax.servlet",
    "class": "ServletRequest",
    "method": "getContentType",
    "signature": "String getContentType()",
    "type": "none"
  },
  {
    "package": "javax.servlet",
    "class": "ServletRequest",
    "method": "getInputStream",
    "signature": "ServletInputStream getInputStream()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "javax.servlet",
    "class": "ServletRequest",
    "method": "getParameter",
    "signature": "String getParameter(String p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "javax.servlet",
    "class": "ServletRequest",
    "method": "getParameterMap",
    "signature": "Map<String,String[]> getParameterMap()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "javax.servlet",
    "class": "ServletRequest",
    "method": "getParameterValues",
    "signature": "String[] getParameterValues(String p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "javax.servlet",
    "class": "ServletRequest",
    "method": "getProtocol",
    "signature": "String getProtocol()",
    "type": "none"
  },
  {
    "package": "javax.servlet",
    "class": "ServletRequest",
    "method": "getRemoteAddr",
    "signature": "String getRemoteAddr()",
    "type": "none"
  },
  {
    "package": "javax.servlet",
    "class": "ServletRequest",
    "method": "getScheme",
    "signature": "String getScheme()",
    "type": "none"
  },
  {
    "package": "javax.servlet",
    "class": "ServletRequest",
    "method": "getServerPort",
    "signature": "int getServerPort()",
    "type": "none"
  },
  {
    "package": "javax.servlet",
    "class": "ServletRequest",
    "method": "setAttribute",
    "signature": "void setAttribute(String p0, Object p1)",
    "type": "none"
  },
  {
    "package": "javax.servlet",
    "class": "ServletRequestWrapper",
    "method": "getInputStream",
    "signature": "ServletInputStream getInputStream()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "javax.servlet",
    "class": "ServletRequestWrapper",
    "method": "getRequest",
    "signature": "ServletRequest getRequest()",
    "type": "none"
  },
  {
    "package": "javax.servlet",
    "class": "ServletResponse",
    "method": "getContentType",
    "signature": "String getContentType()",
    "type": "none"
  },
  {
    "package": "javax.servlet",
    "class": "ServletResponse",
    "method": "getOutputStream",
    "signature": "ServletOutputStream getOutputStream()",
    "sink_args": [],
    "type": "sink"
  },
  {
    "package": "javax.servlet",
    "class": "ServletResponse",
    "method": "getWriter",
    "signature": "PrintWriter getWriter()",
    "sink_args": [],
    "type": "sink"
  },
  {
    "package": "javax.servlet",
    "class": "ServletResponse",
    "method": "isCommitted",
    "signature": "boolean isCommitted()",
    "type": "none"
  },
  {
    "package": "javax.servlet",
    "class": "ServletResponse",
    "method": "setContentType",
    "signature": "void setContentType(String p0)",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "Cookie",
    "method": "Cookie",
    "signature": "Cookie(String p0, String p1)",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "Cookie",
    "method": "getDomain",
    "signature": "String getDomain()",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "Cookie",
    "method": "getMaxAge",
    "signature": "int getMaxAge()",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "Cookie",
    "method": "getName",
    "signature": "String getName()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "javax.servlet.http",
    "class": "Cookie",
    "method": "getPath",
    "signature": "String getPath()",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "Cookie",
    "method": "getSecure",
    "signature": "boolean getSecure()",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "Cookie",
    "method": "getValue",
    "signature": "String getValue()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "javax.servlet.http",
    "class": "Cookie",
    "method": "isHttpOnly",
    "signature": "boolean isHttpOnly()",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "Cookie",
    "method": "setDomain",
    "signature": "void setDomain(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "javax.servlet.http",
    "class": "Cookie",
    "method": "setHttpOnly",
    "signature": "void setHttpOnly(boolean p0)",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "Cookie",
    "method": "setMaxAge",
    "signature": "void setMaxAge(int p0)",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "Cookie",
    "method": "setPath",
    "signature": "void setPath(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "javax.servlet.http",
    "class": "Cookie",
    "method": "setSecure",
    "signature": "void setSecure(boolean p0)",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpServletRequest",
    "method": "getContextPath",
    "signature": "String getContextPath()",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpServletRequest",
    "method": "getCookies",
    "signature": "Cookie[] getCookies()",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpServletRequest",
    "method": "getHeader",
    "signature": "String getHeader(String p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpServletRequest",
    "method": "getHeaderNames",
    "signature": "Enumeration<String> getHeaderNames()",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpServletRequest",
    "method": "getHeaders",
    "signature": "Enumeration<String> getHeaders(String p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpServletRequest",
    "method": "getMethod",
    "signature": "String getMethod()",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpServletRequest",
    "method": "getPathInfo",
    "signature": "String getPathInfo()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpServletRequest",
    "method": "getQueryString",
    "signature": "String getQueryString()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpServletRequest",
    "method": "getRequestURI",
    "signature": "String getRequestURI()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpServletRequest",
    "method": "getRequestURL",
    "signature": "StringBuffer getRequestURL()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpServletRequest",
    "method": "getServletPath",
    "signature": "String getServletPath()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpServletRequest",
    "method": "getSession",
    "signature": "HttpSession getSession()",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpServletRequest",
    "method": "getSession",
    "signature": "HttpSession getSession(boolean p0)",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpServletRequestWrapper",
    "method": "HttpServletRequestWrapper",
    "signature": "HttpServletRequestWrapper(HttpServletRequest p0)",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpServletResponse",
    "method": "addCookie",
    "signature": "void addCookie(Cookie p0)",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpServletResponse",
    "method": "addHeader",
    "signature": "void addHeader(String p0, String p1)",
    "sink_args": [
      "p1"
    ],
    "type": "sink"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpServletResponse",
    "method": "getHeaders",
    "signature": "Collection<String> getHeaders(String p0)",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpServletResponse",
    "method": "getStatus",
    "signature": "int getStatus()",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpServletResponse",
    "method": "sendError",
    "signature": "void sendError(int p0)",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpServletResponse",
    "method": "sendRedirect",
    "signature": "void sendRedirect(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpServletResponse",
    "method": "setHeader",
    "signature": "void setHeader(String p0, String p1)",
    "sink_args": [
      "p1"
    ],
    "type": "sink"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpServletResponse",
    "method": "setStatus",
    "signature": "void setStatus(int p0)",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpSession",
    "method": "getAttribute",
    "signature": "Object getAttribute(String p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpSession",
    "method": "getAttributeNames",
    "signature": "Enumeration<String> getAttributeNames()",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpSession",
    "method": "getCreationTime",
    "signature": "long getCreationTime()",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpSession",
    "method": "getId",
    "signature": "String getId()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpSession",
    "method": "getLastAccessedTime",
    "signature": "long getLastAccessedTime()",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpSession",
    "method": "getMaxInactiveInterval",
    "signature": "int getMaxInactiveInterval()",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpSession",
    "method": "invalidate",
    "signature": "void invalidate()",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpSession",
    "method": "isNew",
    "signature": "boolean isNew()",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpSession",
    "method": "removeAttribute",
    "signature": "void removeAttribute(String p0)",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpSession",
    "method": "setAttribute",
    "signature": "void setAttribute(String p0, Object p1)",
    "type": "none"
  },
  {
    "package": "javax.servlet.http",
    "class": "HttpSession",
    "method": "setMaxInactiveInterval",
    "signature": "void setMaxInactiveInterval(int p0)",
    "type": "none"
  },
  {
    "package": "javax.xml.parsers",
    "class": "DocumentBuilder",
    "method": "parse",
    "signature": "Document parse(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "javax.xml.parsers",
    "class": "DocumentBuilderFactory",
    "method": "newDocumentBuilder",
    "signature": "DocumentBuilder newDocumentBuilder()",
    "type": "none"
  },
  {
    "package": "javax.xml.parsers",
    "class": "DocumentBuilderFactory",
    "method": "newInstance",
    "signature": "DocumentBuilderFactory newInstance()",
    "type": "none"
  },
  {
    "package": "javax.xml.parsers",
    "class": "DocumentBuilderFactory",
    "method": "setExpandEntityReferences",
    "signature": "void setExpandEntityReferences(boolean p0)",
    "type": "none"
  },
  {
    "package": "javax.xml.parsers",
    "class": "DocumentBuilderFactory",
    "method": "setFeature",
    "signature": "void setFeature(String p0, boolean p1)",
    "type": "none"
  },
  {
    "package": "javax.xml.parsers",
    "class": "DocumentBuilderFactory",
    "method": "setXIncludeAware",
    "signature": "void setXIncludeAware(boolean p0)",
    "type": "none"
  },
  {
    "package": "javax.xml.transform.dom",
    "class": "DOMSource",
    "method": "DOMSource",
    "signature": "DOMSource(Node p0)",
    "type": "none"
  },
  {
    "package": "javax.xml.transform.stream",
    "class": "StreamSource",
    "method": "StreamSource",
    "signature": "StreamSource(Reader p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "javax.xml.validation",
    "class": "Schema",
    "method": "newValidator",
    "signature": "Validator newValidator()",
    "type": "none"
  },
  {
    "package": "javax.xml.validation",
    "class": "SchemaFactory",
    "method": "newInstance",
    "signature": "SchemaFactory newInstance(String p0)",
    "type": "none"
  },
  {
    "package": "javax.xml.validation",
    "class": "SchemaFactory",
    "method": "newSchema",
    "signature": "Schema newSchema(Source p0)",
    "type": "none"
  },
  {
    "package": "javax.xml.validation",
    "class": "SchemaFactory",
    "method": "setProperty",
    "signature": "void setProperty(String p0, Object p1)",
    "type": "none"
  },
  {
    "package": "javax.xml.validation",
    "class": "Validator",
    "method": "setProperty",
    "signature": "void setProperty(String p0, Object p1)",
    "type": "none"
  },
  {
    "package": "javax.xml.validation",
    "class": "Validator",
    "method": "validate",
    "signature": "void validate(Source p0)",
    "type": "none"
  },
  {
    "package": "org.apache.commons.lang3",
    "class": "StringUtils",
    "method": "join",
    "signature": "String join(Iterable<?> p0, String p1)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "org.apache.http",
    "class": "Header",
    "method": "getName",
    "signature": "String getName()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "org.apache.http",
    "class": "Header",
    "method": "getValue",
    "signature": "String getValue()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "org.apache.http",
    "class": "HttpMessage",
    "method": "addHeader",
    "signature": "void addHeader(String p0, String p1)",
    "type": "none"
  },
  {
    "package": "org.apache.http",
    "class": "HttpMessage",
    "method": "getAllHeaders",
    "signature": "Header[] getAllHeaders()",
    "type": "none"
  },
  {
    "package": "org.apache.http",
    "class": "HttpResponse",
    "method": "getEntity",
    "signature": "HttpEntity getEntity()",
    "type": "none"
  },
  {
    "package": "org.apache.http",
    "class": "HttpResponse",
    "method": "getStatusLine",
    "signature": "StatusLine getStatusLine()",
    "type": "none"
  },
  {
    "package": "org.apache.http",
    "class": "StatusLine",
    "method": "getStatusCode",
    "signature": "int getStatusCode()",
    "type": "none"
  },
  {
    "package": "org.apache.http.client",
    "class": "HttpClient",
    "method": "execute",
    "signature": "HttpResponse execute(HttpUriRequest p0)",
    "type": "none"
  },
  {
    "package": "org.apache.http.client.methods",
    "class": "HttpDelete",
    "method": "HttpDelete",
    "signature": "HttpDelete(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "org.apache.http.client.methods",
    "class": "HttpEntityEnclosingRequestBase",
    "method": "setEntity",
    "signature": "void setEntity(HttpEntity p0)",
    "type": "none"
  },
  {
    "package": "org.apache.http.client.methods",
    "class": "HttpGet",
    "method": "HttpGet",
    "signature": "HttpGet(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "org.apache.http.client.methods",
    "class": "HttpHead",
    "method": "HttpHead",
    "signature": "HttpHead(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "org.apache.http.client.methods",
    "class": "HttpOptions",
    "method": "HttpOptions",
    "signature": "HttpOptions(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "org.apache.http.client.methods",
    "class": "HttpPatch",
    "method": "HttpPatch",
    "signature": "HttpPatch(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "org.apache.http.client.methods",
    "class": "HttpPost",
    "method": "HttpPost",
    "signature": "HttpPost(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "org.apache.http.client.methods",
    "class": "HttpPut",
    "method": "HttpPut",
    "signature": "HttpPut(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "org.apache.http.client.methods",
    "class": "HttpRequestBase",
    "method": "HttpRequestBase",
    "signature": "HttpRequestBase()",
    "type": "none"
  },
  {
    "package": "org.apache.http.client.methods",
    "class": "HttpRequestBase",
    "method": "releaseConnection",
    "signature": "void releaseConnection()",
    "type": "none"
  },
  {
    "package": "org.apache.http.client.methods",
    "class": "HttpRequestBase",
    "method": "setURI",
    "signature": "void setURI(URI p0)",
    "type": "none"
  },
  {
    "package": "org.apache.http.client.methods",
    "class": "HttpTrace",
    "method": "HttpTrace",
    "signature": "HttpTrace(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "org.apache.http.config",
    "class": "RegistryBuilder",
    "method": "build",
    "signature": "Registry<ConnectionSocketFactory> build()",
    "type": "none"
  },
  {
    "package": "org.apache.http.config",
    "class": "RegistryBuilder",
    "method": "create",
    "signature": "RegistryBuilder<I> create()",
    "type": "none"
  },
  {
    "package": "org.apache.http.config",
    "class": "RegistryBuilder",
    "method": "register",
    "signature": "RegistryBuilder<ConnectionSocketFactory> register(String p0, ConnectionSocketFactory p1)",
    "type": "none"
  },
  {
    "package": "org.apache.http.conn.ssl",
    "class": "SSLConnectionSocketFactory",
    "method": "SSLConnectionSocketFactory",
    "signature": "SSLConnectionSocketFactory(SSLSocketFactory p0, HostnameVerifier p1)",
    "type": "none"
  },
  {
    "package": "org.apache.http.entity",
    "class": "StringEntity",
    "method": "StringEntity",
    "signature": "StringEntity(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "org.apache.http.impl.client",
    "class": "DefaultRedirectStrategy",
    "method": "DefaultRedirectStrategy",
    "signature": "DefaultRedirectStrategy()",
    "type": "none"
  },
  {
    "package": "org.apache.http.impl.client",
    "class": "DefaultRedirectStrategy",
    "method": "isRedirected",
    "signature": "boolean isRedirected(HttpRequest p0, HttpResponse p1, HttpContext p2)",
    "type": "none"
  },
  {
    "package": "org.apache.http.impl.client",
    "class": "HttpClientBuilder",
    "method": "build",
    "signature": "CloseableHttpClient build()",
    "type": "none"
  },
  {
    "package": "org.apache.http.impl.client",
    "class": "HttpClientBuilder",
    "method": "create",
    "signature": "HttpClientBuilder create()",
    "type": "none"
  },
  {
    "package": "org.apache.http.impl.client",
    "class": "HttpClientBuilder",
    "method": "setConnectionManager",
    "signature": "HttpClientBuilder setConnectionManager(HttpClientConnectionManager p0)",
    "type": "none"
  },
  {
    "package": "org.apache.http.impl.client",
    "class": "HttpClientBuilder",
    "method": "setRedirectStrategy",
    "signature": "HttpClientBuilder setRedirectStrategy(RedirectStrategy p0)",
    "type": "none"
  },
  {
    "package": "org.apache.http.impl.conn",
    "class": "BasicHttpClientConnectionManager",
    "method": "BasicHttpClientConnectionManager",
    "signature": "BasicHttpClientConnectionManager(Lookup<ConnectionSocketFactory> p0)",
    "type": "none"
  },
  {
    "package": "org.apache.http.message",
    "class": "AbstractHttpMessage",
    "method": "setHeader",
    "signature": "void setHeader(String p0, String p1)",
    "type": "none"
  },
  {
    "package": "org.apache.http.util",
    "class": "EntityUtils",
    "method": "toString",
    "signature": "String toString(HttpEntity p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "org.dataloader",
    "class": "DataLoader",
    "method": "load",
    "signature": "CompletableFuture<User> load(String p0)",
    "type": "none"
  },
  {
    "package": "org.dataloader",
    "class": "DataLoader",
    "method": "newDataLoader",
    "signature": "DataLoader<K,V> newDataLoader(BatchLoaderWithContext<K,V> p0)",
    "type": "none"
  },
  {
    "package": "org.dataloader",
    "class": "DataLoader",
    "method": "newMappedDataLoader",
    "signature": "DataLoader<K,V> newMappedDataLoader(MappedBatchLoaderWithContext<K,V> p0)",
    "type": "none"
  },
  {
    "package": "org.dataloader",
    "class": "DataLoaderRegistry",
    "method": "DataLoaderRegistry",
    "signature": "DataLoaderRegistry()",
    "type": "none"
  },
  {
    "package": "org.dataloader",
    "class": "DataLoaderRegistry",
    "method": "register",
    "signature": "DataLoaderRegistry register(String p0, DataLoader<?,?> p1)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.http.pathmap",
    "class": "MappedResource",
    "method": "getPathSpec",
    "signature": "PathSpec getPathSpec()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.http.pathmap",
    "class": "PathSpec",
    "method": "getDeclaration",
    "signature": "String getDeclaration()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.http.pathmap",
    "class": "ServletPathSpec",
    "method": "ServletPathSpec",
    "signature": "ServletPathSpec(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "org.eclipse.jetty.server",
    "class": "AbstractConnector",
    "method": "getServer",
    "signature": "Server getServer()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.server",
    "class": "AbstractConnector",
    "method": "setIdleTimeout",
    "signature": "void setIdleTimeout(long p0)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.server",
    "class": "AbstractNetworkConnector",
    "method": "setHost",
    "signature": "void setHost(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "org.eclipse.jetty.server",
    "class": "AbstractNetworkConnector",
    "method": "setPort",
    "signature": "void setPort(int p0)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.server",
    "class": "ForwardedRequestCustomizer",
    "method": "ForwardedRequestCustomizer",
    "signature": "ForwardedRequestCustomizer()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.server",
    "class": "HttpConfiguration",
    "method": "HttpConfiguration",
    "signature": "HttpConfiguration()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.server",
    "class": "HttpConfiguration",
    "method": "addCustomizer",
    "signature": "void addCustomizer(Customizer p0)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.server",
    "class": "HttpConfiguration",
    "method": "setSecureScheme",
    "signature": "void setSecureScheme(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "org.eclipse.jetty.server",
    "class": "HttpConnectionFactory",
    "method": "HttpConnectionFactory",
    "signature": "HttpConnectionFactory(HttpConfiguration p0)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.server",
    "class": "NCSARequestLog",
    "method": "NCSARequestLog",
    "signature": "NCSARequestLog(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "org.eclipse.jetty.server",
    "class": "Request",
    "method": "setHandled",
    "signature": "void setHandled(boolean p0)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.server",
    "class": "Server",
    "method": "Server",
    "signature": "Server()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.server",
    "class": "Server",
    "method": "Server",
    "signature": "Server(ThreadPool p0)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.server",
    "class": "Server",
    "method": "getConnectors",
    "signature": "Connector[] getConnectors()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.server",
    "class": "Server",
    "method": "getThreadPool",
    "signature": "ThreadPool getThreadPool()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.server",
    "class": "Server",
    "method": "join",
    "signature": "void join()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.server",
    "class": "Server",
    "method": "setConnectors",
    "signature": "void setConnectors(Connector[] p0)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.server",
    "class": "Server",
    "method": "setRequestLog",
    "signature": "void setRequestLog(RequestLog p0)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.server",
    "class": "ServerConnector",
    "method": "ServerConnector",
    "signature": "ServerConnector(Server p0)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.server",
    "class": "ServerConnector",
    "method": "ServerConnector",
    "signature": "ServerConnector(Server p0, ConnectionFactory[] p1)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.server",
    "class": "ServerConnector",
    "method": "ServerConnector",
    "signature": "ServerConnector(Server p0, SslContextFactory p1, ConnectionFactory[] p2)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.server",
    "class": "ServerConnector",
    "method": "setSoLingerTime",
    "signature": "void setSoLingerTime(int p0)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.server",
    "class": "SslConnectionFactory",
    "method": "getSslContextFactory",
    "signature": "SslContextFactory getSslContextFactory()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.server.handler",
    "class": "Context",
    "method": "getAttribute",
    "signature": "Object getAttribute(String p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "org.eclipse.jetty.server.handler",
    "class": "ContextHandler",
    "method": "getServletContext",
    "signature": "Context getServletContext()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.server.handler",
    "class": "ContextHandler",
    "method": "setContextPath",
    "signature": "void setContextPath(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "org.eclipse.jetty.server.handler",
    "class": "HandlerCollection",
    "method": "setHandlers",
    "signature": "void setHandlers(Handler[] p0)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.server.handler",
    "class": "HandlerList",
    "method": "HandlerList",
    "signature": "HandlerList()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.server.handler",
    "class": "HandlerWrapper",
    "method": "setHandler",
    "signature": "void setHandler(Handler p0)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.server.session",
    "class": "SessionHandler",
    "method": "SessionHandler",
    "signature": "SessionHandler()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.servlet",
    "class": "ServletContextHandler",
    "method": "ServletContextHandler",
    "signature": "ServletContextHandler(HandlerContainer p0, String p1, boolean p2, boolean p3)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.util",
    "class": "NotUtf8Exception",
    "method": "NotUtf8Exception",
    "signature": "NotUtf8Exception(String p0)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.util",
    "class": "URIUtil",
    "method": "encodePath",
    "signature": "String encodePath(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "org.eclipse.jetty.util.component",
    "class": "AbstractLifeCycle",
    "method": "start",
    "signature": "void start()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.util.component",
    "class": "AbstractLifeCycle",
    "method": "stop",
    "signature": "void stop()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.util.resource",
    "class": "Resource",
    "method": "getFile",
    "signature": "File getFile()",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "org.eclipse.jetty.util.ssl",
    "class": "SslContextFactory",
    "method": "SslContextFactory",
    "signature": "SslContextFactory(String p0)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.util.ssl",
    "class": "SslContextFactory",
    "method": "getKeyStoreResource",
    "signature": "Resource getKeyStoreResource()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.util.ssl",
    "class": "SslContextFactory",
    "method": "getTrustStoreResource",
    "signature": "Resource getTrustStoreResource()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.util.ssl",
    "class": "SslContextFactory",
    "method": "setKeyStorePassword",
    "signature": "void setKeyStorePassword(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "org.eclipse.jetty.util.ssl",
    "class": "SslContextFactory",
    "method": "setNeedClientAuth",
    "signature": "void setNeedClientAuth(boolean p0)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.util.ssl",
    "class": "SslContextFactory",
    "method": "setTrustStorePassword",
    "signature": "void setTrustStorePassword(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "org.eclipse.jetty.util.ssl",
    "class": "SslContextFactory",
    "method": "setTrustStorePath",
    "signature": "void setTrustStorePath(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "org.eclipse.jetty.util.ssl",
    "class": "SslContextFactory",
    "method": "setWantClientAuth",
    "signature": "void setWantClientAuth(boolean p0)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.util.thread",
    "class": "QueuedThreadPool",
    "method": "QueuedThreadPool",
    "signature": "QueuedThreadPool(int p0)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.util.thread",
    "class": "QueuedThreadPool",
    "method": "QueuedThreadPool",
    "signature": "QueuedThreadPool(int p0, int p1, int p2)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.util.thread",
    "class": "ThreadPool",
    "method": "getIdleThreads",
    "signature": "int getIdleThreads()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.util.thread",
    "class": "ThreadPool",
    "method": "getThreads",
    "signature": "int getThreads()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.webapp",
    "class": "WebAppContext",
    "method": "WebAppContext",
    "signature": "WebAppContext()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.webapp",
    "class": "WebAppContext",
    "method": "setServer",
    "signature": "void setServer(Server p0)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.webapp",
    "class": "WebAppContext",
    "method": "setWar",
    "signature": "void setWar(String p0)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.websocket.api",
    "class": "RemoteEndpoint",
    "method": "sendString",
    "signature": "void sendString(String p0)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.websocket.api",
    "class": "Session",
    "method": "close",
    "signature": "void close(int p0, String p1)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.websocket.api",
    "class": "Session",
    "method": "getRemote",
    "signature": "RemoteEndpoint getRemote()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.websocket.api",
    "class": "WebSocketAdapter",
    "method": "WebSocketAdapter",
    "signature": "WebSocketAdapter()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.websocket.api",
    "class": "WebSocketPolicy",
    "method": "getIdleTimeout",
    "signature": "long getIdleTimeout()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.websocket.api",
    "class": "WebSocketPolicy",
    "method": "setIdleTimeout",
    "signature": "void setIdleTimeout(long p0)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.websocket.client",
    "class": "ClientUpgradeRequest",
    "method": "ClientUpgradeRequest",
    "signature": "ClientUpgradeRequest()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.websocket.client",
    "class": "WebSocketClient",
    "method": "WebSocketClient",
    "signature": "WebSocketClient()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.websocket.client",
    "class": "WebSocketClient",
    "method": "connect",
    "signature": "Future<Session> connect(Object p0, URI p1, ClientUpgradeRequest p2)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.websocket.server",
    "class": "NativeWebSocketConfiguration",
    "method": "addMapping",
    "signature": "void addMapping(PathSpec p0, WebSocketCreator p1)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.websocket.server",
    "class": "NativeWebSocketConfiguration",
    "method": "getFactory",
    "signature": "WebSocketServerFactory getFactory()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.websocket.server",
    "class": "NativeWebSocketConfiguration",
    "method": "getMatch",
    "signature": "MappedResource<WebSocketCreator> getMatch(String p0)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.websocket.server",
    "class": "WebSocketServerFactory",
    "method": "getPolicy",
    "signature": "WebSocketPolicy getPolicy()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.websocket.server",
    "class": "WebSocketUpgradeFilter",
    "method": "configureContext",
    "signature": "WebSocketUpgradeFilter configureContext(ServletContextHandler p0)",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.websocket.server",
    "class": "WebSocketUpgradeFilter",
    "method": "getFactory",
    "signature": "WebSocketServletFactory getFactory()",
    "type": "none"
  },
  {
    "package": "org.eclipse.jetty.websocket.servlet",
    "class": "WebSocketServletFactory",
    "method": "getPolicy",
    "signature": "WebSocketPolicy getPolicy()",
    "type": "none"
  },
  {
    "package": "org.mvel2.integration.impl",
    "class": "ImmutableDefaultFactory",
    "method": "ImmutableDefaultFactory",
    "signature": "ImmutableDefaultFactory()",
    "type": "none"
  },
  {
    "package": "org.mvel2.templates",
    "class": "CompiledTemplate",
    "method": "getRoot",
    "signature": "Node getRoot()",
    "type": "none"
  },
  {
    "package": "org.mvel2.templates",
    "class": "CompiledTemplate",
    "method": "getTemplate",
    "signature": "char[] getTemplate()",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "org.mvel2.templates",
    "class": "TemplateCompiler",
    "method": "compileTemplate",
    "signature": "CompiledTemplate compileTemplate(String p0)",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "org.mvel2.templates",
    "class": "TemplateRuntime",
    "method": "TemplateRuntime",
    "signature": "TemplateRuntime(char[] p0, TemplateRegistry p1, Node p2, String p3)",
    "type": "none"
  },
  {
    "package": "org.mvel2.templates",
    "class": "TemplateRuntime",
    "method": "execute",
    "signature": "Object execute(StringAppender p0, Object p1, VariableResolverFactory p2)",
    "sink_args": [
      "p1"
    ],
    "type": "sink"
  },
  {
    "package": "org.mvel2.util",
    "class": "StringAppender",
    "method": "StringAppender",
    "signature": "StringAppender()",
    "type": "none"
  },
  {
    "package": "org.powermock.api.mockito",
    "class": "PowerMockito",
    "method": "whenNew",
    "signature": "ConstructorExpectationSetup<T> whenNew(Class<T> p0)",
    "type": "none"
  },
  {
    "package": "org.powermock.api.mockito.expectation",
    "class": "WithAnyArguments",
    "method": "withAnyArguments",
    "signature": "OngoingStubbing<ServletContextHandler> withAnyArguments()",
    "type": "none"
  },
  {
    "package": "org.powermock.reflect",
    "class": "Whitebox",
    "method": "getInternalState",
    "signature": "T getInternalState(Object p0, String p1)",
    "type": "none"
  },
  {
    "package": "org.powermock.reflect",
    "class": "Whitebox",
    "method": "setInternalState",
    "signature": "void setInternalState(Object p0, String p1, Object p2)",
    "type": "none"
  },
  {
    "package": "org.reactivestreams",
    "class": "Publisher",
    "method": "subscribe",
    "signature": "void subscribe(Subscriber<? super ExecutionResult> p0)",
    "type": "none"
  },
  {
    "package": "org.reactivestreams",
    "class": "Subscriber",
    "method": "onComplete",
    "signature": "void onComplete()",
    "type": "none"
  },
  {
    "package": "org.reactivestreams",
    "class": "Subscriber",
    "method": "onNext",
    "signature": "void onNext(Map<String,Object> p0)",
    "type": "none"
  },
  {
    "package": "org.reactivestreams",
    "class": "Subscriber",
    "method": "onNext",
    "signature": "void onNext(Object p0)",
    "type": "none"
  },
  {
    "package": "org.reactivestreams",
    "class": "Subscriber",
    "method": "onSubscribe",
    "signature": "void onSubscribe(Subscription p0)",
    "type": "none"
  },
  {
    "package": "org.reactivestreams",
    "class": "Subscription",
    "method": "cancel",
    "signature": "void cancel()",
    "type": "none"
  },
  {
    "package": "org.reactivestreams",
    "class": "Subscription",
    "method": "request",
    "signature": "void request(long p0)",
    "type": "none"
  },
  {
    "package": "org.slf4j",
    "class": "Logger",
    "method": "debug",
    "signature": "void debug(String p0)",
    "type": "none"
  },
  {
    "package": "org.slf4j",
    "class": "Logger",
    "method": "debug",
    "signature": "void debug(String p0, Object p1, Object p2)",
    "type": "none"
  },
  {
    "package": "org.slf4j",
    "class": "Logger",
    "method": "debug",
    "signature": "void debug(String p0, Object[] p1)",
    "type": "none"
  },
  {
    "package": "org.slf4j",
    "class": "Logger",
    "method": "error",
    "signature": "void error(String p0)",
    "type": "none"
  },
  {
    "package": "org.slf4j",
    "class": "Logger",
    "method": "error",
    "signature": "void error(String p0, Object p1)",
    "type": "none"
  },
  {
    "package": "org.slf4j",
    "class": "Logger",
    "method": "error",
    "signature": "void error(String p0, Throwable p1)",
    "type": "none"
  },
  {
    "package": "org.slf4j",
    "class": "Logger",
    "method": "info",
    "signature": "void info(String p0)",
    "type": "none"
  },
  {
    "package": "org.slf4j",
    "class": "Logger",
    "method": "info",
    "signature": "void info(String p0, Object p1)",
    "type": "none"
  },
  {
    "package": "org.slf4j",
    "class": "Logger",
    "method": "info",
    "signature": "void info(String p0, Object p1, Object p2)",
    "type": "none"
  },
  {
    "package": "org.slf4j",
    "class": "Logger",
    "method": "info",
    "signature": "void info(String p0, Object[] p1)",
    "type": "none"
  },
  {
    "package": "org.slf4j",
    "class": "Logger",
    "method": "isDebugEnabled",
    "signature": "boolean isDebugEnabled()",
    "type": "none"
  },
  {
    "package": "org.slf4j",
    "class": "Logger",
    "method": "warn",
    "signature": "void warn(String p0)",
    "type": "none"
  },
  {
    "package": "org.slf4j",
    "class": "Logger",
    "method": "warn",
    "signature": "void warn(String p0, Object p1, Object p2)",
    "type": "none"
  },
  {
    "package": "org.slf4j",
    "class": "Logger",
    "method": "warn",
    "signature": "void warn(String p0, Throwable p1)",
    "type": "none"
  },
  {
    "package": "org.slf4j",
    "class": "LoggerFactory",
    "method": "getLogger",
    "signature": "Logger getLogger(Class<?> p0)",
    "type": "none"
  },
  {
    "package": "org.slf4j",
    "class": "LoggerFactory",
    "method": "getLogger",
    "signature": "Logger getLogger(String p0)",
    "type": "none"
  },
  {
    "package": "org.thymeleaf",
    "class": "TemplateEngine",
    "method": "TemplateEngine",
    "signature": "TemplateEngine()",
    "type": "none"
  },
  {
    "package": "org.thymeleaf",
    "class": "TemplateEngine",
    "method": "process",
    "signature": "void process(String p0, IContext p1, Writer p2)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "org.thymeleaf",
    "class": "TemplateEngine",
    "method": "setTemplateResolver",
    "signature": "void setTemplateResolver(ITemplateResolver p0)",
    "type": "none"
  },
  {
    "package": "org.thymeleaf.templateresolver",
    "class": "AbstractTemplateResolver",
    "method": "setName",
    "signature": "void setName(String p0)",
    "type": "none"
  },
  {
    "package": "org.thymeleaf.templateresolver",
    "class": "StringTemplateResolver",
    "method": "StringTemplateResolver",
    "signature": "StringTemplateResolver()",
    "type": "none"
  },
  {
    "package": "org.thymeleaf.templateresolver",
    "class": "StringTemplateResolver",
    "method": "setCacheable",
    "signature": "void setCacheable(boolean p0)",
    "type": "none"
  },
  {
    "package": "org.thymeleaf.templateresolver",
    "class": "StringTemplateResolver",
    "method": "setTemplateMode",
    "signature": "void setTemplateMode(TemplateMode p0)",
    "type": "none"
  },
  {
    "package": "org.thymeleaf.templateresource",
    "class": "StringTemplateResource",
    "method": "StringTemplateResource",
    "signature": "StringTemplateResource(String p0)",
    "sink_args": [],
    "type": "taint-propagator"
  },
  {
    "package": "org.xml.sax",
    "class": "SAXException",
    "method": "getMessage",
    "signature": "String getMessage()",
    "sink_args": [],
    "type": "source"
  },
  {
    "package": "org.xml.sax",
    "class": "SAXParseException",
    "method": "getSystemId",
    "signature": "String getSystemId()",
    "sink_args": [],
    "type": "source"
  }
]