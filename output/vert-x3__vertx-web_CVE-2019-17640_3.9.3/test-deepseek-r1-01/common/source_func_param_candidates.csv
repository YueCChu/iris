package,clazz,func,full_signature,doc
io.vertx.ext.web,Router,get,Route get(String path),Add a route that matches a HTTP GET request and the specified path URI paths that begin with this path will match the route
io.vertx.ext.web,Router,head,Route head(String path),Add a route that matches a HTTP HEAD request and the specified path URI paths that begin with this path will match the route
io.vertx.ext.web,Router,put,Route put(String path),Add a route that matches a HTTP PUT request and the specified path URI paths that begin with this path will match the route
io.vertx.ext.web,Router,accept,void accept(HttpServerRequest request),"This method is used to provide a request to the router. Usually you take request from the {@link io.vertx.core.http.HttpServer#requestHandler(Handler)} and pass it to this method. The router then routes it to matching routes. This method is now deprecated you can use this object directly as a request handler, which means there is no need for a method reference anymore. the request"
io.vertx.ext.web,Router,delete,Route delete(String path),Add a route that matches a HTTP DELETE request and the specified path URI paths that begin with this path will match the route
io.vertx.ext.web,Router,options,Route options(String path),Add a route that matches a HTTP OPTIONS request and the specified path URI paths that begin with this path will match the route
io.vertx.ext.web,Router,post,Route post(String path),Add a route that matches a HTTP POST request and the specified path URI paths that begin with this path will match the route
io.vertx.ext.web,Router,exceptionHandler,Router exceptionHandler(Handler<Throwable> exceptionHandler),"Specify a handler for any unhandled exceptions on this router. The handler will be called for exceptions thrown from handlers. This does not affect the normal failure routing logic. the exception handler a reference to this, so the API can be used fluently you should use {@link Router#errorHandler(int, Handler)} with 500 status code"
io.vertx.ext.web,Router,handleFailure,void handleFailure(RoutingContext context),Used to route a failure to the router. Used for sub-routers. You wouldn't normally call this method directly. the routing context
io.vertx.ext.web,Router,handleContext,void handleContext(RoutingContext context),Used to route a context to the router. Used for sub-routers. You wouldn't normally call this method directly. the routing context
io.vertx.ext.web,Router,errorHandler,"Router errorHandler(int statusCode, Handler<RoutingContext> errorHandler)","Specify an handler to handle an error for a particular status code. You can use to manage general errors too using status code 500. The handler will be called when the context fails and other failure handlers didn't write the reply or when an exception is thrown inside an handler. You <b>must not</b> use {@link RoutingContext#next()} inside the error handler This does not affect the normal failure routing logic. status code the errorHandler is capable of handle error handler. Note: You <b>must not</b> use {@link RoutingContext#next()} inside the provided handler a reference to this, so the API can be used fluently"
io.vertx.ext.web,Router,mountSubRouter,"Router mountSubRouter(String mountPoint, Router subRouter)","Mount a sub router on this router the mount point (path prefix) to mount it on the router to mount as a sub router a reference to this, so the API can be used fluently"
io.vertx.ext.web,Router,deleteWithRegex,Route deleteWithRegex(String regex),Add a route that matches a HTTP DELETE request and the specified path regex URI paths that begin with a match for this regex will match the route
io.vertx.ext.web,Router,postWithRegex,Route postWithRegex(String regex),Add a route that matches a HTTP POST request and the specified path regex URI paths that begin with a match for this regex will match the route
io.vertx.ext.web,Router,putWithRegex,Route putWithRegex(String regex),Add a route that matches a HTTP PUT request and the specified path regex URI paths that begin with a match for this regex will match the route
io.vertx.ext.web,Router,optionsWithRegex,Route optionsWithRegex(String regex),Add a route that matches a HTTP OPTIONS request and the specified path regex URI paths that begin with a match for this regex will match the route
io.vertx.ext.web,Router,headWithRegex,Route headWithRegex(String regex),Add a route that matches a HTTP HEAD request and the specified path regex URI paths that begin with a match for this regex will match the route
io.vertx.ext.web,Router,getWithRegex,Route getWithRegex(String regex),Add a route that matches a HTTP GET request and the specified path regex URI paths that begin with a match for this regex will match the route
io.vertx.ext.web,Router,routeWithRegex,Route routeWithRegex(String regex),Add a route that matches the specified path regex URI paths that begin with a match for this regex will match the route
io.vertx.ext.web,Router,routeWithRegex,"Route routeWithRegex(HttpMethod method, String regex)",Add a route that matches the specified HTTP method and path regex the HTTP method to match URI paths that begin with a match for this regex will match the route
io.vertx.ext.web,Router,route,Route route(String path),Add a route that matches the specified path URI paths that begin with this path will match the route
io.vertx.ext.web,Router,route,"Route route(HttpMethod method, String path)",Add a route that matches the specified HTTP method and path the HTTP method to match URI paths that begin with this path will match the route
io.vertx.ext.web,Router,router,Router router(Vertx vertx),Create a router the Vert.x instance the router
io.vertx.ext.web,RoutingContext,get,T get(String key),Get some data from the context. The data is available in any handlers that receive the context. the key for the data the type of the data the data if the data is not of the expected type
io.vertx.ext.web,RoutingContext,remove,T remove(String key),Remove some data from the context. The data is available in any handlers that receive the context. the key for the data the type of the data the previous data associated with the key if the data is not of the expected type
io.vertx.ext.web,RoutingContext,put,"RoutingContext put(String key, Object obj)","Put some arbitrary data in the context. This will be available in any handlers that receive the context. the key for the data the data a reference to this, so the API can be used fluently"
io.vertx.ext.web,RoutingContext,fail,void fail(Throwable throwable),"Fail the context with the specified throwable and 500 status code. <p> This will cause the router to route the context to any matching failure handlers for the request. If no failure handlers match It will trigger the error handler matching the status code. You can define such error handler with {@link Router#errorHandler(int, Handler)}. If no error handler is not defined, It will send a default failure response with 500 status code. a throwable representing the failure"
io.vertx.ext.web,RoutingContext,getCookie,Cookie getCookie(String name),Get the cookie with the specified name. the cookie name the cookie
io.vertx.ext.web,RoutingContext,removeCookie,Cookie removeCookie(String name),"Expire a cookie, notifying a User Agent to remove it from its cookie jar. the name of the cookie the cookie, if it existed, or null"
io.vertx.ext.web,RoutingContext,addCookie,RoutingContext addCookie(Cookie cookie),"Add a cookie. This will be sent back to the client in the response. the cookie a reference to this, so the API can be used fluently"
io.vertx.ext.web,RoutingContext,queryParam,List<String> queryParam(String name),Gets the value of a single query parameter. For more info {@link RoutingContext#queryParams()} The name of query parameter The list of all parameters matching the parameter name. It returns an empty list if no query parameter with {@code name} was found
io.vertx.ext.web,RoutingContext,pathParam,String pathParam(String name),Gets the value of a single path parameter the name of parameter as defined in path declaration the actual value of the parameter or null if it doesn't exist
io.vertx.ext.web,RoutingContext,reroute,"void reroute(HttpMethod method, String path)",Restarts the current router with a new method and path. All path parameters are then parsed and available on the params list. Query params will also be allowed and available. the new http request the new http path.
io.vertx.ext.web,RoutingContext,reroute,void reroute(String path),Restarts the current router with a new path and reusing the original method. All path parameters are then parsed and available on the params list. Query params will also be allowed and available. the new http path.
io.vertx.ext.web,RoutingContext,setUser,void setUser(User user),Set the user. Usually used by auth handlers to inject a User. You will not normally call this method. the user
io.vertx.ext.web,RoutingContext,addEndHandler,int addEndHandler(Handler<AsyncResult<Void>> handler),Add an end handler for the request/response context. This will be called when the response is disposed or an exception has been encountered to allow consistent cleanup. The handler is called asynchronously of when the response has been received by the client. the handler that will be called with either a success or failure result. the id of the handler. This can be used if you later want to remove the handler.
io.vertx.ext.web,RoutingContext,addBodyEndHandler,int addBodyEndHandler(Handler<Void> handler),Provides a handler that will be called after the last part of the body is written to the wire. The handler is called asynchronously of when the response has been received by the client. This provides a hook allowing you to do more operations once the request has been sent over the wire. Do not use this for resource cleanup as this handler might never get called (e.g. if the connection is reset). the handler the id of the handler. This can be used if you later want to remove the handler.
io.vertx.ext.web,RoutingContext,addHeadersEndHandler,int addHeadersEndHandler(Handler<Void> handler),Add a handler that will be called just before headers are written to the response. This gives you a hook where you can write any extra headers before the response has been written when it will be too late. the handler the id of the handler. This can be used if you later want to remove the handler.
io.vertx.ext.web,RoutingContext,getBodyAsString,String getBodyAsString(String encoding),"Get the entire HTTP request body as a string, assuming the specified encoding. The context must have first been routed to a {@link io.vertx.ext.web.handler.BodyHandler} for this to be populated. the encoding, e.g. ""UTF-16"" the body"
io.vertx.ext.web,Http2PushMapping,Http2PushMapping,"Http2PushMapping(String filePath, String extensionTarget, boolean noPush)",Constructor with params for Link preload the path of file to preload the link header extension describes if the file should be pushed
io.vertx.ext.web,Route,path,Route path(String path),"Set the path prefix for this route. If set then this route will only match request URI paths which start with this path prefix. Only a single path or path regex can be set for a route. the path prefix a reference to this, so the API can be used fluently"
io.vertx.ext.web,Route,handler,Route handler(Handler<RoutingContext> requestHandler),"Append a request handler to the route handlers list. The router routes requests to handlers depending on whether the various criteria such as method, path, etc match. When method, path, etc are the same for different routes, You should add multiple handlers to the same route object rather than creating two different routes objects with one handler for route the request handler a reference to this, so the API can be used fluently"
io.vertx.ext.web,Route,method,Route method(HttpMethod method),"Add an HTTP method for this route. By default a route will match all HTTP methods. If any are specified then the route will only match any of the specified methods the HTTP method to add a reference to this, so the API can be used fluently"
io.vertx.ext.web,Route,setRegexGroupsNames,Route setRegexGroupsNames(List<String> groups),"When you add a new route with a regular expression, you can add named capture groups for parameters. <br/> However, if you need more complex parameters names (like ""param_name""), you can add parameters names with this function. You have to name capture groups in regex with names: ""p0"", ""p1"", ""p2"", ... <br/> <br/> For example: If you declare route with regex \/(?<p0>[a-z]*)\/(?<p1>[a-z]*) and group names [""param_a"", ""param-b""] for uri /hello/world you receive inside pathParams() the parameter param_a = ""hello"" group names a reference to this, so the API can be used fluently"
io.vertx.ext.web,Route,failureHandler,Route failureHandler(Handler<RoutingContext> failureHandler),"Append a failure handler to the route failure handlers list. The router routes failures to failurehandlers depending on whether the various criteria such as method, path, etc match. When method, path, etc are the same for different routes, You should add multiple failure handlers to the same route object rather than creating two different routes objects with one failure handler for route the request handler a reference to this, so the API can be used fluently"
io.vertx.ext.web,Route,blockingHandler,"Route blockingHandler(Handler<RoutingContext> requestHandler, boolean ordered)","Specify a blocking request handler for the route. This method works just like {@link #handler(Handler)} excepted that it will run the blocking handler on a worker thread so that it won't block the event loop. Note that it's safe to call context.next() from the blocking handler as it will be executed on the event loop context (and not on the worker thread. If the blocking handler is ordered it means that any blocking handlers for the same context are never executed concurrently but always in the order they were called. The default value of ordered is true. If you do not want this behaviour and don't mind if your blocking handlers are executed in parallel you can set ordered to false. the blocking request handler if true handlers are executed in sequence, otherwise are run in parallel a reference to this, so the API can be used fluently"
io.vertx.ext.web,Route,blockingHandler,Route blockingHandler(Handler<RoutingContext> requestHandler),"Like {@link io.vertx.ext.web.Route#blockingHandler(Handler, boolean)} called with ordered = true"
io.vertx.ext.web,Route,subRouter,Route subRouter(Router subRouter),"Use a (sub) {@link Router} as a handler. There are several requirements to be fulfilled for this to be accepted. <ul> <li>The route path must end with a wild card</li> <li>Parameters are allowed but full regex patterns not</li> <li>No other handler can be registered before or after this call (but they can on a new route object for the same path)</li> <li>Only 1 router per path object</li> </ul> the router to add a reference to this, so the API can be used fluently"
io.vertx.ext.web,Route,consumes,Route consumes(String contentType),"Add a content type consumed by this route. Used for content based routing. the content type a reference to this, so the API can be used fluently"
io.vertx.ext.web,Route,produces,Route produces(String contentType),"Add a content type produced by this route. Used for content based routing. the content type a reference to this, so the API can be used fluently"
io.vertx.ext.web,Route,pathRegex,Route pathRegex(String path),"Set the path prefix as a regular expression. If set then this route will only match request URI paths, the beginning of which match the regex. Only a single path or path regex can be set for a route. the path regex a reference to this, so the API can be used fluently"
io.vertx.ext.web,Session,get,T get(String key),Get some data from the session the key of the data the data
io.vertx.ext.web,Session,put,"Session put(String key, Object obj)","Put some data in a session the key for the data the data a reference to this, so the API can be used fluently"
io.vertx.ext.web.api,OperationResponse,setStatusMessage,OperationResponse setStatusMessage(String statusMessage),
io.vertx.ext.web.api,OperationResponse,OperationResponse,"OperationResponse(Integer statusCode, String statusMessage, Buffer payload, MultiMap headers)",
io.vertx.ext.web.api,OperationResponse,OperationResponse,OperationResponse(JsonObject json),
io.vertx.ext.web.api,OperationResponse,completedWithPlainText,OperationResponse completedWithPlainText(Buffer text),
io.vertx.ext.web.api,OperationResponse,completedWithJson,OperationResponse completedWithJson(JsonArray jsonArray),
io.vertx.ext.web.api,OperationResponse,completedWithJson,OperationResponse completedWithJson(JsonObject jsonObject),
io.vertx.ext.web.api,OperationRequest,OperationRequest,"OperationRequest(JsonObject params, MultiMap headers, JsonObject user, JsonObject extra)",
io.vertx.ext.web.api,RequestParameters,formParameter,RequestParameter formParameter(String name),Get form parameter by name Parameter name
io.vertx.ext.web.api,RequestParameters,cookieParameter,RequestParameter cookieParameter(String name),Get cookie parameter by name Parameter name
io.vertx.ext.web.api,RequestParameters,headerParameter,RequestParameter headerParameter(String name),Get header parameter by name Parameter name
io.vertx.ext.web.api,RequestParameters,queryParameter,RequestParameter queryParameter(String name),Get query parameter by name Parameter name
io.vertx.ext.web.api,RequestParameters,pathParameter,RequestParameter pathParameter(String name),Get path parameter by name Parameter name
io.vertx.ext.web.api,RequestParameter,getObjectValue,RequestParameter getObjectValue(String key),"If value is a map of fields, it returns value of field with key provided, otherwise it returns null"
io.vertx.ext.web.api.contract,RouterFactoryOptions,setOperationModelKey,RouterFactoryOptions setOperationModelKey(String operationModelKey),"When set, an additional handler will be created to expose the operation model in the routing context under the given key. When the key is null, the handler is not added."
io.vertx.ext.web.api.contract.openapi3,OpenAPI3RouterFactory,create,"void create(Vertx vertx, String url, List<JsonObject> auth, Handler<AsyncResult<OpenAPI3RouterFactory>> handler)","Create a new OpenAPI3RouterFactory location of your spec. It can be an absolute path, a local path or remote url (with HTTP protocol) list of authorization values needed to access the remote url. Each item should be json representation of an {@link AuthorizationValue} When specification is loaded, this handler will be called with AsyncResult<OpenAPI3RouterFactory>"
io.vertx.ext.web.api.contract.openapi3,OpenAPI3RouterFactory,create,"void create(Vertx vertx, String url, Handler<AsyncResult<OpenAPI3RouterFactory>> handler)","Create a new OpenAPI3RouterFactory location of your spec. It can be an absolute path, a local path or remote url (with HTTP protocol) When specification is loaded, this handler will be called with AsyncResult<OpenAPI3RouterFactory>"
io.vertx.ext.web.api.contract.openapi3,OpenAPI3RouterFactory,mountServiceInterface,"OpenAPI3RouterFactory mountServiceInterface(Class<> interfaceClass, String address)","Introspect the Web Api Service interface to route to service all matching method names with operation ids. Please give a look at <a href=""https://vertx.io/docs/vertx-web-api-service/java/"">vertx-web-api-service documentation</a> for more informations this factory"
io.vertx.ext.web.api.contract.openapi3,OpenAPI3RouterFactory,mountServiceFromTag,"OpenAPI3RouterFactory mountServiceFromTag(String tag, String address)","Specify to route an incoming request for all operations that contains the specified tag to a Web Api Service mounted at the specified address on event bus. The request is handled by the method that matches the operation id. Please give a look at <a href=""https://vertx.io/docs/vertx-web-api-service/java/"">vertx-web-api-service documentation</a> for more informations this factory"
io.vertx.ext.web.api.contract.openapi3,OpenAPI3RouterFactory,mountOperationToEventBus,"OpenAPI3RouterFactory mountOperationToEventBus(String operationId, String address)","Specify to route an incoming request for specified operation id to a Web Api Service mounted at the specified address on event bus. Please give a look at <a href=""https://vertx.io/docs/vertx-web-api-service/java/"">vertx-web-api-service documentation</a> for more informations this factory"
io.vertx.ext.web.api.contract.openapi3,OpenAPI3RouterFactory,addFailureHandlerByOperationId,"OpenAPI3RouterFactory addFailureHandlerByOperationId(String operationId, Handler<RoutingContext> failureHandler)",Add a failure handler by operation_id field in Operation object this factory
io.vertx.ext.web.api.contract.openapi3,OpenAPI3RouterFactory,addHandlerByOperationId,"OpenAPI3RouterFactory addHandlerByOperationId(String operationId, Handler<RoutingContext> handler)",Add an handler by operation_id field in Operation object this factory
io.vertx.ext.web.api.contract.openapi3,OpenAPI3RouterFactory,addSecuritySchemaScopeValidator,"OpenAPI3RouterFactory addSecuritySchemaScopeValidator(String securitySchemaName, String scopeName, Handler<RoutingContext> handler)",Add a particular scope validator. The main security schema will not be called if a specific scope validator is configured this factory
io.vertx.ext.web.client,WebClient,get,"HttpRequest<Buffer> get(String host, String requestURI)",Create an HTTP GET request to send to the server at the specified host and default port. the host the relative URI an HTTP client request object
io.vertx.ext.web.client,WebClient,get,"HttpRequest<Buffer> get(int port, String host, String requestURI)",Create an HTTP GET request to send to the server at the specified host and port. the port the host the relative URI an HTTP client request object
io.vertx.ext.web.client,WebClient,get,HttpRequest<Buffer> get(String requestURI),Create an HTTP GET request to send to the server at the default host and port. the relative URI an HTTP client request object
io.vertx.ext.web.client,WebClient,head,"HttpRequest<Buffer> head(String host, String requestURI)",Create an HTTP HEAD request to send to the server at the specified host and default port. the host the relative URI an HTTP client request object
io.vertx.ext.web.client,WebClient,head,"HttpRequest<Buffer> head(int port, String host, String requestURI)",Create an HTTP HEAD request to send to the server at the specified host and port. the port the host the relative URI an HTTP client request object
io.vertx.ext.web.client,WebClient,head,HttpRequest<Buffer> head(String requestURI),Create an HTTP HEAD request to send to the server at the default host and port. the relative URI an HTTP client request object
io.vertx.ext.web.client,WebClient,put,"HttpRequest<Buffer> put(String host, String requestURI)",Create an HTTP PUT request to send to the server at the specified host and default port. the host the relative URI an HTTP client request object
io.vertx.ext.web.client,WebClient,put,"HttpRequest<Buffer> put(int port, String host, String requestURI)",Create an HTTP PUT request to send to the server at the specified host and port. the port the host the relative URI an HTTP client request object
io.vertx.ext.web.client,WebClient,put,HttpRequest<Buffer> put(String requestURI),Create an HTTP PUT request to send to the server at the default host and port. the relative URI an HTTP client request object
io.vertx.ext.web.client,WebClient,create,"WebClient create(Vertx vertx, WebClientOptions options)",Create a web client using the provided {@code vertx} instance. the vertx instance the Web Client options the created web client
io.vertx.ext.web.client,WebClient,create,WebClient create(Vertx vertx),Create a web client using the provided {@code vertx} instance and default options. the vertx instance the created web client
io.vertx.ext.web.client,WebClient,raw,"HttpRequest<Buffer> raw(String customHttpMethod, String requestURI)",Create a request with a custom HTTP method to send to the server at the default host and port. custom HTTP Method the relative URI an HTTP client request object
io.vertx.ext.web.client,WebClient,wrap,"WebClient wrap(HttpClient httpClient, WebClientOptions options)","Wrap an {@code httpClient} with a web client and default options. <p> Only the specific web client portion of the {@code options} is used, the {@link io.vertx.core.http.HttpClientOptions} of the {@code httpClient} is reused. the {@link HttpClient} to wrap the Web Client options the web client"
io.vertx.ext.web.client,WebClient,wrap,WebClient wrap(HttpClient httpClient),Wrap an {@code httpClient} with a web client and default options. the {@link HttpClient} to wrap the web client
io.vertx.ext.web.client,WebClient,delete,"HttpRequest<Buffer> delete(String host, String requestURI)",Create an HTTP DELETE request to send to the server at the specified host and default port. the host the relative URI an HTTP client request object
io.vertx.ext.web.client,WebClient,delete,"HttpRequest<Buffer> delete(int port, String host, String requestURI)",Create an HTTP DELETE request to send to the server at the specified host and port. the port the host the relative URI an HTTP client request object
io.vertx.ext.web.client,WebClient,delete,HttpRequest<Buffer> delete(String requestURI),Create an HTTP DELETE request to send to the server at the default host and port. the relative URI an HTTP client request object
io.vertx.ext.web.client,WebClient,patch,"HttpRequest<Buffer> patch(String host, String requestURI)",Create an HTTP PATCH request to send to the server at the specified host and default port. the host the relative URI an HTTP client request object
io.vertx.ext.web.client,WebClient,patch,"HttpRequest<Buffer> patch(int port, String host, String requestURI)",Create an HTTP PATCH request to send to the server at the specified host and port. the port the host the relative URI an HTTP client request object
io.vertx.ext.web.client,WebClient,patch,HttpRequest<Buffer> patch(String requestURI),Create an HTTP PATCH request to send to the server at the default host and port. the relative URI an HTTP client request object
io.vertx.ext.web.client,WebClient,post,"HttpRequest<Buffer> post(String host, String requestURI)",Create an HTTP POST request to send to the server at the specified host and default port. the host the relative URI an HTTP client request object
io.vertx.ext.web.client,WebClient,post,"HttpRequest<Buffer> post(int port, String host, String requestURI)",Create an HTTP POST request to send to the server at the specified host and port. the port the host the relative URI an HTTP client request object
io.vertx.ext.web.client,WebClient,post,HttpRequest<Buffer> post(String requestURI),Create an HTTP POST request to send to the server at the default host and port. the relative URI an HTTP client request object
io.vertx.ext.web.client,WebClient,request,"HttpRequest<Buffer> request(HttpMethod method, RequestOptions options)",Create an HTTP request to send to the server at the specified host and port. the HTTP method the request options an HTTP client request object
io.vertx.ext.web.client,WebClient,request,"HttpRequest<Buffer> request(HttpMethod method, String requestURI)",Create an HTTP request to send to the server at the default host and port. the HTTP method the relative URI an HTTP client request object
io.vertx.ext.web.client,WebClient,request,"HttpRequest<Buffer> request(HttpMethod method, String host, String requestURI)",Create an HTTP request to send to the server at the specified host and default port. the HTTP method the host the relative URI an HTTP client request object
io.vertx.ext.web.client,WebClient,request,"HttpRequest<Buffer> request(HttpMethod method, SocketAddress serverAddress, int port, String host, String requestURI)","Like {@link #request(HttpMethod, int, String, String)} using the {@code serverAddress} parameter to connect to the server instead of the {@code port} and {@code host} parameters. <p> The request host header will still be created from the {@code port} and {@code host} parameters. <p> Use {@link SocketAddress#domainSocketAddress(String)} to connect to a unix domain socket server."
io.vertx.ext.web.client,WebClient,request,"HttpRequest<Buffer> request(HttpMethod method, int port, String host, String requestURI)",Create an HTTP request to send to the server at the specified host and port. the HTTP method the port the host the relative URI an HTTP client request object
io.vertx.ext.web.client,WebClient,deleteAbs,HttpRequest<Buffer> deleteAbs(String absoluteURI),"Create an HTTP DELETE request to send to the server using an absolute URI, specifying a response handler to receive the response the absolute URI an HTTP client request object"
io.vertx.ext.web.client,WebClient,putAbs,HttpRequest<Buffer> putAbs(String absoluteURI),"Create an HTTP PUT request to send to the server using an absolute URI, specifying a response handler to receive the response the absolute URI an HTTP client request object"
io.vertx.ext.web.client,WebClient,headAbs,HttpRequest<Buffer> headAbs(String absoluteURI),"Create an HTTP HEAD request to send to the server using an absolute URI, specifying a response handler to receive the response the absolute URI an HTTP client request object"
io.vertx.ext.web.client,WebClient,postAbs,HttpRequest<Buffer> postAbs(String absoluteURI),"Create an HTTP POST request to send to the server using an absolute URI, specifying a response handler to receive the response the absolute URI an HTTP client request object"
io.vertx.ext.web.client,WebClient,getAbs,HttpRequest<Buffer> getAbs(String absoluteURI),"Create an HTTP GET request to send to the server using an absolute URI, specifying a response handler to receive the response the absolute URI an HTTP client request object"
io.vertx.ext.web.client,WebClient,requestAbs,"HttpRequest<Buffer> requestAbs(HttpMethod method, String absoluteURI)",Create an HTTP request to send to the server using an absolute URI the HTTP method the absolute URI an HTTP client request object
io.vertx.ext.web.client,WebClient,patchAbs,HttpRequest<Buffer> patchAbs(String absoluteURI),"Create an HTTP PATCH request to send to the server using an absolute URI, specifying a response handler to receive the response the absolute URI an HTTP client request object"
io.vertx.ext.web.client,WebClientOptions,setProxyOptions,WebClientOptions setProxyOptions(ProxyOptions proxyOptions),
io.vertx.ext.web.client,WebClientOptions,setDefaultHost,WebClientOptions setDefaultHost(String defaultHost),
io.vertx.ext.web.client,WebClientOptions,setIdleTimeoutUnit,WebClientOptions setIdleTimeoutUnit(TimeUnit idleTimeoutUnit),
io.vertx.ext.web.client,WebClientOptions,setUserAgent,WebClientOptions setUserAgent(String userAgent),"Sets the Web Client user agent header. Defaults to Vert.x-WebClient/&lt;version&gt;. user agent header value a reference to this, so the API can be used fluently"
io.vertx.ext.web.client,WebClientOptions,WebClientOptions,WebClientOptions(JsonObject json),Creates a new instance from JSON. the JSON object
io.vertx.ext.web.client,WebClientSession,create,"WebClientSession create(WebClient webClient, CookieStore cookieStore)",Create a session aware web client using the provided {@code webClient} instance. the web client instance the created client
io.vertx.ext.web.client,WebClientSession,addHeader,"WebClientSession addHeader(String name, String value)","Configure the client to add an HTTP header to every request. the header name the header value a reference to this, so the API can be used fluently"
io.vertx.ext.web.api.contract.openapi3.impl,OpenAPI3PathResolver,OpenAPI3PathResolver,"OpenAPI3PathResolver(String oasPath, List<Parameter> parameters)",
io.vertx.ext.web.api.contract.openapi3.impl,OpenAPI3RequestValidationHandlerImpl,OpenAPI3RequestValidationHandlerImpl,"OpenAPI3RequestValidationHandlerImpl(Operation pathSpec, List<Parameter> resolvedParameters, OpenAPI spec, ResolverCache refsCache)",
io.vertx.ext.web.api.contract.openapi3.impl,OpenAPI3RouterFactoryImpl,OpenAPI3RouterFactoryImpl,"OpenAPI3RouterFactoryImpl(Vertx vertx, OpenAPI spec, ResolverCache refsCache)",
io.vertx.ext.web.api.contract.openapi3.impl,OpenApi3Utils,sanitizeOperationId,String sanitizeOperationId(String operationId),
io.vertx.ext.web.api.impl,RequestParameterImpl,RequestParameterImpl,"RequestParameterImpl(String name, Object value)",
io.vertx.ext.web.api.impl,RequestParametersImpl,setBody,void setBody(RequestParameter body),
io.vertx.ext.web.api.impl,RequestParametersImpl,setFormParameters,"void setFormParameters(Map<String,RequestParameter> formParameters)",
io.vertx.ext.web.api.impl,RequestParametersImpl,setCookieParameters,"void setCookieParameters(Map<String,RequestParameter> cookieParameters)",
io.vertx.ext.web.api.impl,RequestParametersImpl,setHeaderParameters,"void setHeaderParameters(Map<String,RequestParameter> headerParameters)",
io.vertx.ext.web.api.impl,RequestParametersImpl,setQueryParameters,"void setQueryParameters(Map<String,RequestParameter> queryParameters)",
io.vertx.ext.web.api.impl,RequestParametersImpl,setPathParameters,"void setPathParameters(Map<String,RequestParameter> pathParameters)",
io.vertx.ext.web.api.validation,HTTPRequestValidationHandler,addFormParam,"HTTPRequestValidationHandler addFormParam(String parameterName, ParameterType type, boolean required)",Add a single parameter inside a form with included parameter types expected name of parameter inside the form expected type of parameter true if parameter is required this handler
io.vertx.ext.web.api.validation,HTTPRequestValidationHandler,addQueryParamsArray,"HTTPRequestValidationHandler addQueryParamsArray(String arrayName, ParameterType type, boolean required)",Add a query parameters array with included parameter types expected name of array inside the query expected type of parameter true if parameter is required this handler
io.vertx.ext.web.api.validation,HTTPRequestValidationHandler,addQueryParam,"HTTPRequestValidationHandler addQueryParam(String parameterName, ParameterType type, boolean required)",Add a query parameter with included parameter types expected name of parameter inside the query expected type of parameter true if parameter is required this handler
io.vertx.ext.web.api.validation,HTTPRequestValidationHandler,addPathParam,"HTTPRequestValidationHandler addPathParam(String parameterName, ParameterType type)",Add a path parameter with included parameter types. All path params are <b>required</b> expected name of parameter inside the path expected type of parameter this handler
io.vertx.ext.web.api.validation,ParameterTypeValidator,isValid,RequestParameter isValid(String value),"Function that checks if parameter is valid. It returns a RequestParameter object that will be linked inside {@link RequestParameters}. For more info, check {@link RequestParameter}. value of parameter to test request parameter value"
io.vertx.ext.web.api.validation.impl,SingleValueParameterTypeValidator,SingleValueParameterTypeValidator,SingleValueParameterTypeValidator(T defaultValue),
io.vertx.ext.web.api.validation.impl,NumericTypeValidator,NumericTypeValidator,NumericTypeValidator(Class<> numberType),
io.vertx.ext.web.api.validation.impl,NumericTypeValidator,NumericTypeValidator,"NumericTypeValidator(Class<> numberType, Object defaultValue)",
io.vertx.ext.web.api.validation.impl,NumericTypeValidator,NumericTypeValidator,"NumericTypeValidator(Class<> numberType, Boolean exclusiveMaximum, Double maximum, Boolean exclusiveMinimum, Double minimum, Double multipleOf, Object defaultValue)",
io.vertx.ext.web.api.validation.impl,StringTypeValidator,StringTypeValidator,StringTypeValidator(String pattern),
io.vertx.ext.web.api.validation.impl,StringTypeValidator,StringTypeValidator,"StringTypeValidator(String pattern, Integer minLength, Integer maxLength, String defaultValue)",
io.vertx.ext.web.api.validation.impl,XMLTypeValidatorFactory,createXMLTypeValidator,XMLTypeValidator createXMLTypeValidator(String xmlSchema),
io.vertx.ext.web.codec,BodyCodec,json,BodyCodec<U> json(Class<U> type),Create and return a codec for Java objects encoded using Jackson mapper. a codec for mapping POJO to Json
io.vertx.ext.web.codec,BodyCodec,pipe,"BodyCodec<Void> pipe(WriteStream<Buffer> stream, boolean close)",A body codec that pipes the body to a write stream. the destination stream whether the destination stream should be closed the body codec for a write stream
io.vertx.ext.web.codec,BodyCodec,pipe,BodyCodec<Void> pipe(WriteStream<Buffer> stream),"A body codec that pipes the body to a write stream. <p></p> Same as pipe(stream, true). the destination tream the body codec for a write stream"
io.vertx.ext.web.client.impl,CookieStoreImpl,put,CookieStore put(Cookie cookie),
io.vertx.ext.web.client.impl,WebClientInternal,addInterceptor,WebClientInternal addInterceptor(Handler<HttpContext<?>> interceptor),"Add interceptor in the chain. <p/> The interceptor can maintain per request state with {@link HttpContext#get(String)}/{@link HttpContext#set(String, Object)}. <p/> A request/response can be processed several times (in case of retry) and thus they should use the per request state to ensure an operation is not done twice. <p/> This API is internal. the interceptor to add, must not be null a reference to this, so the API can be used fluently"
io.vertx.ext.web.client.impl,MultipartFormUpload,handler,MultipartFormUpload handler(Handler<Buffer> handler),
io.vertx.ext.web.client.impl,MultipartFormUpload,endHandler,MultipartFormUpload endHandler(Handler<Void> handler),
io.vertx.ext.web.client.impl,MultipartFormUpload,MultipartFormUpload,"MultipartFormUpload(Context context, MultipartForm parts, boolean multipart, EncoderMode encoderMode)",
io.vertx.ext.web.client.predicate,ResponsePredicate,create,"ResponsePredicate create(Function<HttpResponse<Void>,ResponsePredicateResult> test, ErrorConverter errorConverter)","Creates a new {@link ResponsePredicate}, using a custom {@code errorConverter}. the function to invoke when the response is received converts the result of the {@code test} function to a {@link Throwable}"
io.vertx.ext.web.client.predicate,ResponsePredicate,create,"ResponsePredicate create(Function<HttpResponse<Void>,ResponsePredicateResult> test)",Creates a new {@link ResponsePredicate}. The default error converter will be used (discarding the body). the function to invoke when the response is received
io.vertx.ext.web.client.predicate,ResponsePredicate,contentType,ResponsePredicate contentType(List<String> mimeTypes),Creates a predicate validating the response has a {@code content-type} header matching one of the {@code mimeTypes}. the list of mime types
io.vertx.ext.web.client.predicate,ResponsePredicateResult,failure,ResponsePredicateResult failure(String message),Creates a failed result. the failure description
io.vertx.ext.web.client.predicate,ErrorConverter,createFullBody,"ErrorConverter createFullBody(Function<ResponsePredicateResult,Throwable> converter)","Creates a full {@link ErrorConverter}, that will passed a predicate result with the response body. <p>The {@code converter} function will be invoked <em>after</em> the HTTP response body is received. a function creating a {@link Throwable} from a {@link ResponsePredicateResult}"
io.vertx.ext.web.client.spi,CookieStore,get,"Iterable<Cookie> get(Boolean ssl, String domain, String path)",Returns and {@link Iterable} of cookies satisfying the filters passed as paraemters. <p> It is implementation responsibility to return the appropriate cookies between the ones stored in this store and to clean up the path. true if is the connection secure the domain we are calling the path we are calling the matched cookies
io.vertx.ext.web.client.spi,CookieStore,remove,CookieStore remove(Cookie cookie),"Removes a previously added cookie. the {@link Cookie} to remove a reference to this, so the API can be used fluently"
io.vertx.ext.web.client.spi,CookieStore,put,CookieStore put(Cookie cookie),"Add a cookie to this {@code CookieStore}. <p> If a cookie with the same name is received from the server, it will overwrite this setting. the {@link Cookie} to add a reference to this, so the API can be used fluently"
io.vertx.ext.web.common.template,TemplateEngine,render,"void render(JsonObject context, String templateFileName, Handler<AsyncResult<Buffer>> handler)","Render the template. Template engines that support partials/fragments should extract the template base path from the template filename up to the last file separator. Some engines support localization, for these engines, there is a predefined key ""lang"" to specify the language to be used in the localization, the format should follow the standard locale formats e.g.: ""en-gb"", ""pt-br"", ""en"". the routing context the template file name to use the handler that will be called with a result containing the buffer or a failure."
io.vertx.ext.web.handler,SessionHandler,create,SessionHandler create(SessionStore sessionStore),Create a session handler the session store the handler
io.vertx.ext.web.handler,SessionHandler,setAuthProvider,SessionHandler setAuthProvider(AuthProvider authProvider),"Set an auth provider that will allow retrieving the User object from the session to the current routing context. any auth provider. a reference to this, so the API can be used fluently this method has no effect"
io.vertx.ext.web.handler,SessionHandler,setSessionCookiePath,SessionHandler setSessionCookiePath(String sessionCookiePath),"Set the session cookie path the session cookie path a reference to this, so the API can be used fluently"
io.vertx.ext.web.handler,SessionHandler,setSessionCookieName,SessionHandler setSessionCookieName(String sessionCookieName),"Set the session cookie name the session cookie name a reference to this, so the API can be used fluently"
io.vertx.ext.web.handler,BodyHandler,create,BodyHandler create(String uploadDirectory),Create a body handler and use the given upload directory. the uploads directory the body handler
io.vertx.ext.web.handler,BodyHandler,setUploadsDirectory,BodyHandler setUploadsDirectory(String uploadsDirectory),Set the uploads directory to use the uploads directory reference to this for fluency
io.vertx.ext.web.handler,AuthHandler,addAuthorities,AuthHandler addAuthorities(Set<String> authorities),"Add a set of required authorities for this auth handler the set of authorities a reference to this, so the API can be used fluently"
io.vertx.ext.web.handler,BasicAuthHandler,create,"AuthHandler create(AuthProvider authProvider, String realm)","Create a basic auth handler, specifying realm the auth service to use the realm to use the auth handler"
io.vertx.ext.web.handler,BasicAuthHandler,create,AuthHandler create(AuthProvider authProvider),Create a basic auth handler the auth provider to use the auth handler
io.vertx.ext.web.handler,CSRFHandler,create,CSRFHandler create(String secret),"Instantiate a new CSRFHandlerImpl with a secret <p> <pre> CSRFHandler.create(""s3cr37"") </pre> server secret to sign the token."
io.vertx.ext.web.handler,CSRFHandler,setResponseBody,CSRFHandler setResponseBody(String responseBody),"Set the body returned by the handler when the XSRF token is missing or invalid. the body of the response. If null, no response body will be returned. fluent"
io.vertx.ext.web.handler,ChainAuthHandler,append,ChainAuthHandler append(AuthHandler authHandler),Appends a auth provider to the chain. auth handler self
io.vertx.ext.web.handler,CorsHandler,create,CorsHandler create(String allowedOriginPattern),Create a CORS handler the allowed origin pattern the handler
io.vertx.ext.web.handler,CorsHandler,exposedHeaders,CorsHandler exposedHeaders(Set<String> headerNames),"Add a set of exposed headers the exposed header names a reference to this, so the API can be used fluently"
io.vertx.ext.web.handler,CorsHandler,exposedHeader,CorsHandler exposedHeader(String headerName),"Add an exposed header the exposed header name a reference to this, so the API can be used fluently"
io.vertx.ext.web.handler,CorsHandler,allowedHeaders,CorsHandler allowedHeaders(Set<String> headerNames),"Add a set of allowed headers the allowed header names a reference to this, so the API can be used fluently"
io.vertx.ext.web.handler,CorsHandler,allowedHeader,CorsHandler allowedHeader(String headerName),"Add an allowed header the allowed header name a reference to this, so the API can be used fluently"
io.vertx.ext.web.handler,CorsHandler,allowedMethods,CorsHandler allowedMethods(Set<HttpMethod> methods),"Add a set of  allowed methods the methods to add a reference to this, so the API can be used fluently"
io.vertx.ext.web.handler,CorsHandler,allowedMethod,CorsHandler allowedMethod(HttpMethod method),"Add an allowed method the method to add a reference to this, so the API can be used fluently"
io.vertx.ext.web.handler,DigestAuthHandler,create,DigestAuthHandler create(HtdigestAuth authProvider),Create a digest auth handler the auth provider to use the auth handler
io.vertx.ext.web.handler,ErrorHandler,create,ErrorHandler create(String errorTemplateName),Create an error handler the error template name - will be looked up from the classpath the handler
io.vertx.ext.web.handler,FaviconHandler,create,"FaviconHandler create(String path, long maxAgeSeconds)","Create a handler attempting to load favicon file from the specified path, and with the specified max cache time the path max how long the file will be cached by browser, in seconds the handler"
io.vertx.ext.web.handler,FaviconHandler,create,FaviconHandler create(String path),Create a handler attempting to load favicon file from the specified path the path the handler
io.vertx.ext.web.handler,FormLoginHandler,create,FormLoginHandler create(AuthProvider authProvider),Create a handler the auth service to use the handler
io.vertx.ext.web.handler,FormLoginHandler,setDirectLoggedInOKURL,FormLoginHandler setDirectLoggedInOKURL(String directLoggedInOKURL),Set the url to redirect to if the user logs in directly at the url of the form login handler without being redirected here first the URL to redirect to a reference to this for a fluent API
io.vertx.ext.web.handler,FormLoginHandler,setPasswordParam,FormLoginHandler setPasswordParam(String passwordParam),Set the name of the form param used to submit the password the name of the param a reference to this for a fluent API
io.vertx.ext.web.handler,FormLoginHandler,setUsernameParam,FormLoginHandler setUsernameParam(String usernameParam),Set the name of the form param used to submit the username the name of the param a reference to this for a fluent API
io.vertx.ext.web.handler,JWTAuthHandler,create,JWTAuthHandler create(JWTAuth authProvider),Create a JWT auth handler the auth provider to use the auth handler
io.vertx.ext.web.handler,LoggerHandler,create,"LoggerHandler create(boolean immediate, LoggerFormat format)",Create a handler with he specified format true if logging should occur as soon as request arrives the format the handler
io.vertx.ext.web.handler,LoggerHandler,create,LoggerHandler create(LoggerFormat format),Create a handler with he specified format the format the handler
io.vertx.ext.web.handler,MultiTenantHandler,create,"MultiTenantHandler create(Function<RoutingContext,String> tenantExtractor)",Create a MultiTenant handler using a custom tenant extraction function. the function that extracts the tenant id from the request the new handler.
io.vertx.ext.web.handler,MultiTenantHandler,create,MultiTenantHandler create(String header),"Create a MultiTenant handler that will extract the tenant id from a given header name. the header to lookup (e.g.: ""X-Tenant"") the new handler."
io.vertx.ext.web.handler,MultiTenantHandler,addDefaultHandler,MultiTenantHandler addDefaultHandler(Handler<RoutingContext> handler),Add a default handler for the case when no tenant was matched. The handler cannot be null. the handler to register. a fluent reference to self.
io.vertx.ext.web.handler,MultiTenantHandler,addTenantHandler,"MultiTenantHandler addTenantHandler(String tenant, Handler<RoutingContext> handler)",Add a handler for a given tenant to this handler. Both tenant and handler cannot be null. the tenant id the handler to register. In case a handler is already present for that tenant. a fluent reference to self.
io.vertx.ext.web.handler,OAuth2AuthHandler,create,OAuth2AuthHandler create(OAuth2Auth authProvider),Create a OAuth2 auth handler without host pinning. Most providers will not look to the redirect url but always redirect to the preconfigured callback. So this factory does not provide a callback url. the auth provider to use the auth handler
io.vertx.ext.web.handler,OAuth2AuthHandler,create,"OAuth2AuthHandler create(OAuth2Auth authProvider, String callbackURL)","Create a OAuth2 auth handler with host pinning the auth provider to use the callback URL you entered in your provider admin console, usually it should be something like: `https://myserver:8888/callback` the auth handler"
io.vertx.ext.web.handler,OAuth2AuthHandler,setupCallback,OAuth2AuthHandler setupCallback(Route route),add the callback handler to a given route. a given route e.g.: `/callback` self
io.vertx.ext.web.handler,RedirectAuthHandler,create,AuthHandler create(AuthProvider authProvider),Create a handler the auth service to use the handler
io.vertx.ext.web.handler,StaticHandler,create,StaticHandler create(String root),"Create a handler, specifying web-root the web-root the handler"
io.vertx.ext.web.handler,StaticHandler,setDefaultContentEncoding,StaticHandler setDefaultContentEncoding(String contentEncoding),"Set the default content encoding for text related files. This allows overriding the system settings default value. the desired content encoding e.g.: ""UTF-8"" a reference to this, so the API can be used fluently"
io.vertx.ext.web.handler,StaticHandler,setDirectoryTemplate,StaticHandler setDirectoryTemplate(String directoryTemplate),"Set the directory template to be used when directory listing the directory template a reference to this, so the API can be used fluently"
io.vertx.ext.web.handler,StaticHandler,skipCompressionForSuffixes,StaticHandler skipCompressionForSuffixes(Set<String> fileSuffixes),"Skip compression if the suffix of the file to send is in the provided {@code fileSuffixes} set. {@code Content-Encoding} header set to {@code identity} for the suffixes present in the {@code fileSuffixes} set the set of file suffixes that are already compressed a reference to this, so the API can be used fluently"
io.vertx.ext.web.handler,StaticHandler,skipCompressionForMediaTypes,StaticHandler skipCompressionForMediaTypes(Set<String> mediaTypes),"Skip compression if the media type of the file to send is in the provided {@code mediaTypes} set. {@code Content-Encoding} header set to {@code identity} for the types present in the {@code mediaTypes} set the set of mime types that are already compressed a reference to this, so the API can be used fluently"
io.vertx.ext.web.handler,StaticHandler,setHttp2PushMapping,StaticHandler setHttp2PushMapping(List<Http2PushMapping> http2PushMappings),"Set the file mapping for http2push and link preload the mapping for http2 push a reference to this, so the API can be used fluently"
io.vertx.ext.web.handler,StaticHandler,setIndexPage,StaticHandler setIndexPage(String indexPage),"Set the index page the index page a reference to this, so the API can be used fluently"
io.vertx.ext.web.handler,StaticHandler,setWebRoot,StaticHandler setWebRoot(String webRoot),"Set the web root the web root a reference to this, so the API can be used fluently"
io.vertx.ext.web.handler,TemplateHandler,create,"TemplateHandler create(TemplateEngine engine, String templateDirectory, String contentType)",Create a handler the template engine the template directory where templates will be looked for the content type header to be used in the response the handler
io.vertx.ext.web.handler,TemplateHandler,setIndexTemplate,TemplateHandler setIndexTemplate(String indexTemplate),"Set the index template the index template a reference to this, so the API can be used fluently"
io.vertx.ext.web.handler,VirtualHostHandler,create,"VirtualHostHandler create(String hostname, Handler<RoutingContext> handler)",Create a handler the handler
io.vertx.ext.web.handler.graphql,ApolloWSHandler,create,"ApolloWSHandler create(GraphQL graphQL, ApolloWSOptions options)",Create a new {@link ApolloWSHandler} that will use the provided {@code graphQL} object to execute requests. <p> The handler will be configured with the given {@code options}. options for configuring the {@link ApolloWSOptions}
io.vertx.ext.web.handler.graphql,ApolloWSHandler,create,ApolloWSHandler create(GraphQL graphQL),Create a new {@link ApolloWSHandler} that will use the provided {@code graphQL} object to execute requests. <p> The handler will be configured with the default {@link ApolloWSOptions}.
io.vertx.ext.web.handler.graphql,ApolloWSMessageType,from,ApolloWSMessageType from(String type),Get an {@link ApolloWSMessageType} from its text representation. the message type text representation the corresponding message type or null if none matches
io.vertx.ext.web.handler.graphql,GraphQLHandler,locale,"GraphQLHandler locale(Function<RoutingContext,Locale> factory)","Customize the {@link Locale} passed to the GraphQL execution engine. The provided {@code factory} method will be invoked for each incoming GraphQL request. a reference to this, so the API can be used fluently"
io.vertx.ext.web.handler.graphql,GraphQLHandler,create,"GraphQLHandler create(GraphQL graphQL, GraphQLHandlerOptions options)",Create a new {@link GraphQLHandler} that will use the provided {@code graphQL} object to execute queries. <p> The handler will be configured with the given {@code options}. options for configuring the {@link GraphQLHandler}
io.vertx.ext.web.handler.graphql,GraphQLHandler,create,GraphQLHandler create(GraphQL graphQL),Create a new {@link GraphQLHandler} that will use the provided {@code graphQL} object to execute queries. <p> The handler will be configured with default {@link GraphQLHandlerOptions options}.
io.vertx.ext.web.handler.graphql,GraphQLHandler,dataLoaderRegistry,"GraphQLHandler dataLoaderRegistry(Function<RoutingContext,DataLoaderRegistry> factory)","Customize the {@link DataLoaderRegistry}. The provided {@code factory} method will be invoked for each incoming GraphQL request. a reference to this, so the API can be used fluently"
io.vertx.ext.web.handler.graphql,GraphQLHandler,queryContext,"GraphQLHandler queryContext(Function<RoutingContext,Object> factory)","Customize the query context object. The provided {@code factory} method will be invoked for each incoming GraphQL request. a reference to this, so the API can be used fluently"
io.vertx.ext.web.handler.graphql,VertxPropertyDataFetcher,VertxPropertyDataFetcher,VertxPropertyDataFetcher(String propertyName),
io.vertx.ext.web.handler.impl,AuthHandlerImpl,AuthHandlerImpl,AuthHandlerImpl(AuthProvider authProvider),
io.vertx.ext.web.handler.impl,HttpStatusException,HttpStatusException,"HttpStatusException(int statusCode, String payload)",
io.vertx.ext.web.handler.impl,TemplateHandlerImpl,TemplateHandlerImpl,"TemplateHandlerImpl(TemplateEngine engine, String templateDirectory, String contentType)",
io.vertx.ext.web.handler.sockjs,SockJSBridgeOptions,SockJSBridgeOptions,SockJSBridgeOptions(SockJSBridgeOptions other),Copy constructor the options to copy
io.vertx.ext.web.handler.sockjs,SockJSBridgeOptions,addOutboundPermitted,SockJSBridgeOptions addOutboundPermitted(PermittedOptions permitted),
io.vertx.ext.web.handler.sockjs,SockJSBridgeOptions,addInboundPermitted,SockJSBridgeOptions addInboundPermitted(PermittedOptions permitted),
io.vertx.ext.web.handler.sockjs,SockJSHandler,create,"SockJSHandler create(Vertx vertx, SockJSHandlerOptions options)",Create a SockJS handler the Vert.x instance options to configure the handler the handler
io.vertx.ext.web.handler.sockjs,SockJSHandler,create,SockJSHandler create(Vertx vertx),Create a SockJS handler the Vert.x instance the handler
io.vertx.ext.web.handler.sockjs,SockJSHandler,bridge,"Router bridge(SockJSBridgeOptions bridgeOptions, Handler<BridgeEvent> bridgeEventHandler)",Like {@link io.vertx.ext.web.handler.sockjs.SockJSHandler#bridge(SockJSBridgeOptions)} but specifying a handler that will receive bridge events. options to configure the bridge with handler to receive bridge events a router to be mounted on an existing router
io.vertx.ext.web.handler.sockjs,SockJSHandler,bridge,Router bridge(SockJSBridgeOptions bridgeOptions),"Bridge the SockJS handler to the Vert.x event bus. This basically installs a built-in SockJS socket handler which takes SockJS traffic and bridges it to the event bus, thus allowing you to extend the server-side Vert.x event bus to browsers options to configure the bridge with a router to be mounted on an existing router"
io.vertx.ext.web.handler.sockjs,SockJSHandler,socketHandler,Router socketHandler(Handler<SockJSSocket> handler),Set a SockJS socket handler. This handler will be called with a SockJS socket whenever a SockJS connection is made from a client the handler a router to be mounted on an existing router
io.vertx.ext.web.handler.sockjs,BridgeEvent,setRawMessage,BridgeEvent setRawMessage(JsonObject message),"Get the raw JSON message for the event. This will be null for SOCKET_CREATED or SOCKET_CLOSED events as there is no message involved. the raw message this reference, so it can be used fluently"
io.vertx.ext.web.handler.sockjs,SockJSSocket,close,"void close(int statusCode, String reason)",Close it giving a status code and reason. Only Applicable to RawWebSocket will downgrade to plain close for other transports.
io.vertx.ext.web.handler.sockjs,SockJSSocket,write,"SockJSSocket write(Buffer data, Handler<AsyncResult<Void>> handler)",
io.vertx.ext.web.handler.sockjs,SockJSSocket,write,SockJSSocket write(String data),"Write a {@link String} to the socket, encoded in UTF-8. the string to write a reference to this, so the API can be used fluently"
io.vertx.ext.web.handler.sockjs,SockJSSocket,write,SockJSSocket write(Buffer data),
io.vertx.ext.web.handler.sockjs,SockJSSocket,handler,SockJSSocket handler(Handler<Buffer> handler),
io.vertx.ext.web.handler.sockjs,SockJSSocket,exceptionHandler,SockJSSocket exceptionHandler(Handler<Throwable> handler),
io.vertx.ext.web.handler.sockjs,SockJSSocket,endHandler,SockJSSocket endHandler(Handler<Void> endHandler),
io.vertx.ext.web.handler.sockjs,SockJSSocket,drainHandler,SockJSSocket drainHandler(Handler<Void> handler),
io.vertx.ext.web.handler.sockjs,SockJSHandlerOptions,addDisabledTransport,SockJSHandlerOptions addDisabledTransport(String subProtocol),
io.vertx.ext.web.impl,HeaderParser,convertToParsedHeaderValues,"List<T> convertToParsedHeaderValues(String unparsedHeaderValue, Function<String,T> objectCreator)",Transforms each header value into the given ParsableHeaderValue The header to split The type to instantiate for each header The list of (unparsed) parsable header value
io.vertx.ext.web.impl,ParsableHeaderValue,isMatchedBy,boolean isMatchedBy(ParsedHeaderValue matchTry),
io.vertx.ext.web.impl,ParsableHeaderValue,ParsableHeaderValue,ParsableHeaderValue(String headerContent),
io.vertx.ext.web.impl,ParsableMIMEValue,ParsableMIMEValue,ParsableMIMEValue(String headerContent),
io.vertx.ext.web.impl,Utils,parseRFC1123DateTime,long parseRFC1123DateTime(String header),
io.vertx.ext.web.impl,Utils,readFileToString,"String readFileToString(Vertx vertx, String resource)",
io.vertx.ext.web.impl,Utils,readResourceToBuffer,Buffer readResourceToBuffer(String resource),
io.vertx.ext.web.multipart,MultipartForm,attribute,"MultipartForm attribute(String name, String value)","Add an attribute form data part. the name of the attribute the value of the attribute a reference to this, so the API can be used fluently"
io.vertx.ext.web.multipart,MultipartForm,binaryFileUpload,"MultipartForm binaryFileUpload(String name, String filename, String pathname, String mediaType)","Add a binary file upload form data part. name of the parameter filename of the file the pathname of the file the MIME type of the file a reference to this, so the API can be used fluently"
io.vertx.ext.web.multipart,MultipartForm,textFileUpload,"MultipartForm textFileUpload(String name, String filename, Buffer content, String mediaType)","Add a text file upload form data part. name of the parameter filename of the file the content of the file the MIME type of the file a reference to this, so the API can be used fluently"
io.vertx.ext.web.multipart,MultipartForm,textFileUpload,"MultipartForm textFileUpload(String name, String filename, String pathname, String mediaType)","Add a text file upload form data part. name of the parameter filename of the file the pathname of the file the MIME type of the file a reference to this, so the API can be used fluently"
io.vertx.ext.web.sstore,SessionStore,get,"void get(String cookieValue, Handler<AsyncResult<Session>> resultHandler)","Get the session with the specified ID. the unique ID of the session will be called with a result holding the session, or a failure"
io.vertx.ext.web.sstore,SessionStore,put,"void put(Session session, Handler<AsyncResult<Void>> resultHandler)",Add a session with the specified ID. the session will be called with a success or a failure
io.vertx.ext.web.sstore,AbstractSession,get,T get(String key),
io.vertx.ext.web.sstore,AbstractSession,put,"Session put(String key, Object obj)",
io.vertx.ext.web.sstore,ClusteredSessionStore,create,"ClusteredSessionStore create(Vertx vertx, long retryTimeout)","Create a session store.<p/> The retry timeout value, configures how long the session handler will retry to get a session from the store when it is not found. the Vert.x instance the store retry timeout, in ms the session store"
io.vertx.ext.web.sstore,ClusteredSessionStore,create,ClusteredSessionStore create(Vertx vertx),Create a session store the Vert.x instance the session store
io.vertx.ext.web.sstore,LocalSessionStore,create,LocalSessionStore create(Vertx vertx),Create a session store the Vert.x instance the session store
io.vertx.ext.web.sstore.impl,SharedDataSessionImpl,readFromBuffer,"int readFromBuffer(int pos, Buffer buffer)",
io.vertx.ext.web.sstore.impl,SharedDataSessionImpl,writeToBuffer,void writeToBuffer(Buffer buff),
io.vertx.ext.web.sstore.impl,SharedDataSessionImpl,SharedDataSessionImpl,"SharedDataSessionImpl(PRNG random, long timeout, int length)",
io.vertx.ext.web.sstore.impl,SharedDataSessionImpl,SharedDataSessionImpl,SharedDataSessionImpl(PRNG random),
io.vertx.ext.web.templ,TemplateEngine,render,"void render(RoutingContext context, String templateFileName, Handler<AsyncResult<Buffer>> handler)","Render the template the routing context the template file name to use the handler that will be called with a result containing the buffer or a failure. use {@link #render(RoutingContext, String, String, Handler)}"
io.vertx.ext.web.templ.freemarker,FreeMarkerTemplateEngine,create,FreeMarkerTemplateEngine create(Vertx vertx),Create a template engine using defaults the engine
io.vertx.ext.web.templ.freemarker,FreeMarkerTemplateEngine,setExtension,FreeMarkerTemplateEngine setExtension(String extension),as a user you should use filename with extensions on the render method instead of relying on this method to suffix your filenames. Using this method is quite an opinionated API and has the side effect that you cannot use files without extensions as templates. Set the extension for the engine the extension a reference to this for fluency
io.vertx.ext.web.templ.handlebars,HandlebarsTemplateEngine,create,HandlebarsTemplateEngine create(Vertx vertx),Create a template engine using defaults the engine
io.vertx.ext.web.templ.handlebars,HandlebarsTemplateEngine,setExtension,HandlebarsTemplateEngine setExtension(String extension),as a user you should use filename with extensions on the render method instead of relying on this method to suffix your filenames. Using this method is quite an opinionated API and has the side effect that you cannot use files without extensions as templates. Set the extension for the engine the extension a reference to this for fluency
io.vertx.ext.web.templ.handlebars,HandlebarsTemplateEngine,setResolvers,HandlebarsTemplateEngine setResolvers(ValueResolver[] resolvers),Set the array of handlebars context value resolvers. the value resolvers to be used a reference to the internal Handlebars instance.
io.vertx.ext.web.templ.jade,JadeTemplateEngine,create,JadeTemplateEngine create(Vertx vertx),Create a template engine using defaults the engine
io.vertx.ext.web.templ.jade,JadeTemplateEngine,setExtension,JadeTemplateEngine setExtension(String extension),as a user you should use filename with extensions on the render method instead of relying on this method to suffix your filenames. Using this method is quite an opinionated API and has the side effect that you cannot use files without extensions as templates. Set the extension for the engine the extension a reference to this for fluency
io.vertx.ext.web.templ.mvel,MVELTemplateEngine,create,MVELTemplateEngine create(Vertx vertx),Create a template engine using defaults the engine
io.vertx.ext.web.templ.mvel,MVELTemplateEngine,setExtension,MVELTemplateEngine setExtension(String extension),as a user you should use filename with extensions on the render method instead of relying on this method to suffix your filenames. Using this method is quite an opinionated API and has the side effect that you cannot use files without extensions as templates. Set the extension for the engine the extension a reference to this for fluency
io.vertx.ext.web.templ.pebble,PebbleTemplateEngine,create,PebbleTemplateEngine create(PebbleEngine engine),"Create a template engine using a custom Builder, e.g. if you want use custom Filters or Functions. the engine"
io.vertx.ext.web.templ.pebble,PebbleTemplateEngine,create,PebbleTemplateEngine create(Vertx vertx),Create a template engine using defaults the engine
io.vertx.ext.web.templ.pebble,PebbleTemplateEngine,setExtension,PebbleTemplateEngine setExtension(String extension),as a user you should use filename with extensions on the render method instead of relying on this method to suffix your filenames. Using this method is quite an opinionated API and has the side effect that you cannot use files without extensions as templates. Set the extension for the engine the extension a reference to this for fluency
io.vertx.ext.web.templ.pebble.impl,PebbleVertxLoader,PebbleVertxLoader,PebbleVertxLoader(Vertx vertx),
io.vertx.ext.web.templ.rocker,RockerTemplateEngine,setExtension,RockerTemplateEngine setExtension(String extension),Set the extension for the engine the extension a reference to this for fluency
io.vertx.ext.web.templ.thymeleaf,ThymeleafTemplateEngine,create,ThymeleafTemplateEngine create(Vertx vertx),Create a template engine using defaults the engine
