import java
import semmle.code.java.dataflow.DataFlow
private import semmle.code.java.dataflow.ExternalFlow

predicate isGPTDetectedSource(DataFlow::Node src) {
    (
        src.asExpr().(Call).getCallee().getName() = "getValue" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.json", "JsonArray")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getValue" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.json", "JsonObject")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "values" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.util", "Map")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getMessage" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.lang", "Throwable")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getString" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.json", "JsonObject")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getParam" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpServerRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getValue" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "Cookie")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "path" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpServerRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getHeader" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpServerRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getHeader" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpServerRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "headers" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpServerRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "result" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core", "AsyncResult")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "params" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpServerRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "formAttributes" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpServerRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getFormAttribute" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpServerRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "get" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core", "MultiMap")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "host" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.net", "SocketAddress")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "uri" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpServerRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getPath" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.net", "URL")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "result" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core", "AsyncResult")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "host" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpServerRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getString" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.json", "JsonObject")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "name" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.netty.handler.codec.http.cookie", "Cookie")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "body" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.eventbus", "Message")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "headers" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.eventbus", "Message")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "names" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core", "MultiMap")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getAll" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core", "MultiMap")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getKey" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.util", "Entry")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "readValue" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("com.fasterxml.jackson.databind", "ObjectMapper")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "headers" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "WebSocketBase")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "uri" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "ServerWebSocket")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "body" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.eventbus", "Message")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "filename" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpServerFileUpload")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "query" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpServerRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "parameters" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.netty.handler.codec.http", "QueryStringDecoder")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getValue" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.util", "Entry")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "cookieMap" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpServerRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getValue" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.util", "Entry")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "readTree" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("com.fasterxml.jackson.databind", "ObjectMapper")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "toString" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("com.fasterxml.jackson.databind", "JsonNode")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "headers" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpClientResponse")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "readLine" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.io", "BufferedReader")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "headers" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpClientRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getHeader" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpClientResponse")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getHeader" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpClientResponse")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "textData" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "WebSocketFrame")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "closeReason" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "WebSocketFrame")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "entries" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core", "MultiMap")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "body" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.eventbus", "Message")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "get$ref" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.swagger.v3.oas.models.parameters", "Parameter")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "get$ref" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.swagger.v3.oas.models.parameters", "RequestBody")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getType" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.swagger.v3.oas.models.media", "Schema")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getFormat" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.swagger.v3.oas.models.media", "Schema")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getDefault" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.swagger.v3.oas.models.media", "Schema")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getPattern" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.swagger.v3.oas.models.media", "Schema")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getContentType" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.swagger.v3.oas.models.media", "Encoding")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getContent" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.swagger.v3.oas.models.responses", "ApiResponse")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "values" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.util", "Map")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "next" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.util", "Iterator")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "asText" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("com.fasterxml.jackson.databind", "JsonNode")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getPath" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("com.networknt.schema", "ValidationMessage")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "toString" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.lang", "Throwable")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getSystemId" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("org.xml.sax", "SAXParseException")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getPackageName" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.codegen.type", "ClassTypeInfo")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "toString" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.codegen.type", "TypeInfo")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getName" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.codegen", "MethodInfo")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getName" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.codegen", "ParamInfo")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getName" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.codegen.type", "TypeInfo")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getList" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.json", "JsonArray")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "path" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.netty.handler.codec.http.cookie", "Cookie")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "domain" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.netty.handler.codec.http.cookie", "Cookie")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "toString" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.net", "URI")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "trailers" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpClientResponse")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "cookies" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpClientResponse")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "result" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core", "Future")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "absoluteURI" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpClientRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "path" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpClientRequest")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getFile" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.net", "URL")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "value" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.netty.handler.codec.http.cookie", "Cookie")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getContext" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("graphql.schema", "DataFetchingEnvironment")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getSource" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("graphql.schema", "DataFetchingEnvironment")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getPropertyName" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("graphql.schema", "PropertyDataFetcher")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getArgument" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("graphql.schema", "DataFetchingEnvironment")
    )
    or
    (
        src.asExpr().(Call).getCallee().getName() = "getJsonObject" and
        src.asExpr().(Call).getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.json", "JsonArray")
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "route" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web", "Router") and
        ( p.getName() = "path" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "routeWithRegex" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web", "Router") and
        ( p.getName() = "regex" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "mountSubRouter" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web", "Router") and
        ( p.getName() = "mountPoint" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "getWithRegex" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web", "Router") and
        ( p.getName() = "regex" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "postWithRegex" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web", "Router") and
        ( p.getName() = "regex" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "putWithRegex" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web", "Router") and
        ( p.getName() = "regex" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "deleteWithRegex" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web", "Router") and
        ( p.getName() = "regex" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "headWithRegex" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web", "Router") and
        ( p.getName() = "regex" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "optionsWithRegex" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web", "Router") and
        ( p.getName() = "regex" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "addCookie" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web", "RoutingContext") and
        ( p.getName() = "cookie" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "reroute" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web", "RoutingContext") and
        ( p.getName() = "path" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "getBodyAsString" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web", "RoutingContext") and
        ( p.getName() = "encoding" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "put" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web", "RoutingContext") and
        ( p.getName() = "obj" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "setUser" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web", "RoutingContext") and
        ( p.getName() = "user" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "<init>" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web", "Http2PushMapping") and
        ( p.getName() = "filePath"  or  p.getName() = "extensionTarget" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "pathRegex" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web", "Route") and
        ( p.getName() = "path" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "put" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web", "Session") and
        ( p.getName() = "key" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "completedWithPlainText" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.api", "OperationResponse") and
        ( p.getName() = "text" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "completedWithJson" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.api", "OperationResponse") and
        ( p.getName() = "jsonObject" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "setStatusMessage" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.api", "OperationResponse") and
        ( p.getName() = "statusMessage" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "formParameter" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.api", "RequestParameters") and
        ( p.getName() = "name" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "cookieParameter" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.api", "RequestParameters") and
        ( p.getName() = "name" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "headerParameter" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.api", "RequestParameters") and
        ( p.getName() = "name" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "queryParameter" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.api", "RequestParameters") and
        ( p.getName() = "name" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "pathParameter" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.api", "RequestParameters") and
        ( p.getName() = "name" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "getObjectValue" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.api", "RequestParameter") and
        ( p.getName() = "key" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "get" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.client", "WebClient") and
        ( p.getName() = "requestURI" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "head" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.client", "WebClient") and
        ( p.getName() = "requestURI" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "put" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.client", "WebClient") and
        ( p.getName() = "requestURI" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "delete" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.client", "WebClient") and
        ( p.getName() = "requestURI" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "patch" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.client", "WebClient") and
        ( p.getName() = "requestURI" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "post" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.client", "WebClient") and
        ( p.getName() = "requestURI" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "raw" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.client", "WebClient") and
        ( p.getName() = "requestURI" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "request" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.client", "WebClient") and
        ( p.getName() = "host"  or  p.getName() = "port"  or  p.getName() = "requestURI" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "deleteAbs" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.client", "WebClient") and
        ( p.getName() = "absoluteURI" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "putAbs" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.client", "WebClient") and
        ( p.getName() = "absoluteURI" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "mountServiceInterface" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.api.contract.openapi3", "OpenAPI3RouterFactory") and
        ( p.getName() = "address" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "mountServiceFromTag" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.api.contract.openapi3", "OpenAPI3RouterFactory") and
        ( p.getName() = "address" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "mountOperationToEventBus" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.api.contract.openapi3", "OpenAPI3RouterFactory") and
        ( p.getName() = "address" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "requestAbs" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.client", "WebClient") and
        ( p.getName() = "absoluteURI" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "getAbs" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.client", "WebClient") and
        ( p.getName() = "absoluteURI" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "postAbs" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.client", "WebClient") and
        ( p.getName() = "absoluteURI" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "headAbs" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.client", "WebClient") and
        ( p.getName() = "absoluteURI" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "patchAbs" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.client", "WebClient") and
        ( p.getName() = "absoluteURI" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "WebClientOptions" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.client", "WebClientOptions") and
        ( p.getName() = "json" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "addHeader" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.client", "WebClientSession") and
        ( p.getName() = "name"  or  p.getName() = "value" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "RequestParameterImpl" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.api.impl", "RequestParameterImpl") and
        ( p.getName() = "value" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "isValid" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.api.validation", "ParameterTypeValidator") and
        ( p.getName() = "value" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "createXMLTypeValidator" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.api.validation.impl", "XMLTypeValidatorFactory") and
        ( p.getName() = "xmlSchema" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "setHeaderParameters" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.api.impl", "RequestParametersImpl") and
        ( p.getName() = "headerParameters" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "setQueryParameters" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.api.impl", "RequestParametersImpl") and
        ( p.getName() = "queryParameters" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "setPathParameters" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.api.impl", "RequestParametersImpl") and
        ( p.getName() = "pathParameters" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "put" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.client.impl", "CookieStoreImpl") and
        ( p.getName() = "cookie" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "StringTypeValidator" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.api.validation.impl", "StringTypeValidator") and
        ( p.getName() = "pattern"  or  p.getName() = "defaultValue" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "NumericTypeValidator" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.api.validation.impl", "NumericTypeValidator") and
        ( p.getName() = "defaultValue" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "SingleValueParameterTypeValidator" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.api.validation.impl", "SingleValueParameterTypeValidator") and
        ( p.getName() = "defaultValue" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "render" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.common.template", "TemplateEngine") and
        ( p.getName() = "context"  or  p.getName() = "templateFileName" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "create" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.handler", "CorsHandler") and
        ( p.getName() = "allowedOriginPattern" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "put" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.client.spi", "CookieStore") and
        ( p.getName() = "cookie" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "setPasswordParam" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.handler", "FormLoginHandler") and
        ( p.getName() = "passwordParam" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "setUsernameParam" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.handler", "FormLoginHandler") and
        ( p.getName() = "usernameParam" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "create" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.handler", "MultiTenantHandler") and
        ( p.getName() = "header" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "addTenantHandler" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.handler", "MultiTenantHandler") and
        ( p.getName() = "tenant" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "create" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.handler", "OAuth2AuthHandler") and
        ( p.getName() = "callbackURL" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "setIndexPage" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.handler", "StaticHandler") and
        ( p.getName() = "indexPage" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "create" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.handler", "TemplateHandler") and
        ( p.getName() = "templateDirectory" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "setIndexTemplate" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.handler", "TemplateHandler") and
        ( p.getName() = "indexTemplate" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "create" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.handler", "VirtualHostHandler") and
        ( p.getName() = "hostname" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "from" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.handler.graphql", "ApolloWSMessageType") and
        ( p.getName() = "type" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "locale" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.handler.graphql", "GraphQLHandler") and
        ( p.getName() = "factory" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "dataLoaderRegistry" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.handler.graphql", "GraphQLHandler") and
        ( p.getName() = "factory" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "queryContext" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.handler.graphql", "GraphQLHandler") and
        ( p.getName() = "factory" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "HttpStatusException" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.handler.impl", "HttpStatusException") and
        ( p.getName() = "payload" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "TemplateHandlerImpl" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.handler.impl", "TemplateHandlerImpl") and
        ( p.getName() = "templateDirectory"  or  p.getName() = "contentType" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "bridge" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.handler.sockjs", "SockJSHandler") and
        ( p.getName() = "bridgeOptions" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "write" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.handler.sockjs", "SockJSSocket") and
        ( p.getName() = "data" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "handler" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.handler.sockjs", "SockJSSocket") and
        ( p.getName() = "handler" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "convertToParsedHeaderValues" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.impl", "HeaderParser") and
        ( p.getName() = "unparsedHeaderValue" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "parseRFC1123DateTime" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.impl", "Utils") and
        ( p.getName() = "header" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "setRawMessage" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.handler.sockjs", "BridgeEvent") and
        ( p.getName() = "message" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "attribute" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.multipart", "MultipartForm") and
        ( p.getName() = "name"  or  p.getName() = "value" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "binaryFileUpload" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.multipart", "MultipartForm") and
        ( p.getName() = "filename"  or  p.getName() = "pathname" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "textFileUpload" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.multipart", "MultipartForm") and
        ( p.getName() = "filename"  or  p.getName() = "pathname" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "get" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.sstore", "SessionStore") and
        ( p.getName() = "cookieValue" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "render" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.templ", "TemplateEngine") and
        ( p.getName() = "templateFileName" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "get" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.sstore", "AbstractSession") and
        ( p.getName() = "key" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "put" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.sstore", "AbstractSession") and
        ( p.getName() = "key" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "setExtension" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.templ.jade", "JadeTemplateEngine") and
        ( p.getName() = "extension" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "setExtension" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.templ.mvel", "MVELTemplateEngine") and
        ( p.getName() = "extension" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "setExtension" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.templ.pebble", "PebbleTemplateEngine") and
        ( p.getName() = "extension" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "setExtension" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.templ.rocker", "RockerTemplateEngine") and
        ( p.getName() = "extension" )
    )
    or
    exists(Parameter p |
        src.asParameter() = p and
        p.getCallable().getName() = "setExtension" and
        p.getCallable().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.ext.web.templ.thymeleaf", "ThymeleafTemplateEngine") and
        ( p.getName() = "extension" )
    )
}


