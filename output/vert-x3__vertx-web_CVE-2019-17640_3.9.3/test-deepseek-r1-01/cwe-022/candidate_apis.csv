package,clazz,func,full_signature
freemarker.template,Configuration,Configuration,Configuration(Version p0)
freemarker.template,Configuration,setObjectWrapper,void setObjectWrapper(ObjectWrapper p0)
freemarker.template,Configuration,getIncompatibleImprovements,Version getIncompatibleImprovements()
freemarker.template,Configuration,setTemplateLoader,void setTemplateLoader(TemplateLoader p0)
freemarker.template,Configuration,setCacheStorage,void setCacheStorage(CacheStorage p0)
freemarker.cache,NullCacheStorage,NullCacheStorage,NullCacheStorage()
java.util.concurrent,ConcurrentHashMap,get,Template get(Object p0)
freemarker.template,Configuration,getTemplate,Template getTemplate(String p0)
java.io,ByteArrayOutputStream,ByteArrayOutputStream,ByteArrayOutputStream()
freemarker.template,Template,process,"void process(Object p0, Writer p1)"
java.io,OutputStreamWriter,OutputStreamWriter,OutputStreamWriter(OutputStream p0)
io.vertx.core,Handler,handle,void handle(AsyncResult<Buffer> p0)
io.vertx.core,Future,succeededFuture,Future<T> succeededFuture(T p0)
io.vertx.core.buffer,Buffer,buffer,Buffer buffer(byte[] p0)
java.io,ByteArrayOutputStream,toByteArray,byte[] toByteArray()
io.vertx.core,Future,failedFuture,Future<T> failedFuture(Throwable p0)
io.vertx.core.file,FileSystem,existsBlocking,boolean existsBlocking(String p0)
io.vertx.core,Vertx,fileSystem,FileSystem fileSystem()
io.vertx.core.buffer,Buffer,toString,String toString(Charset p0)
io.vertx.core.file,FileSystem,readFileBlocking,Buffer readFileBlocking(String p0)
java.nio.charset,Charset,defaultCharset,Charset defaultCharset()
java.lang,System,currentTimeMillis,long currentTimeMillis()
java.io,IOException,IOException,IOException(Throwable p0)
java.io,StringReader,StringReader,StringReader(String p0)
java.lang,IllegalArgumentException,IllegalArgumentException,IllegalArgumentException(String p0)
java.lang,String,equals,boolean equals(Object p0)
java.lang,String,hashCode,int hashCode()
freemarker.template,WrappingTemplateModel,WrappingTemplateModel,WrappingTemplateModel(ObjectWrapper p0)
io.vertx.core.json,JsonArray,size,int size()
freemarker.template,WrappingTemplateModel,wrap,TemplateModel wrap(Object p0)
io.vertx.core.json,JsonArray,getValue,Object getValue(int p0)
io.vertx.core.json,JsonObject,getValue,Object getValue(String p0)
io.vertx.core.json,JsonObject,isEmpty,boolean isEmpty()
io.vertx.core.json,JsonObject,size,int size()
freemarker.template,SimpleCollection,SimpleCollection,"SimpleCollection(Collection<> p0, ObjectWrapper p1)"
io.vertx.core.json,JsonObject,fieldNames,Set<String> fieldNames()
freemarker.template,WrappingTemplateModel,getObjectWrapper,ObjectWrapper getObjectWrapper()
java.util,Map,values,Collection<Object> values()
io.vertx.core.json,JsonObject,getMap,"Map<String,Object> getMap()"
freemarker.template,DefaultObjectWrapper,DefaultObjectWrapper,DefaultObjectWrapper(Version p0)
freemarker.template,DefaultObjectWrapper,handleUnknownType,TemplateModel handleUnknownType(Object p0)
io.vertx.core,Vertx,vertx,Vertx vertx(VertxOptions p0)
io.vertx.core,VertxOptions,setFileResolverCachingEnabled,VertxOptions setFileResolverCachingEnabled(boolean p0)
io.vertx.core,VertxOptions,VertxOptions,VertxOptions()
io.vertx.ext.unit,TestContext,async,Async async()
java.io,File,createTempFile,"File createTempFile(String p0, String p1, File p2)"
java.io,File,File,File(String p0)
java.lang,System,setProperty,"String setProperty(String p0, String p1)"
io.vertx.ext.unit,TestContext,assertFalse,"TestContext assertFalse(boolean p0, String p1)"
java.io,File,deleteOnExit,void deleteOnExit()
java.io,PrintWriter,PrintWriter,PrintWriter(File p0)
java.io,PrintWriter,print,void print(String p0)
java.io,PrintWriter,flush,void flush()
java.io,PrintWriter,close,void close()
io.vertx.core.json,JsonObject,JsonObject,JsonObject()
java.io,File,getName,String getName()
io.vertx.ext.unit,TestContext,assertTrue,TestContext assertTrue(boolean p0)
io.vertx.core,AsyncResult,succeeded,boolean succeeded()
io.vertx.ext.unit,TestContext,assertEquals,"TestContext assertEquals(Object p0, Object p1)"
io.vertx.core.buffer,Buffer,toString,String toString()
io.vertx.core,AsyncResult,result,Buffer result()
io.vertx.ext.unit,TestContext,fail,void fail(Throwable p0)
io.vertx.ext.unit,Async,complete,void complete()
io.vertx.ext.unit,Completion,await,void await()
io.vertx.core.json,JsonObject,put,"JsonObject put(String p0, String p1)"
io.vertx.core.json,JsonObject,put,"JsonObject put(String p0, JsonObject p1)"
io.vertx.core,AsyncResult,failed,boolean failed()
com.github.jknack.handlebars,Handlebars,Handlebars,Handlebars(TemplateLoader p0)
java.lang,String,lastIndexOf,int lastIndexOf(int p0)
com.github.jknack.handlebars,Builder,build,Context build()
com.github.jknack.handlebars,Builder,resolver,Builder resolver(ValueResolver[] p0)
com.github.jknack.handlebars,Context,newBuilder,Builder newBuilder(Object p0)
java.lang,String,substring,"String substring(int p0, int p1)"
java.lang,String,substring,String substring(int p0)
com.github.jknack.handlebars,Handlebars,compile,Template compile(String p0)
io.vertx.core.buffer,Buffer,buffer,Buffer buffer(String p0)
com.github.jknack.handlebars,Template,apply,String apply(Context p0)
java.lang,Integer,valueOf,Integer valueOf(String p0)
java.util,Collections,emptySet,Set<T> emptySet()
java.util,Map,entrySet,"Set<Entry<String,Object>> entrySet()"
java.io,File,getParent,String getParent()
io.vertx.core.json,JsonArray,JsonArray,JsonArray()
io.vertx.core.json,JsonArray,add,JsonArray add(JsonObject p0)
io.vertx.core.json,JsonArray,add,JsonArray add(String p0)
io.vertx.core.json,JsonObject,put,"JsonObject put(String p0, JsonArray p1)"
io.vertx.ext.unit,TestContext,assertFalse,TestContext assertFalse(boolean p0)
java.lang,String,contains,boolean contains(CharSequence p0)
java.lang,Throwable,getMessage,String getMessage()
io.vertx.core,AsyncResult,cause,Throwable cause()
de.neuland.jade4j,JadeConfiguration,JadeConfiguration,JadeConfiguration()
de.neuland.jade4j,JadeConfiguration,setTemplateLoader,void setTemplateLoader(TemplateLoader p0)
de.neuland.jade4j,JadeConfiguration,setCaching,void setCaching(boolean p0)
java.util.concurrent,ConcurrentHashMap,get,JadeTemplate get(Object p0)
de.neuland.jade4j,JadeConfiguration,getTemplate,JadeTemplate getTemplate(String p0)
de.neuland.jade4j,JadeConfiguration,renderTemplate,"String renderTemplate(JadeTemplate p0, Map<String,Object> p1)"
java.lang,String,endsWith,boolean endsWith(String p0)
java.lang,String,length,int length()
java.io,IOException,IOException,IOException(String p0)
java.util.concurrent,ConcurrentHashMap,get,CompiledTemplate get(Object p0)
io.vertx.core,Future,failedFuture,Future<T> failedFuture(String p0)
org.mvel2.templates,TemplateCompiler,compileTemplate,CompiledTemplate compileTemplate(String p0)
org.mvel2.templates,TemplateRuntime,execute,"Object execute(StringAppender p0, Object p1, VariableResolverFactory p2)"
org.mvel2.templates,TemplateRuntime,TemplateRuntime,"TemplateRuntime(char[] p0, TemplateRegistry p1, Node p2, String p3)"
org.mvel2.util,StringAppender,StringAppender,StringAppender()
org.mvel2.integration.impl,ImmutableDefaultFactory,ImmutableDefaultFactory,ImmutableDefaultFactory()
org.mvel2.templates,CompiledTemplate,getTemplate,char[] getTemplate()
org.mvel2.templates,CompiledTemplate,getRoot,Node getRoot()
com.mitchellbosecke.pebble,Builder,build,PebbleEngine build()
com.mitchellbosecke.pebble,Builder,cacheActive,Builder cacheActive(boolean p0)
com.mitchellbosecke.pebble,Builder,loader,Builder loader(Loader<?> p0)
com.mitchellbosecke.pebble,Builder,Builder,Builder()
java.util.concurrent,ConcurrentHashMap,get,PebbleTemplate get(Object p0)
java.util,Map,get,Object get(Object p0)
java.io,StringWriter,StringWriter,StringWriter()
com.mitchellbosecke.pebble,PebbleEngine,getTemplate,PebbleTemplate getTemplate(String p0)
com.mitchellbosecke.pebble.template,PebbleTemplate,evaluate,"void evaluate(Writer p0, Map<String,Object> p1, Locale p2)"
java.util,Locale,getDefault,Locale getDefault()
java.util,Locale,forLanguageTag,Locale forLanguageTag(String p0)
java.io,StringWriter,toString,String toString()
com.mitchellbosecke.pebble.error,LoaderException,LoaderException,"LoaderException(Throwable p0, String p1)"
java.nio.charset,Charset,forName,Charset forName(String p0)
java.io,File,File,"File(File p0, String p1)"
java.io,File,getParentFile,File getParentFile()
java.io,File,getPath,String getPath()
com.mitchellbosecke.pebble,Builder,extension,Builder extension(Extension[] p0)
java.util,Locale,setDefault,void setDefault(Locale p0)
com.mitchellbosecke.pebble.extension,AbstractExtension,AbstractExtension,AbstractExtension()
java.util,Collections,singletonMap,"Map<K,V> singletonMap(K p0, V p1)"
java.util,Collections,emptyList,List<T> emptyList()
com.fizzed.rocker,Rocker,template,BindableRockerModel template(String p0)
com.fizzed.rocker,BindableRockerModel,render,T render(RockerOutputFactory<T> p0)
java.util,Map,forEach,"void forEach(BiConsumer<? super String,? super Object> p0)"
java.lang,String,startsWith,boolean startsWith(String p0)
com.fizzed.rocker,BindableRockerModel,bind,"BindableRockerModel bind(String p0, Object p1)"
com.fizzed.rocker.runtime,AbstractRockerOutput,AbstractRockerOutput,"AbstractRockerOutput(ContentType p0, String p1, int p2)"
io.vertx.core.buffer,Buffer,buffer,Buffer buffer()
com.fizzed.rocker.runtime,AbstractRockerOutput,AbstractRockerOutput,"AbstractRockerOutput(ContentType p0, Charset p1, int p2)"
io.vertx.core.buffer,Buffer,appendBytes,Buffer appendBytes(byte[] p0)
java.lang,String,getBytes,byte[] getBytes(Charset p0)
io.vertx.core.json,JsonObject,put,"JsonObject put(String p0, Boolean p1)"
com.fizzed.rocker.runtime,DefaultRockerModel,DefaultRockerModel,DefaultRockerModel()
com.fizzed.rocker.runtime,PlainTextUnloadedClassLoader,tryLoad,"PlainTextUnloadedClassLoader tryLoad(ClassLoader p0, String p1, String p2)"
java.lang,Class,getClassLoader,ClassLoader getClassLoader()
java.lang,Class,getName,String getName()
com.fizzed.rocker.runtime,PlainTextUnloadedClassLoader,tryGet,byte[] tryGet(String p0)
com.fizzed.rocker.runtime,DefaultRockerTemplate,DefaultRockerTemplate,DefaultRockerTemplate(RockerModel p0)
com.fizzed.rocker.runtime,Internal,setCharset,void setCharset(String p0)
com.fizzed.rocker.runtime,Internal,setContentType,void setContentType(ContentType p0)
com.fizzed.rocker.runtime,Internal,setTemplateName,void setTemplateName(String p0)
com.fizzed.rocker.runtime,Internal,setTemplatePackageName,void setTemplatePackageName(String p0)
com.fizzed.rocker.runtime,Internal,aboutToExecutePosInTemplate,"void aboutToExecutePosInTemplate(int p0, int p1)"
com.fizzed.rocker.runtime,Internal,renderValue,"void renderValue(DefaultRockerModel p0, boolean p1)"
com.fizzed.rocker.runtime,Internal,writeValue,void writeValue(byte[] p0)
com.fizzed.rocker.runtime,Internal,renderValue,"void renderValue(String p0, boolean p1)"
io.vertx.core.json,JsonObject,getString,String getString(String p0)
org.thymeleaf,TemplateEngine,TemplateEngine,TemplateEngine()
org.thymeleaf.templateresolver,StringTemplateResolver,setCacheable,void setCacheable(boolean p0)
org.thymeleaf.templateresolver,StringTemplateResolver,setTemplateMode,void setTemplateMode(TemplateMode p0)
org.thymeleaf,TemplateEngine,setTemplateResolver,void setTemplateResolver(ITemplateResolver p0)
org.thymeleaf,TemplateEngine,process,"void process(String p0, IContext p1, Writer p2)"
java.io,Writer,Writer,Writer()
io.vertx.core.buffer,Buffer,appendString,Buffer appendString(String p0)
java.lang,String,String,"String(char[] p0, int p1, int p2)"
java.util,Map,containsKey,boolean containsKey(Object p0)
java.util,Map,keySet,Set<String> keySet()
org.thymeleaf.templateresolver,StringTemplateResolver,StringTemplateResolver,StringTemplateResolver()
org.thymeleaf.templateresolver,AbstractTemplateResolver,setName,void setName(String p0)
org.thymeleaf.templateresource,StringTemplateResource,StringTemplateResource,StringTemplateResource(String p0)
io.vertx.core,Vertx,createHttpServer,HttpServer createHttpServer()
io.vertx.core.http,HttpServer,requestHandler,HttpServer requestHandler(Handler<HttpServerRequest> p0)
io.vertx.core.http,HttpServerRequest,response,HttpServerResponse response()
io.vertx.core.http,HttpServerResponse,putHeader,"HttpServerResponse putHeader(String p0, String p1)"
io.vertx.core.http,HttpServerResponse,end,void end(String p0)
io.vertx.core.http,HttpServer,listen,HttpServer listen(int p0)
io.vertx.core.http,HttpServerRequest,getParam,String getParam(String p0)
io.vertx.core.http,HttpServerResponse,setChunked,HttpServerResponse setChunked(boolean p0)
io.vertx.core.http,HttpServerResponse,write,HttpServerResponse write(String p0)
io.vertx.core.http,HttpServerResponse,end,void end()
io.vertx.core,Vertx,setTimer,"long setTimer(long p0, Handler<Long> p1)"
io.vertx.core.http,HttpServerRequest,setExpectMultipart,HttpServerRequest setExpectMultipart(boolean p0)
java.lang,RuntimeException,RuntimeException,RuntimeException(String p0)
io.vertx.core.http,HttpServerResponse,setStatusCode,HttpServerResponse setStatusCode(int p0)
io.vertx.core.http,HttpServerRequest,pause,HttpServerRequest pause()
io.vertx.core.http,HttpServerRequest,resume,HttpServerRequest resume()
io.vertx.core.http,Cookie,getValue,String getValue()
io.vertx.core.http,Cookie,cookie,"Cookie cookie(String p0, String p1)"
io.vertx.core,Vertx,clusteredVertx,"void clusteredVertx(VertxOptions p0, Handler<AsyncResult<Vertx>> p1)"
io.vertx.core,VertxOptions,setClustered,VertxOptions setClustered(boolean p0)
io.vertx.core,AsyncResult,result,Vertx result()
io.vertx.core.http,HttpServerRequest,path,String path()
io.vertx.ext.bridge,PermittedOptions,setAddress,PermittedOptions setAddress(String p0)
io.vertx.ext.bridge,PermittedOptions,PermittedOptions,PermittedOptions()
io.vertx.ext.bridge,PermittedOptions,setMatch,PermittedOptions setMatch(JsonObject p0)
io.vertx.ext.bridge,PermittedOptions,setAddressRegex,PermittedOptions setAddressRegex(String p0)
io.vertx.ext.bridge,PermittedOptions,setRequiredAuthority,PermittedOptions setRequiredAuthority(String p0)
io.vertx.ext.bridge,BaseBridgeEvent,type,BridgeEventType type()
io.vertx.ext.bridge,BaseBridgeEvent,getRawMessage,JsonObject getRawMessage()
io.vertx.core,Promise,complete,void complete(Boolean p0)
io.vertx.ext.auth.jwt,JWTAuthOptions,setKeyStore,JWTAuthOptions setKeyStore(KeyStoreOptions p0)
io.vertx.ext.auth.jwt,JWTAuthOptions,JWTAuthOptions,JWTAuthOptions()
io.vertx.ext.auth,KeyStoreOptions,setPassword,KeyStoreOptions setPassword(String p0)
io.vertx.ext.auth,KeyStoreOptions,setPath,KeyStoreOptions setPath(String p0)
io.vertx.ext.auth,KeyStoreOptions,setType,KeyStoreOptions setType(String p0)
io.vertx.ext.auth,KeyStoreOptions,KeyStoreOptions,KeyStoreOptions()
io.vertx.ext.auth.jwt,JWTAuth,create,"JWTAuth create(Vertx p0, JWTAuthOptions p1)"
io.vertx.ext.auth.jwt,JWTAuth,generateToken,"String generateToken(JsonObject p0, JWTOptions p1)"
io.vertx.ext.jwt,JWTOptions,JWTOptions,JWTOptions()
io.vertx.ext.auth,User,principal,JsonObject principal()
io.vertx.ext.auth.oauth2.providers,GithubAuth,create,"OAuth2Auth create(Vertx p0, String p1, String p2)"
io.vertx.ext.auth.oauth2,OAuth2Auth,create,"OAuth2Auth create(Vertx p0, OAuth2FlowType p1, OAuth2ClientOptions p2)"
io.vertx.ext.auth.oauth2,OAuth2ClientOptions,setAuthorizationPath,OAuth2ClientOptions setAuthorizationPath(String p0)
io.vertx.ext.auth.oauth2,OAuth2ClientOptions,setTokenPath,OAuth2ClientOptions setTokenPath(String p0)
io.vertx.ext.auth.oauth2,OAuth2ClientOptions,setSite,OAuth2ClientOptions setSite(String p0)
io.vertx.ext.auth.oauth2,OAuth2ClientOptions,setClientSecret,OAuth2ClientOptions setClientSecret(String p0)
io.vertx.ext.auth.oauth2,OAuth2ClientOptions,setClientID,OAuth2ClientOptions setClientID(String p0)
io.vertx.ext.auth.oauth2,OAuth2ClientOptions,OAuth2ClientOptions,OAuth2ClientOptions()
io.vertx.core.http,HttpServerResponse,end,void end(Buffer p0)
io.vertx.core,AsyncResult,result,List<Book> result()
java.lang,UnsupportedOperationException,UnsupportedOperationException,UnsupportedOperationException()
io.vertx.ext.auth.oauth2,OAuth2Auth,create,"OAuth2Auth create(Vertx p0, OAuth2ClientOptions p1)"
io.vertx.ext.auth.oauth2,OAuth2ClientOptions,setFlow,OAuth2ClientOptions setFlow(OAuth2FlowType p0)
io.vertx.core.json,JsonObject,getBoolean,Boolean getBoolean(String p0)
java.util,Locale,getVariant,String getVariant()
java.util,Locale,getCountry,String getCountry()
java.util,Locale,getLanguage,String getLanguage()
io.vertx.core,Handler,handle,void handle(HttpServerRequest p0)
io.vertx.core.http,HttpServerRequest,method,HttpMethod method()
java.lang,Enum,Enum,"Enum(String p0, int p1)"
io.vertx.core.http,HttpServerRequest,getHeader,String getHeader(String p0)
java.util,HashSet,HashSet<String>,HashSet<String>()
java.util,Set,add,boolean add(String p0)
java.util,Set,addAll,boolean addAll(Collection<? extends String> p0)
java.util,Set,size,int size()
java.util.concurrent.atomic,AtomicInteger,AtomicInteger,AtomicInteger()
java.util.concurrent.atomic,AtomicBoolean,AtomicBoolean,AtomicBoolean()
io.vertx.core,AsyncResult,result,Boolean result()
java.util.concurrent.atomic,AtomicInteger,incrementAndGet,int incrementAndGet()
io.vertx.core,Handler,handle,void handle(AsyncResult<Void> p0)
io.vertx.core,Future,succeededFuture,Future<T> succeededFuture()
java.util.concurrent.atomic,AtomicBoolean,compareAndSet,"boolean compareAndSet(boolean p0, boolean p1)"
java.util.concurrent.atomic,AtomicBoolean,get,boolean get()
io.vertx.ext.auth,User,isAuthorized,"User isAuthorized(String p0, Handler<AsyncResult<Boolean>> p1)"
io.vertx.ext.auth,AuthProvider,authenticate,"void authenticate(JsonObject p0, Handler<AsyncResult<User>> p1)"
io.vertx.core,AsyncResult,result,JsonObject result()
io.vertx.core,AsyncResult,result,User result()
io.vertx.core.http,HttpServerResponse,putHeader,"HttpServerResponse putHeader(CharSequence p0, CharSequence p1)"
io.vertx.core.http,HttpServerRequest,getHeader,String getHeader(CharSequence p0)
java.lang,String,split,String[] split(String p0)
java.lang,String,equalsIgnoreCase,boolean equalsIgnoreCase(String p0)
io.vertx.core,MultiMap,get,String get(CharSequence p0)
io.vertx.core.http,HttpServerRequest,headers,MultiMap headers()
io.vertx.core,Handler,handle,void handle(AsyncResult<String> p0)
java.lang,String,indexOf,int indexOf(int p0)
io.vertx.ext.auth.impl,AuthProviderInternal,verifyIsUsingPassword,void verifyIsUsingPassword()
io.vertx.core,Handler,handle,void handle(AsyncResult<JsonObject> p0)
java.lang,String,String,String(byte[] p0)
java.util,Decoder,decode,byte[] decode(String p0)
java.util,Base64,getDecoder,Decoder getDecoder()
io.vertx.core,AsyncResult,result,String result()
java.lang,String,indexOf,int indexOf(String p0)
io.vertx.core.logging,LoggerFactory,getLogger,Logger getLogger(Class<?> p0)
io.vertx.core,MultiMap,contains,"boolean contains(CharSequence p0, CharSequence p1, boolean p2)"
io.vertx.core.http,HttpServerRequest,handler,HttpServerRequest handler(Handler<Buffer> p0)
io.vertx.core.http,HttpServerRequest,endHandler,HttpServerRequest endHandler(Handler<Void> p0)
io.vertx.core.http,HttpServerRequest,isExpectMultipart,boolean isExpectMultipart()
io.vertx.core,MultiMap,addAll,MultiMap addAll(MultiMap p0)
io.vertx.core.http,HttpServerRequest,params,MultiMap params()
io.vertx.core.http,HttpServerRequest,formAttributes,MultiMap formAttributes()
java.lang,String,isEmpty,boolean isEmpty()
java.lang,Long,parseLong,long parseLong(String p0)
java.util.concurrent.atomic,AtomicBoolean,AtomicBoolean,AtomicBoolean(boolean p0)
java.lang,String,toLowerCase,String toLowerCase()
io.netty.util,AsciiString,toString,String toString()
io.vertx.core.http,HttpServerRequest,uploadHandler,HttpServerRequest uploadHandler(Handler<HttpServerFileUpload> p0)
io.vertx.core.http,HttpServerFileUpload,isSizeAvailable,boolean isSizeAvailable()
io.vertx.core.http,HttpServerFileUpload,size,long size()
java.io,File,File,"File(String p0, String p1)"
java.util,UUID,toString,String toString()
java.util,UUID,randomUUID,UUID randomUUID()
io.vertx.core.http,HttpServerFileUpload,streamToFileSystem,HttpServerFileUpload streamToFileSystem(String p0)
java.util,Set,add,boolean add(FileUpload p0)
io.vertx.core.http,HttpServerFileUpload,exceptionHandler,HttpServerFileUpload exceptionHandler(Handler<Throwable> p0)
io.vertx.core.http,HttpServerFileUpload,endHandler,HttpServerFileUpload endHandler(Handler<Void> p0)
io.vertx.core.http,HttpServerRequest,exceptionHandler,HttpServerRequest exceptionHandler(Handler<Throwable> p0)
io.vertx.core.buffer,Buffer,buffer,Buffer buffer(int p0)
io.vertx.core.file,FileSystem,mkdirsBlocking,FileSystem mkdirsBlocking(String p0)
io.vertx.core.buffer,Buffer,length,int length()
io.vertx.core,Vertx,runOnContext,void runOnContext(Handler<Void> p0)
io.vertx.core.buffer,Buffer,appendBuffer,Buffer appendBuffer(Buffer p0)
java.util.concurrent.atomic,AtomicInteger,decrementAndGet,int decrementAndGet()
java.util.concurrent.atomic,AtomicInteger,get,int get()
io.vertx.core.file,FileSystem,exists,"FileSystem exists(String p0, Handler<AsyncResult<Boolean>> p1)"
io.vertx.core.logging,Logger,warn,"void warn(Object p0, Throwable p1)"
io.vertx.core.file,FileSystem,delete,"FileSystem delete(String p0, Handler<AsyncResult<Void>> p1)"
java.security,SecureRandom,SecureRandom,SecureRandom()
java.util,Base64,getMimeEncoder,Encoder getMimeEncoder()
javax.crypto,Mac,getInstance,Mac getInstance(String p0)
javax.crypto,Mac,init,void init(Key p0)
javax.crypto.spec,SecretKeySpec,SecretKeySpec,"SecretKeySpec(byte[] p0, String p1)"
java.lang,String,getBytes,byte[] getBytes()
java.lang,RuntimeException,RuntimeException,RuntimeException(Throwable p0)
java.lang,Long,toString,String toString(long p0)
java.util,Encoder,encodeToString,String encodeToString(byte[] p0)
javax.crypto,Mac,doFinal,byte[] doFinal(byte[] p0)
java.util,Random,nextBytes,void nextBytes(byte[] p0)
io.vertx.core.http,HttpServerRequest,absoluteURI,String absoluteURI()
io.vertx.core.logging,Logger,warn,void warn(Object p0)
io.vertx.core.http,HttpServerRequest,getFormAttribute,String getFormAttribute(String p0)
java.util,ArrayList,ArrayList<AuthHandler>,ArrayList<AuthHandler>()
java.util,LinkedHashSet,LinkedHashSet<HttpMethod>,LinkedHashSet<HttpMethod>()
java.util,LinkedHashSet,LinkedHashSet<String>,LinkedHashSet<String>()
java.util,Objects,requireNonNull,T requireNonNull(T p0)
java.util.regex,Pattern,compile,Pattern compile(String p0)
java.util,Set,add,boolean add(HttpMethod p0)
java.util,Set,addAll,boolean addAll(Collection<? extends HttpMethod> p0)
java.lang,IllegalStateException,IllegalStateException,IllegalStateException(String p0)
java.lang,String,valueOf,String valueOf(int p0)
io.vertx.core.http,HttpServerResponse,setStatusMessage,HttpServerResponse setStatusMessage(String p0)
java.util.regex,Matcher,matches,boolean matches()
java.util.regex,Pattern,matcher,Matcher matcher(CharSequence p0)
java.lang,StringBuilder,StringBuilder,StringBuilder()
java.util,Collection,isEmpty,boolean isEmpty()
java.lang,StringBuilder,append,StringBuilder append(char p0)
java.lang,StringBuilder,append,StringBuilder append(Object p0)
java.lang,StringBuilder,toString,String toString()
java.util,HashMap,"HashMap<String,Nonce>","HashMap<String,Nonce>()"
java.security,MessageDigest,getInstance,MessageDigest getInstance(String p0)
java.lang,String,toCharArray,char[] toCharArray()
io.vertx.ext.auth.htdigest,HtdigestAuth,realm,String realm()
java.util,Collection,removeIf,"boolean removeIf(Predicate<? super Entry<String,Nonce>> p0)"
java.util,Map,entrySet,"Set<Entry<String,Nonce>> entrySet()"
java.util,Entry,getValue,Nonce getValue()
java.util.regex,Pattern,split,String[] split(CharSequence p0)
java.util.regex,Matcher,find,boolean find()
java.util.regex,Matcher,group,String group(int p0)
io.vertx.core.json,JsonObject,containsKey,boolean containsKey(String p0)
java.lang,Integer,parseInt,int parseInt(String p0)
java.util,Map,get,Nonce get(Object p0)
java.lang,Enum,name,String name()
java.security,SecureRandom,nextBytes,void nextBytes(byte[] p0)
java.util,Map,put,"Nonce put(String p0, Nonce p1)"
java.lang,String,String,String(char[] p0)
java.security,MessageDigest,reset,void reset()
java.security,MessageDigest,digest,byte[] digest(byte[] p0)
io.vertx.core.http,HttpServerResponse,getStatusMessage,String getStatusMessage()
java.lang,String,replaceAll,"String replaceAll(String p0, String p1)"
io.vertx.core.http,HttpServerResponse,headers,MultiMap headers()
java.lang,Throwable,getStackTrace,StackTraceElement[] getStackTrace()
java.lang,StringBuilder,append,StringBuilder append(String p0)
java.lang,String,replace,"String replace(CharSequence p0, CharSequence p1)"
java.lang,Integer,toString,String toString(int p0)
io.vertx.core.json,JsonObject,put,"JsonObject put(String p0, Integer p1)"
java.lang,StackTraceElement,toString,String toString()
io.vertx.core.json,JsonObject,encode,String encode()
java.lang,StringBuilder,append,StringBuilder append(int p0)
io.vertx.core.http,CaseInsensitiveHeaders,CaseInsensitiveHeaders,CaseInsensitiveHeaders()
io.vertx.core,MultiMap,add,"MultiMap add(CharSequence p0, CharSequence p1)"
io.vertx.core.logging,Logger,error,void error(Object p0)
io.vertx.core,MultiMap,get,String get(String p0)
java.lang,RuntimeException,RuntimeException,"RuntimeException(String p0, Throwable p1, boolean p2, boolean p3)"
io.netty.handler.codec.http,HttpResponseStatus,reasonPhrase,String reasonPhrase()
io.netty.handler.codec.http,HttpResponseStatus,valueOf,HttpResponseStatus valueOf(int p0)
io.vertx.core.json,JsonArray,JsonArray,JsonArray(List<> p0)
io.vertx.core.net,SocketAddress,host,String host()
io.vertx.core.http,HttpServerResponse,getStatusCode,int getStatusCode()
io.vertx.core.http,HttpServerResponse,bytesWritten,long bytesWritten()
io.vertx.core,MultiMap,contains,boolean contains(String p0)
java.lang,String,format,"String format(String p0, Object[] p1)"
io.vertx.core.logging,Logger,info,void info(Object p0)
io.vertx.core.http,HttpServerRequest,remoteAddress,SocketAddress remoteAddress()
io.vertx.core.http,HttpServerRequest,uri,String uri()
io.vertx.core.http,HttpServerRequest,version,HttpVersion version()
java.util.concurrent,ConcurrentHashMap,"ConcurrentHashMap<String,Handler<RoutingContext>>","ConcurrentHashMap<String,Handler<RoutingContext>>()"
java.util,Map,put,"Handler<RoutingContext> put(String p0, Handler<RoutingContext> p1)"
java.util,Map,remove,Handler<RoutingContext> remove(Object p0)
java.util.function,Function,apply,String apply(RoutingContext p0)
java.util,Map,getOrDefault,"Handler<RoutingContext> getOrDefault(Object p0, Handler<RoutingContext> p1)"
io.vertx.core,Handler,handle,void handle(RoutingContext p0)
io.vertx.ext.auth.oauth2,OAuth2Auth,getFlowType,OAuth2FlowType getFlowType()
java.net,URL,URL,URL(String p0)
java.net,URL,getHost,String getHost()
java.net,URL,getProtocol,String getProtocol()
java.net,URL,getPort,int getPort()
java.net,URL,getPath,String getPath()
io.vertx.core.logging,Logger,isWarnEnabled,boolean isWarnEnabled()
io.vertx.ext.auth.oauth2,OAuth2Auth,decodeToken,"OAuth2Auth decodeToken(String p0, Handler<AsyncResult<AccessToken>> p1)"
io.vertx.core,AsyncResult,result,AccessToken result()
io.vertx.core.json,JsonObject,mergeIn,JsonObject mergeIn(JsonObject p0)
io.vertx.ext.auth.oauth2,OAuth2Auth,authorizeURL,String authorizeURL(JsonObject p0)
io.vertx.core,MultiMap,contains,boolean contains(CharSequence p0)
io.vertx.core.http,HttpHeaders,createOptimized,CharSequence createOptimized(String p0)
java.lang,System,nanoTime,long nanoTime()
java.util.concurrent,TimeUnit,convert,"long convert(long p0, TimeUnit p1)"
io.vertx.core.http,Cookie,setHttpOnly,Cookie setHttpOnly(boolean p0)
io.vertx.core.http,Cookie,setSecure,Cookie setSecure(boolean p0)
io.vertx.core.http,Cookie,setPath,Cookie setPath(String p0)
io.vertx.core.http,Cookie,setValue,Cookie setValue(String p0)
io.vertx.core.logging,Logger,isDebugEnabled,boolean isDebugEnabled()
io.vertx.core.logging,Logger,debug,void debug(Object p0)
io.vertx.core,AsyncResult,result,Session result()
io.vertx.core,Handler,handle,void handle(AsyncResult<Session> p0)
io.vertx.core.http,Cookie,setSameSite,Cookie setSameSite(CookieSameSite p0)
java.nio.charset,Charset,name,String name()
io.vertx.core.file,FileProps,lastModifiedTime,long lastModifiedTime()
io.vertx.core,MultiMap,set,"MultiMap set(String p0, String p1)"
io.vertx.core.logging,Logger,isTraceEnabled,boolean isTraceEnabled()
io.vertx.core.logging,Logger,trace,void trace(Object p0)
io.vertx.core.http.impl,HttpUtils,removeDots,String removeDots(CharSequence p0)
io.vertx.core.net.impl,URIDecoder,decodeURIComponent,"String decodeURIComponent(String p0, boolean p1)"
java.lang,String,charAt,char charAt(int p0)
io.netty.handler.codec.http,HttpResponseStatus,code,int code()
io.vertx.core,AsyncResult,result,FileProps result()
io.vertx.core.file,FileProps,isDirectory,boolean isDirectory()
java.util.concurrent,Callable,call,T call()
java.lang,Thread,getContextClassLoader,ClassLoader getContextClassLoader()
java.lang,Thread,currentThread,Thread currentThread()
java.lang,Thread,setContextClassLoader,void setContextClassLoader(ClassLoader p0)
io.vertx.core.file,FileSystem,props,"FileSystem props(String p0, Handler<AsyncResult<FileProps>> p1)"
io.vertx.core.file,FileSystem,propsBlocking,FileProps propsBlocking(String p0)
io.vertx.core,Handler,handle,void handle(AsyncResult<FileProps> p0)
java.lang,Throwable,getCause,Throwable getCause()
io.vertx.core.file,FileProps,size,long size()
java.lang,IndexOutOfBoundsException,IndexOutOfBoundsException,IndexOutOfBoundsException()
io.vertx.core.http.impl,MimeMapping,getMimeTypeForFilename,String getMimeTypeForFilename(String p0)
io.vertx.core.http,HttpServerResponse,sendFile,"HttpServerResponse sendFile(String p0, long p1, long p2, Handler<AsyncResult<Void>> p3)"
io.vertx.core.http.impl,MimeMapping,getMimeTypeForExtension,String getMimeTypeForExtension(String p0)
java.util,Set,contains,boolean contains(Object p0)
io.vertx.core.http,HttpServerResponse,push,"HttpServerResponse push(HttpMethod p0, String p1, Handler<AsyncResult<HttpServerResponse>> p2)"
io.vertx.core,AsyncResult,result,HttpServerResponse result()
io.vertx.core.http,HttpServerResponse,sendFile,HttpServerResponse sendFile(String p0)
java.util,ArrayList,ArrayList<String>,ArrayList<String>()
io.vertx.core.http,HttpServerResponse,putHeader,"HttpServerResponse putHeader(String p0, Iterable<String> p1)"
io.vertx.core.http,HttpServerResponse,sendFile,"HttpServerResponse sendFile(String p0, Handler<AsyncResult<Void>> p1)"
java.util,ArrayList,ArrayList<Http2PushMapping>,ArrayList<Http2PushMapping>(Collection<? extends Http2PushMapping> p0)
java.util,HashSet,HashSet<String>,HashSet<String>(Collection<? extends String> p0)
java.io,File,listRoots,File[] listRoots()
java.io,File,getAbsolutePath,String getAbsolutePath()
io.vertx.core.file,FileSystem,readDir,"FileSystem readDir(String p0, Handler<AsyncResult<List<String>>> p1)"
java.lang,StringBuilder,StringBuilder,StringBuilder(String p0)
io.vertx.core,AsyncResult,result,List<String> result()
java.util,Collections,sort,void sort(List<T> p0)
io.vertx.core.json,JsonArray,encode,String encode()
java.util,Map,clear,void clear()
java.util,Map,remove,CacheEntry remove(Object p0)
java.util,Map,get,CacheEntry get(Object p0)
java.util,Map,put,"CacheEntry put(String p0, CacheEntry p1)"
java.util,Map,put,"Object put(String p0, Object p1)"
io.vertx.core.json,JsonObject,JsonObject,"JsonObject(Map<String,Object> p0)"
io.vertx.core,Vertx,cancelTimer,boolean cancelTimer(long p0)
io.vertx.core.buffer,Buffer,appendByte,Buffer appendByte(byte p0)
io.vertx.core.buffer,Buffer,appendInt,Buffer appendInt(int p0)
io.vertx.core.shareddata.impl,ClusterSerializable,writeToBuffer,void writeToBuffer(Buffer p0)
io.vertx.core.buffer,Buffer,getByte,byte getByte(int p0)
io.vertx.core.buffer,Buffer,getInt,int getInt(int p0)
io.vertx.core.buffer,Buffer,getBytes,"byte[] getBytes(int p0, int p1)"
java.lang,String,String,"String(byte[] p0, Charset p1)"
java.lang,ClassLoader,loadClass,Class<?> loadClass(String p0)
java.lang.reflect,Constructor,newInstance,Object newInstance(Object[] p0)
java.lang,Class,getDeclaredConstructor,Constructor<?> getDeclaredConstructor(Class<?>[] p0)
java.lang,Class,isAssignableFrom,boolean isAssignableFrom(Class<?> p0)
java.lang,ClassCastException,ClassCastException,ClassCastException(String p0)
io.vertx.core.shareddata.impl,ClusterSerializable,readFromBuffer,"int readFromBuffer(int p0, Buffer p1)"
io.vertx.core,VertxException,VertxException,VertxException(Throwable p0)
io.vertx.ext.auth,User,setAuthProvider,void setAuthProvider(AuthProvider p0)
java.util.regex,Pattern,compile,"Pattern compile(String p0, int p1)"
io.vertx.core.http,HttpServerRequest,host,String host()
io.vertx.ext.bridge,PermittedOptions,PermittedOptions,PermittedOptions(PermittedOptions p0)
io.vertx.ext.bridge,PermittedOptions,PermittedOptions,PermittedOptions(JsonObject p0)
java.util,ArrayList,ArrayList<PermittedOptions>,ArrayList<PermittedOptions>()
java.util,ArrayList,ArrayList<PermittedOptions>,ArrayList<PermittedOptions>(Collection<? extends PermittedOptions> p0)
io.vertx.core.json,JsonObject,getJsonArray,JsonArray getJsonArray(String p0)
io.vertx.core.json,JsonObject,getInteger,"Integer getInteger(String p0, Integer p1)"
io.vertx.core.json,JsonObject,getLong,"Long getLong(String p0, Long p1)"
java.lang,UnsupportedOperationException,UnsupportedOperationException,UnsupportedOperationException(String p0)
io.vertx.core.json,JsonObject,getBoolean,"Boolean getBoolean(String p0, Boolean p1)"
io.vertx.core.json,JsonObject,getString,"String getString(String p0, String p1)"
io.vertx.core.shareddata,LocalMap,computeIfAbsent,"SockJSSession computeIfAbsent(String p0, Function<? super String,? extends SockJSSession> p1)"
io.vertx.core.impl,StringEscapeUtils,escapeJavaScript,String escapeJavaScript(String p0)
io.vertx.core.logging,Logger,error,"void error(Object p0, Throwable p1)"
io.vertx.core.http,HttpServerResponse,closeHandler,HttpServerResponse closeHandler(Handler<Void> p0)
java.lang,Enum,toString,String toString()
io.vertx.core.json,JsonObject,put,"JsonObject put(String p0, Long p1)"
java.util,Random,nextInt,int nextInt()
java.util,Random,Random,Random()
java.text,DateFormat,format,String format(Date p0)
java.text,SimpleDateFormat,SimpleDateFormat,SimpleDateFormat(String p0)
java.util,Date,Date,Date(long p0)
java.lang,String,valueOf,String valueOf(long p0)
io.netty.handler.codec.http.cookie,ServerCookieDecoder,decode,Set<Cookie> decode(String p0)
io.vertx.core,MultiMap,remove,MultiMap remove(CharSequence p0)
io.netty.handler.codec.http.cookie,Cookie,name,String name()
io.netty.handler.codec.http.cookie,ServerCookieEncoder,encode,String encode(Cookie p0)
io.vertx.core,Promise,promise,Promise<T> promise()
io.vertx.core,Promise,future,Future<Boolean> future()
io.vertx.core.json,JsonObject,clear,JsonObject clear()
io.vertx.core,Promise,handle,void handle(AsyncResult<Boolean> p0)
io.vertx.core,Promise,complete,void complete()
io.vertx.core,Promise,fail,void fail(Throwable p0)
io.vertx.core,Promise,fail,void fail(String p0)
io.vertx.core,Promise,tryComplete,boolean tryComplete(Boolean p0)
io.vertx.core,Promise,tryComplete,boolean tryComplete()
io.vertx.core,Promise,tryFail,boolean tryFail(Throwable p0)
io.vertx.core,Promise,tryFail,boolean tryFail(String p0)
java.util,HashMap,"HashMap<SockJSSocket,SockInfo>","HashMap<SockJSSocket,SockInfo>()"
java.util,HashMap,"HashMap<String,Message<>>","HashMap<String,Message<>>()"
java.util,HashMap,"HashMap<String,Pattern>","HashMap<String,Pattern>()"
io.vertx.core,Vertx,eventBus,EventBus eventBus()
java.util,Map,remove,SockInfo remove(Object p0)
java.util,Map,forEach,"void forEach(BiConsumer<? super String,? super MessageConsumer<>> p0)"
io.vertx.core.eventbus,MessageConsumer,unregister,void unregister()
io.vertx.core.eventbus,MessageConsumer,address,String address()
io.vertx.core.json,JsonObject,JsonObject,JsonObject(String p0)
java.lang,Runnable,run,void run()
java.util.function,Supplier,get,BridgeEventImpl get()
io.vertx.core,Handler,handle,void handle(BridgeEvent p0)
io.vertx.core,Future,onComplete,Future<Boolean> onComplete(Handler<AsyncResult<Boolean>> p0)
java.util,Map,get,SockInfo get(Object p0)
io.vertx.core.eventbus,Message,body,Object body()
io.vertx.core.eventbus,MessageConsumer,handler,MessageConsumer<Object> handler(Handler<Message<Object>> p0)
io.vertx.core.eventbus,EventBus,consumer,MessageConsumer<T> consumer(String p0)
java.util,Map,put,"MessageConsumer<> put(String p0, MessageConsumer<> p1)"
java.util,Map,remove,MessageConsumer<> remove(Object p0)
java.util,HashMap,"HashMap<String,MessageConsumer<>>","HashMap<String,MessageConsumer<>>()"
io.vertx.core,Vertx,setPeriodic,"long setPeriodic(long p0, Handler<Long> p1)"
java.util,Map,put,"SockInfo put(SockJSSocket p0, SockInfo p1)"
io.vertx.core.eventbus,Message,replyAddress,String replyAddress()
java.util,Map,put,"Message<> put(String p0, Message<> p1)"
java.util,Map,remove,Message<> remove(Object p0)
io.vertx.core.json,JsonObject,put,"JsonObject put(String p0, Object p1)"
io.vertx.core.eventbus,Message,headers,MultiMap headers()
io.vertx.core,MultiMap,isEmpty,boolean isEmpty()
io.vertx.core,MultiMap,names,Set<String> names()
io.vertx.core,MultiMap,getAll,List<String> getAll(String p0)
io.vertx.core.json,JsonObject,getJsonObject,JsonObject getJsonObject(String p0)
io.vertx.core,AsyncResult,result,Message<Object> result()
io.vertx.core.eventbus,ReplyException,failureCode,int failureCode()
io.vertx.core.eventbus,ReplyException,failureType,ReplyFailure failureType()
java.lang,Iterable,forEach,"void forEach(Consumer<? super Entry<String,Object>> p0)"
io.vertx.core,MultiMap,add,"MultiMap add(String p0, String p1)"
java.util,Entry,getKey,String getKey()
java.util,Entry,getValue,Object getValue()
io.vertx.core.eventbus,Message,replyAndRequest,"void replyAndRequest(Object p0, DeliveryOptions p1, Handler<> p2)"
io.vertx.core.eventbus,DeliveryOptions,setHeaders,DeliveryOptions setHeaders(MultiMap p0)
io.vertx.core.eventbus,DeliveryOptions,setSendTimeout,DeliveryOptions setSendTimeout(long p0)
io.vertx.core.eventbus,DeliveryOptions,DeliveryOptions,DeliveryOptions()
io.vertx.core.eventbus,Message,reply,"void reply(Object p0, DeliveryOptions p1)"
io.vertx.core.eventbus,EventBus,request,"EventBus request(String p0, Object p1, DeliveryOptions p2, Handler<AsyncResult<Message<T>>> p3)"
io.vertx.core.eventbus,EventBus,send,"EventBus send(String p0, Object p1, DeliveryOptions p2)"
io.vertx.core.eventbus,EventBus,publish,"EventBus publish(String p0, Object p1, DeliveryOptions p2)"
io.vertx.core,Handler,handle,void handle(AsyncResult<Boolean> p0)
io.vertx.ext.bridge,PermittedOptions,getAddress,String getAddress()
io.vertx.ext.bridge,PermittedOptions,getAddressRegex,String getAddressRegex()
io.vertx.ext.bridge,PermittedOptions,getMatch,JsonObject getMatch()
io.vertx.ext.bridge,PermittedOptions,getRequiredAuthority,String getRequiredAuthority()
java.util,Map,computeIfAbsent,"Pattern computeIfAbsent(String p0, Function<? super String,? extends Pattern> p1)"
io.vertx.core.http,HttpServerResponse,write,"HttpServerResponse write(Buffer p0, Handler<AsyncResult<Void>> p1)"
io.vertx.core.http,HttpServerResponse,close,void close()
com.fasterxml.jackson.databind.module,SimpleModule,SimpleModule,SimpleModule()
com.fasterxml.jackson.databind,ObjectMapper,ObjectMapper,ObjectMapper()
com.fasterxml.jackson.databind.module,SimpleModule,addSerializer,"SimpleModule addSerializer(Class<? extends T> p0, JsonSerializer<T> p1)"
com.fasterxml.jackson.core.io,CharTypes,get7BitOutputEscapes,int[] get7BitOutputEscapes()
com.fasterxml.jackson.databind,JsonSerializer,JsonSerializer,JsonSerializer()
com.fasterxml.jackson.core,JsonGenerator,writeRaw,void writeRaw(char p0)
com.fasterxml.jackson.core.json,JsonWriteContext,writeValue,int writeValue()
com.fasterxml.jackson.core,JsonGenerator,getOutputContext,JsonStreamContext getOutputContext()
com.fasterxml.jackson.core,JsonGenerationException,JsonGenerationException,"JsonGenerationException(String p0, JsonGenerator p1)"
com.fasterxml.jackson.databind,ObjectMapper,registerModule,ObjectMapper registerModule(Module p0)
com.fasterxml.jackson.databind,ObjectMapper,writeValueAsString,String writeValueAsString(Object p0)
io.vertx.core.json,EncodeException,EncodeException,EncodeException(String p0)
com.fasterxml.jackson.databind,ObjectMapper,readValue,"T readValue(String p0, Class<T> p1)"
io.vertx.core.json,DecodeException,DecodeException,DecodeException(String p0)
io.vertx.core.shareddata,LocalMap,get,SockJSSession get(Object p0)
io.vertx.core.http,HttpServerRequest,bodyHandler,HttpServerRequest bodyHandler(Handler<Buffer> p0)
io.vertx.core.http,HttpServerResponse,write,"HttpServerResponse write(String p0, Handler<AsyncResult<Void>> p1)"
io.vertx.core.http,ServerWebSocket,closeHandler,ServerWebSocket closeHandler(Handler<Void> p0)
io.vertx.core.http,WebSocketBase,binaryMessageHandler,WebSocketBase binaryMessageHandler(Handler<Buffer> p0)
io.vertx.core.http,WebSocketBase,textMessageHandler,WebSocketBase textMessageHandler(Handler<String> p0)
io.vertx.core,Handler,handle,void handle(Buffer p0)
io.vertx.core.http,ServerWebSocket,pause,ServerWebSocket pause()
io.vertx.core.http,ServerWebSocket,resume,ServerWebSocket resume()
io.vertx.core.http,ServerWebSocket,fetch,ServerWebSocket fetch(long p0)
io.vertx.core.http,ServerWebSocket,writeBinaryMessage,"ServerWebSocket writeBinaryMessage(Buffer p0, Handler<AsyncResult<Void>> p1)"
io.vertx.core.http,ServerWebSocket,writeTextMessage,"ServerWebSocket writeTextMessage(String p0, Handler<AsyncResult<Void>> p1)"
io.vertx.core.http,ServerWebSocket,setWriteQueueMaxSize,ServerWebSocket setWriteQueueMaxSize(int p0)
io.vertx.core.streams,WriteStream,writeQueueFull,boolean writeQueueFull()
io.vertx.core.http,ServerWebSocket,drainHandler,ServerWebSocket drainHandler(Handler<Void> p0)
io.vertx.core.http,ServerWebSocket,exceptionHandler,ServerWebSocket exceptionHandler(Handler<Throwable> p0)
io.vertx.core.http,ServerWebSocket,endHandler,ServerWebSocket endHandler(Handler<Void> p0)
io.vertx.core.http,ServerWebSocket,close,void close()
io.vertx.core.http,WebSocketBase,close,"void close(short p0, String p1)"
io.vertx.core.http,WebSocketBase,remoteAddress,SocketAddress remoteAddress()
io.vertx.core.http,WebSocketBase,localAddress,SocketAddress localAddress()
io.vertx.core.http,WebSocketBase,headers,MultiMap headers()
io.vertx.core.http,ServerWebSocket,uri,String uri()
io.vertx.core.http,HttpServerRequest,upgrade,ServerWebSocket upgrade()
io.vertx.core,Handler,handle,void handle(SockJSSocket p0)
io.vertx.core.shareddata,SharedData,getLocalMap,"LocalMap<K,V> getLocalMap(String p0)"
io.vertx.core,Vertx,sharedData,SharedData sharedData()
java.util,Set,removeAll,boolean removeAll(Collection<?> p0)
java.util,Iterator,hasNext,boolean hasNext()
java.util,Iterator,next,TimeoutInfo next()
io.vertx.core.http,HttpServerResponse,write,HttpServerResponse write(Buffer p0)
java.util,ArrayList,ArrayList<TimeoutInfo>,ArrayList<TimeoutInfo>()
java.lang,Integer,toHexString,String toHexString(int p0)
io.vertx.core,Vertx,getOrCreateContext,Context getOrCreateContext()
io.vertx.core.streams.impl,InboundBuffer,InboundBuffer<Buffer>,InboundBuffer<Buffer>(Context p0)
io.vertx.core,Context,runOnContext,void runOnContext(Handler<Void> p0)
java.util,Deque,add,boolean add(String p0)
java.util,ArrayList,ArrayList<Handler<AsyncResult<Void>>>,ArrayList<Handler<AsyncResult<Void>>>()
io.vertx.core,Vertx,currentContext,Context currentContext()
io.vertx.core.streams.impl,InboundBuffer,handler,InboundBuffer<Buffer> handler(Handler<Buffer> p0)
io.vertx.core.streams.impl,InboundBuffer,fetch,boolean fetch(long p0)
io.vertx.core.streams.impl,InboundBuffer,pause,InboundBuffer<Buffer> pause()
io.vertx.core.streams.impl,InboundBuffer,resume,boolean resume()
java.util,Collection,toArray,Object[] toArray()
java.util,Collection,clear,void clear()
java.lang,Iterable,forEach,void forEach(Consumer<? super Handler<AsyncResult<Void>>> p0)
io.vertx.core.http,HttpServerRequest,localAddress,SocketAddress localAddress()
io.vertx.core.shareddata,LocalMap,remove,SockJSSession remove(Object p0)
io.vertx.core.streams.impl,InboundBuffer,clear,InboundBuffer<Buffer> clear()
io.vertx.core,Handler,handle,void handle(E p0)
io.vertx.core.streams.impl,InboundBuffer,write,boolean write(Buffer p0)
io.vertx.core,Handler,handle,void handle(Throwable p0)
io.vertx.core.eventbus,Message,body,Buffer body()
io.vertx.core.eventbus,MessageConsumer,handler,MessageConsumer<Buffer> handler(Handler<Message<Buffer>> p0)
io.vertx.core.eventbus,MessageConsumer,unregister,void unregister(Handler<AsyncResult<Void>> p0)
io.vertx.core.http,HttpServerRequest,isEnded,boolean isEnded()
io.vertx.core,Vertx,executeBlocking,"void executeBlocking(Handler<Promise<T>> p0, boolean p1, Handler<AsyncResult<T>> p2)"
java.util,ArrayDeque,ArrayDeque<K>,ArrayDeque<K>()
java.util.concurrent,ConcurrentHashMap,ConcurrentHashMap,ConcurrentHashMap()
java.util.concurrent,ConcurrentHashMap,ConcurrentHashMap,ConcurrentHashMap(int p0)
java.util.concurrent,ConcurrentHashMap,ConcurrentHashMap,"ConcurrentHashMap(Map<? extends K,? extends V> p0)"
java.util,Map,keySet,Set<? extends K> keySet()
java.util.concurrent,ConcurrentHashMap,ConcurrentHashMap,"ConcurrentHashMap(int p0, float p1)"
java.util.concurrent,ConcurrentHashMap,ConcurrentHashMap,"ConcurrentHashMap(int p0, float p1, int p2)"
java.util.concurrent,ConcurrentHashMap,put,"V put(K p0, V p1)"
java.util.concurrent,ConcurrentHashMap,containsKey,boolean containsKey(Object p0)
java.util.concurrent,ConcurrentHashMap,putAll,"void putAll(Map<? extends K,? extends V> p0)"
java.util.concurrent,ConcurrentHashMap,remove,V remove(Object p0)
java.util.concurrent,ConcurrentHashMap,clear,void clear()
java.util.concurrent,ConcurrentHashMap,putIfAbsent,"V putIfAbsent(K p0, V p1)"
java.util.concurrent,ConcurrentHashMap,remove,"boolean remove(Object p0, Object p1)"
java.util,Queue,add,boolean add(K p0)
java.util,Collection,remove,boolean remove(Object p0)
java.util,Collection,size,int size()
java.util,Queue,poll,K poll()
io.vertx.core.http.impl,CookieImpl,CookieImpl,CookieImpl(Cookie p0)
io.vertx.core.http,Cookie,getName,String getName()
io.vertx.core.http,Cookie,setDomain,Cookie setDomain(String p0)
io.vertx.core.http,Cookie,getDomain,String getDomain()
io.vertx.core.http,Cookie,getPath,String getPath()
io.vertx.core.http,Cookie,setMaxAge,Cookie setMaxAge(long p0)
io.vertx.core.http,Cookie,isSecure,boolean isSecure()
io.vertx.core.http,Cookie,isHttpOnly,boolean isHttpOnly()
io.vertx.core.http,Cookie,getSameSite,CookieSameSite getSameSite()
io.vertx.core.http,Cookie,encode,String encode()
io.vertx.core.http.impl,ServerCookie,isChanged,boolean isChanged()
io.vertx.core.http.impl,ServerCookie,setChanged,void setChanged(boolean p0)
io.vertx.core.http.impl,ServerCookie,isFromUserAgent,boolean isFromUserAgent()
io.vertx.core.http,HttpServerFileUpload,name,String name()
io.vertx.core.http,HttpServerFileUpload,filename,String filename()
io.vertx.core.http,HttpServerFileUpload,contentType,String contentType()
io.vertx.core.http,HttpServerFileUpload,contentTransferEncoding,String contentTransferEncoding()
io.vertx.core.http,HttpServerFileUpload,charset,String charset()
java.util.function,Consumer,accept,void accept(String p0)
java.util.function,Consumer,accept,void accept(Float p0)
java.lang,Float,parseFloat,float parseFloat(String p0)
io.vertx.core.logging,Logger,info,"void info(Object p0, Object[] p1)"
java.util.function,BiConsumer,accept,"void accept(String p0, String p1)"
java.lang,String,indexOf,"int indexOf(int p0, int p1)"
java.util.function,Function,apply,T apply(String p0)
io.vertx.core.http,HttpServerRequest,bytesRead,long bytesRead()
io.vertx.core.http,HttpServerRequest,fetch,HttpServerRequest fetch(long p0)
io.vertx.core.http,HttpServerRequest,rawMethod,String rawMethod()
io.vertx.core.http,HttpServerRequest,query,String query()
io.vertx.core,MultiMap,caseInsensitiveMultiMap,MultiMap caseInsensitiveMultiMap()
io.netty.handler.codec.http,QueryStringDecoder,QueryStringDecoder,QueryStringDecoder(String p0)
io.netty.handler.codec.http,QueryStringDecoder,parameters,"Map<String,List<String>> parameters()"
java.util,Map,isEmpty,boolean isEmpty()
java.util,Map,entrySet,"Set<Entry<String,List<String>>> entrySet()"
io.vertx.core,MultiMap,add,"MultiMap add(String p0, Iterable<String> p1)"
java.util,Entry,getValue,List<String> getValue()
io.vertx.core.http,HttpServerRequest,peerCertificateChain,X509Certificate[] peerCertificateChain()
io.vertx.core.http,HttpServerRequest,sslSession,SSLSession sslSession()
io.vertx.core.http,HttpServerRequest,scheme,String scheme()
io.vertx.core.http,HttpServerRequest,customFrameHandler,HttpServerRequest customFrameHandler(Handler<HttpFrame> p0)
io.vertx.core.http,HttpServerRequest,connection,HttpConnection connection()
io.vertx.core.http,HttpServerRequest,netSocket,NetSocket netSocket()
io.vertx.core.http,HttpServerRequest,isSSL,boolean isSSL()
io.vertx.core.http,HttpServerRequest,streamPriorityHandler,HttpServerRequest streamPriorityHandler(Handler<StreamPriority> p0)
io.vertx.core.http,HttpServerRequest,streamPriority,StreamPriority streamPriority()
io.vertx.core.http,HttpServerRequest,getCookie,Cookie getCookie(String p0)
io.vertx.core.http,HttpServerRequest,cookieCount,int cookieCount()
io.vertx.core.http,HttpServerRequest,cookieMap,"Map<String,Cookie> cookieMap()"
java.util,LinkedHashMap,LinkedHashMap,"LinkedHashMap(int p0, float p1)"
java.util,LinkedHashMap,LinkedHashMap,LinkedHashMap(int p0)
java.util,LinkedHashMap,LinkedHashMap,LinkedHashMap()
java.util,LinkedHashMap,LinkedHashMap,"LinkedHashMap(Map<? extends K,? extends V> p0)"
java.util,LinkedHashMap,LinkedHashMap,"LinkedHashMap(int p0, float p1, boolean p2)"
java.util,HashMap,size,int size()
java.util,Objects,requireNonNull,"T requireNonNull(T p0, String p1)"
java.util,Collections,emptyMap,"Map<K,V> emptyMap()"
java.util,Map,get,String get(Object p0)
java.util,Collections,unmodifiableMap,"Map<K,V> unmodifiableMap(Map<? extends K,? extends V> p0)"
java.util,Map,entrySet,"Set<Entry<String,String>> entrySet()"
java.util,Entry,getValue,String getValue()
java.util,HashMap,"HashMap<String,String>","HashMap<String,String>()"
java.util,Map,put,"String put(String p0, String p1)"
java.lang,Math,max,"float max(float p0, float p1)"
java.lang,Math,min,"float min(float p0, float p1)"
java.util,Objects,hash,int hash(Object[] p0)
java.lang,String,toUpperCase,String toUpperCase()
java.util,Map,size,int size()
java.util.regex,Pattern,pattern,String pattern()
java.lang,StringBuffer,StringBuffer,StringBuffer()
java.util.regex,Matcher,replaceAll,String replaceAll(String p0)
java.util.regex,Matcher,group,String group()
java.util.regex,Matcher,appendReplacement,"Matcher appendReplacement(StringBuffer p0, String p1)"
java.util.regex,Matcher,appendTail,StringBuffer appendTail(StringBuffer p0)
java.lang,StringBuffer,toString,String toString()
java.util,HashSet,HashSet<HttpMethod>,HashSet<HttpMethod>()
java.util,HashSet,HashSet<HttpMethod>,HashSet<HttpMethod>(Collection<? extends HttpMethod> p0)
java.util,HashSet,HashSet<MIMEHeader>,HashSet<MIMEHeader>()
java.util,HashSet,HashSet<MIMEHeader>,HashSet<MIMEHeader>(Collection<? extends MIMEHeader> p0)
java.util,Set,add,boolean add(MIMEHeader p0)
java.util,ArrayList,ArrayList<Handler<RoutingContext>>,ArrayList<Handler<RoutingContext>>()
java.util,ArrayList,ArrayList<Handler<RoutingContext>>,ArrayList<Handler<RoutingContext>>(Collection<? extends Handler<RoutingContext>> p0)
java.util,ArrayList,ArrayList<String>,ArrayList<String>(Collection<? extends String> p0)
java.util,Collection,contains,boolean contains(Object p0)
java.util.regex,Matcher,groupCount,int groupCount()
java.util.regex,Matcher,start,int start(String p0)
java.util.regex,Matcher,group,String group(String p0)
java.lang,String,regionMatches,"boolean regionMatches(int p0, String p1, int p2, int p3)"
java.util,ArrayList,ArrayList<Route>,ArrayList<Route>(Collection<? extends Route> p0)
io.vertx.core,Handler,handle,void handle(Router p0)
java.util,Set,iterator,Iterator<RouteImpl> iterator()
java.util,TreeSet,TreeSet<RouteImpl>,TreeSet<RouteImpl>(Comparator<? super RouteImpl> p0)
java.util,Set,addAll,boolean addAll(Collection<? extends RouteImpl> p0)
java.util,Set,add,boolean add(RouteImpl p0)
java.util,Set,remove,boolean remove(Object p0)
java.util,Map,get,Handler<RoutingContext> get(Object p0)
java.util,HashMap,"HashMap<Integer,Handler<RoutingContext>>","HashMap<Integer,Handler<RoutingContext>>()"
java.util,HashMap,"HashMap<Integer,Handler<RoutingContext>>","HashMap<Integer,Handler<RoutingContext>>(Map<? extends Integer,? extends Handler<RoutingContext>> p0)"
java.util,Map,put,"Handler<RoutingContext> put(Integer p0, Handler<RoutingContext> p1)"
java.lang,NullPointerException,NullPointerException,NullPointerException()
java.util,Map,remove,Object remove(Object p0)
io.vertx.core.http.impl,HttpUtils,normalizePath,String normalizePath(String p0)
io.vertx.core.http,HttpServerResponse,addCookie,HttpServerResponse addCookie(Cookie p0)
io.vertx.core.http,HttpServerResponse,removeCookie,"Cookie removeCookie(String p0, boolean p1)"
java.util.stream,Stream,collect,"R collect(Collector<? super Cookie,A,R> p0)"
java.util.stream,Stream,map,"Stream<R> map(Function<? super ServerCookie,? extends R> p0)"
java.util.stream,Collectors,toCollection,"Collector<T,?,C> toCollection(Supplier<C> p0)"
java.util.stream,Stream,map,"Stream<R> map(Function<? super Cookie,? extends R> p0)"
java.util,Collection,stream,Stream<Cookie> stream()
java.util,Map,values,Collection<Cookie> values()
java.util,HashSet,HashSet<>,HashSet<>()
io.vertx.core.buffer,Buffer,toString,String toString(String p0)
java.util.function,Function,apply,JsonObject apply(Buffer p0)
java.util.function,Function,apply,JsonArray apply(Buffer p0)
java.util,Map,put,"Handler<Void> put(Integer p0, Handler<Void> p1)"
java.util,Map,remove,Handler<Void> remove(Object p0)
java.util,Map,put,"Handler<AsyncResult<Void>> put(Integer p0, Handler<AsyncResult<Void>> p1)"
java.util,Map,remove,Handler<AsyncResult<Void>> remove(Object p0)
io.vertx.core,MultiMap,clear,MultiMap clear()
java.util,TreeMap,"TreeMap<Integer,Handler<Void>>","TreeMap<Integer,Handler<Void>>(Comparator<? super Integer> p0)"
java.util,Collections,reverseOrder,Comparator<T> reverseOrder()
io.vertx.core.http,HttpServerResponse,headersEndHandler,HttpServerResponse headersEndHandler(Handler<Void> p0)
java.lang,Iterable,forEach,void forEach(Consumer<? super Handler<Void>> p0)
java.util,Map,values,Collection<Handler<Void>> values()
io.vertx.core,Handler,handle,void handle(Void p0)
io.vertx.core.http,HttpServerResponse,bodyEndHandler,HttpServerResponse bodyEndHandler(Handler<Void> p0)
java.util,Map,values,Collection<Handler<AsyncResult<Void>>> values()
java.util,TreeMap,"TreeMap<Integer,Handler<AsyncResult<Void>>>","TreeMap<Integer,Handler<AsyncResult<Void>>>(Comparator<? super Integer> p0)"
io.vertx.core.http,HttpServerResponse,exceptionHandler,HttpServerResponse exceptionHandler(Handler<Throwable> p0)
io.vertx.core.http,HttpServerResponse,endHandler,HttpServerResponse endHandler(Handler<Void> p0)
java.util,HashSet,HashSet<FileUpload>,HashSet<FileUpload>()
java.util,HashMap,"HashMap<String,Object>","HashMap<String,Object>()"
java.util.concurrent.atomic,AtomicInteger,AtomicInteger,AtomicInteger(int p0)
java.util.concurrent.atomic,AtomicInteger,intValue,int intValue()
java.util,Iterator,next,RouteImpl next()
java.util.concurrent.atomic,AtomicInteger,set,void set(int p0)
io.vertx.core.logging,Logger,trace,"void trace(Object p0, Throwable p1)"
io.vertx.core.http,HttpServerResponse,ended,boolean ended()
io.vertx.core.http,HttpServerResponse,closed,boolean closed()
java.time,ZoneId,of,ZoneId of(String p0)
io.vertx.core.impl,Utils,Utils,Utils()
java.lang,ClassLoader,getResourceAsStream,InputStream getResourceAsStream(String p0)
java.io,InputStream,read,"int read(byte[] p0, int p1, int p2)"
java.time.format,DateTimeFormatter,format,String format(TemporalAccessor p0)
java.time,Instant,atZone,ZonedDateTime atZone(ZoneId p0)
java.time,Instant,ofEpochMilli,Instant ofEpochMilli(long p0)
java.time,Instant,toEpochMilli,long toEpochMilli()
java.time.chrono,ChronoLocalDateTime,toInstant,Instant toInstant(ZoneOffset p0)
java.time,LocalDateTime,parse,"LocalDateTime parse(CharSequence p0, DateTimeFormatter p1)"
com.fasterxml.jackson.databind,ObjectMapper,readTree,JsonNode readTree(String p0)
java.lang,Throwable,printStackTrace,void printStackTrace()
com.fasterxml.jackson.databind,JsonNode,toString,String toString()
io.vertx.core.json,JsonArray,JsonArray,JsonArray(String p0)
com.fasterxml.jackson.databind,JsonNode,isArray,boolean isArray()
com.fasterxml.jackson.databind,JsonNode,isObject,boolean isObject()
java.util.concurrent,ConcurrentHashMap,"ConcurrentHashMap<String,Object>","ConcurrentHashMap<String,Object>()"
io.vertx.ext.auth,PRNG,nextBytes,void nextBytes(byte[] p0)
io.vertx.core,ServiceHelper,loadFactoryOrNull,T loadFactoryOrNull(Class<T> p0)
io.vertx.core,Vertx,isClustered,boolean isClustered()
io.vertx.ext.auth,PRNG,PRNG,PRNG(Vertx p0)
io.vertx.core.shareddata,AsyncMap,get,"void get(String p0, Handler<AsyncResult<Session>> p1)"
io.vertx.core,AsyncResult,result,"AsyncMap<String,Session> result()"
io.vertx.core.shareddata,AsyncMap,remove,"void remove(String p0, Handler<AsyncResult<Session>> p1)"
io.vertx.core.shareddata,AsyncMap,put,"void put(String p0, Session p1, long p2, Handler<AsyncResult<Void>> p3)"
io.vertx.core.shareddata,AsyncMap,clear,void clear(Handler<AsyncResult<Void>> p0)
io.vertx.core.shareddata,AsyncMap,size,void size(Handler<AsyncResult<Integer>> p0)
io.vertx.core,Handler,handle,void handle(AsyncResult<Integer> p0)
io.vertx.core,AsyncResult,result,Integer result()
io.vertx.ext.auth,PRNG,close,void close()
io.vertx.core.shareddata,SharedData,getClusterWideMap,"void getClusterWideMap(String p0, Handler<AsyncResult<AsyncMap<K,V>>> p1)"
io.vertx.core,Handler,handle,"void handle(AsyncResult<AsyncMap<String,Session>> p0)"
io.vertx.core.shareddata,LocalMap,get,Session get(Object p0)
io.vertx.core.shareddata,LocalMap,remove,Session remove(Object p0)
io.vertx.core.shareddata,LocalMap,put,"Session put(String p0, Session p1)"
io.vertx.core.shareddata,LocalMap,clear,void clear()
io.vertx.core.shareddata,LocalMap,size,int size()
io.vertx.core.shareddata,LocalMap,close,void close()
io.vertx.core.shareddata,LocalMap,values,Collection<Session> values()
io.vertx.core.buffer,Buffer,appendLong,Buffer appendLong(long p0)
io.vertx.core.buffer,Buffer,getLong,long getLong(int p0)
io.vertx.core.buffer,Buffer,appendShort,Buffer appendShort(short p0)
io.vertx.core.buffer,Buffer,appendDouble,Buffer appendDouble(double p0)
io.vertx.core.buffer,Buffer,appendFloat,Buffer appendFloat(float p0)
java.lang,Character,charValue,char charValue()
java.util.concurrent,ConcurrentHashMap,"ConcurrentHashMap<String,Object>","ConcurrentHashMap<String,Object>(int p0)"
io.vertx.core.buffer,Buffer,getShort,short getShort(int p0)
io.vertx.core.buffer,Buffer,getFloat,float getFloat(int p0)
io.vertx.core.buffer,Buffer,getDouble,double getDouble(int p0)
java.util,Map,remove,String remove(Object p0)
io.vertx.test.core,AsyncTestBase,fail,void fail()
io.vertx.test.core,AsyncTestBase,assertEquals,"void assertEquals(Object p0, Object p1)"
io.vertx.test.core,AsyncTestBase,assertTrue,void assertTrue(boolean p0)
java.util.concurrent,CountDownLatch,CountDownLatch,CountDownLatch(int p0)
java.util.concurrent,CountDownLatch,countDown,void countDown()
io.vertx.test.core,AsyncTestBase,awaitLatch,void awaitLatch(CountDownLatch p0)
io.vertx.test.core,AsyncTestBase,assertEquals,"void assertEquals(long p0, long p1)"
java.lang,Throwable,Throwable,Throwable()
io.vertx.test.core,AsyncTestBase,assertSame,"void assertSame(Object p0, Object p1)"
java.util.stream,Stream,collect,"R collect(Collector<? super String,A,R> p0)"
java.util,Collection,stream,Stream<String> stream()
java.util.stream,Collectors,joining,"Collector<CharSequence,?,String> joining(CharSequence p0)"
java.lang,String,join,"String join(CharSequence p0, Iterable<? extends CharSequence> p1)"
java.lang,String,join,"String join(CharSequence p0, CharSequence[] p1)"
io.vertx.test.core,AsyncTestBase,assertFalse,void assertFalse(boolean p0)
io.vertx.core.http,HttpClientResponse,headers,MultiMap headers()
java.util.concurrent.atomic,AtomicInteger,getAndDecrement,int getAndDecrement()
io.vertx.test.core,AsyncTestBase,assertWaitUntil,void assertWaitUntil(BooleanSupplier p0)
io.vertx.core.http,HttpClient,request,"HttpClientRequest request(HttpMethod p0, int p1, String p2, String p3)"
io.vertx.core.http,HttpServer,actualPort,int actualPort()
io.vertx.core.http,HttpConnection,close,void close()
io.vertx.core.http,HttpClientRequest,connection,HttpConnection connection()
io.vertx.core.http,HttpClientRequest,end,void end()
io.vertx.core.http,HttpClientRequest,handler,HttpClientRequest handler(Handler<HttpClientResponse> p0)
io.vertx.test.core,AsyncTestBase,testComplete,void testComplete()
io.vertx.test.core,AsyncTestBase,fail,void fail(String p0)
io.vertx.core.http,HttpClientRequest,putHeader,"HttpClientRequest putHeader(String p0, String p1)"
io.vertx.core,Vertx,executeBlocking,"void executeBlocking(Handler<Promise<T>> p0, Handler<AsyncResult<T>> p1)"
io.vertx.test.core,AsyncTestBase,assertNull,void assertNull(Object p0)
java.lang,Math,random,double random()
java.util,Random,nextBoolean,boolean nextBoolean()
java.lang,RuntimeException,RuntimeException,RuntimeException()
io.vertx.core.http,HttpClient,request,"HttpClientRequest request(HttpMethod p0, int p1, String p2, String p3, Handler<HttpClientResponse> p4)"
java.util.concurrent,CountDownLatch,getCount,long getCount()
java.util.concurrent,CountDownLatch,await,void await()
io.vertx.test.core,AsyncTestBase,assertNotNull,void assertNotNull(Object p0)
io.vertx.core,Vertx,vertx,Vertx vertx()
io.vertx.core,Vertx,deployVerticle,"void deployVerticle(String p0, Handler<AsyncResult<String>> p1)"
io.vertx.ext.unit,TestContext,asyncAssertSuccess,Handler<AsyncResult<T>> asyncAssertSuccess(Handler<T> p0)
io.vertx.core,Vertx,createHttpClient,HttpClient createHttpClient(HttpClientOptions p0)
io.vertx.core.http,HttpClientOptions,setConnectTimeout,HttpClientOptions setConnectTimeout(int p0)
io.vertx.core.http,HttpClientOptions,HttpClientOptions,HttpClientOptions()
io.vertx.core.http,HttpClientRequest,exceptionHandler,HttpClientRequest exceptionHandler(Handler<Throwable> p0)
io.vertx.core.http,HttpClient,get,"HttpClientRequest get(int p0, String p1, String p2, Handler<HttpClientResponse> p3)"
io.vertx.core.http,HttpClientResponse,statusCode,int statusCode()
io.vertx.core,Vertx,close,void close(Handler<AsyncResult<Void>> p0)
io.vertx.ext.unit,TestContext,asyncAssertSuccess,Handler<AsyncResult<T>> asyncAssertSuccess()
io.vertx.core,AbstractVerticle,AbstractVerticle,AbstractVerticle()
io.vertx.core.http,HttpServer,listen,"HttpServer listen(int p0, Handler<AsyncResult<HttpServer>> p1)"
java.util,Arrays,asList,List<T> asList(T[] p0)
io.vertx.test.core,VertxTestBase,VertxTestBase,VertxTestBase()
io.vertx.test.core,VertxTestBase,setUp,void setUp()
io.vertx.core,Vertx,createHttpServer,HttpServer createHttpServer(HttpServerOptions p0)
io.vertx.core.http,HttpServer,listen,HttpServer listen(Handler<AsyncResult<HttpServer>> p0)
io.vertx.test.core,AsyncTestBase,onSuccess,Handler<AsyncResult<T>> onSuccess(Consumer<T> p0)
io.vertx.core.http,HttpServerOptions,setHost,HttpServerOptions setHost(String p0)
io.vertx.core.http,HttpServerOptions,setPort,HttpServerOptions setPort(int p0)
io.vertx.core.http,HttpServerOptions,HttpServerOptions,HttpServerOptions()
io.vertx.core.http,HttpClientOptions,setDefaultPort,HttpClientOptions setDefaultPort(int p0)
io.vertx.core.http,HttpClient,close,void close()
io.vertx.core.http,HttpServer,close,void close(Handler<AsyncResult<Void>> p0)
io.vertx.test.core,VertxTestBase,tearDown,void tearDown()
io.vertx.core.http,HttpClientResponse,statusMessage,String statusMessage()
java.util.function,Consumer,accept,void accept(HttpClientResponse p0)
io.vertx.core.http,HttpClientResponse,bodyHandler,HttpClientResponse bodyHandler(Handler<Buffer> p0)
java.util.function,Consumer,accept,void accept(HttpClientRequest p0)
io.vertx.core.buffer,Buffer,getUnsignedByte,short getUnsignedByte(int p0)
io.vertx.core.buffer,Buffer,appendUnsignedByte,Buffer appendUnsignedByte(short p0)
java.net,URL,openConnection,URLConnection openConnection()
java.net,HttpURLConnection,setRequestMethod,void setRequestMethod(String p0)
java.net,HttpURLConnection,getResponseCode,int getResponseCode()
java.io,BufferedReader,BufferedReader,BufferedReader(Reader p0)
java.io,InputStreamReader,InputStreamReader,InputStreamReader(InputStream p0)
java.net,URLConnection,getInputStream,InputStream getInputStream()
java.net,HttpURLConnection,getResponseMessage,String getResponseMessage()
java.io,BufferedReader,readLine,String readLine()
java.io,BufferedReader,close,void close()
java.net,HttpURLConnection,getErrorStream,InputStream getErrorStream()
io.vertx.core.file,FileSystem,deleteRecursiveBlocking,"FileSystem deleteRecursiveBlocking(String p0, boolean p1)"
io.vertx.ext.auth.shiro,ShiroAuth,create,"ShiroAuth create(Vertx p0, ShiroAuthOptions p1)"
io.vertx.ext.auth.shiro,ShiroAuthOptions,setConfig,ShiroAuthOptions setConfig(JsonObject p0)
io.vertx.ext.auth.shiro,ShiroAuthOptions,setType,ShiroAuthOptions setType(ShiroAuthRealmType p0)
io.vertx.ext.auth.shiro,ShiroAuthOptions,ShiroAuthOptions,ShiroAuthOptions()
java.util.concurrent.atomic,AtomicReference,AtomicReference<String>,AtomicReference<String>()
java.util.concurrent.atomic,AtomicReference,get,String get()
java.util.concurrent.atomic,AtomicReference,set,void set(String p0)
java.util.concurrent,ConcurrentHashMap,"ConcurrentHashMap<String,Buffer>","ConcurrentHashMap<String,Buffer>()"
java.util,Map,get,Buffer get(Object p0)
java.util,Map,remove,Buffer remove(Object p0)
java.util,Map,put,"Buffer put(String p0, Buffer p1)"
java.util,ArrayList,ArrayList<Thread>,ArrayList<Thread>()
java.util,ArrayList,ArrayList<Context>,ArrayList<Context>()
io.vertx.core.http,HttpClient,getNow,"HttpClient getNow(String p0, Handler<HttpClientResponse> p1)"
io.vertx.test.core,TestUtils,randomBuffer,Buffer randomBuffer(int p0)
io.vertx.core.http,HttpClientRequest,setChunked,HttpClientRequest setChunked(boolean p0)
io.vertx.core.http,HttpClientRequest,write,HttpClientRequest write(Buffer p0)
io.vertx.core.http,HttpClientRequest,write,HttpClientRequest write(String p0)
io.vertx.test.core,TestUtils,randomUnicodeString,String randomUnicodeString(int p0)
io.vertx.core.http,HttpClientRequest,write,"HttpClientRequest write(String p0, String p1)"
io.vertx.core.http,HttpClientRequest,putHeader,"HttpClientRequest putHeader(CharSequence p0, CharSequence p1)"
java.util,Iterator,next,FileUpload next()
java.util,Set,iterator,Iterator<FileUpload> iterator()
java.lang,IllegalStateException,IllegalStateException,IllegalStateException()
io.vertx.core.file,FileSystem,deleteBlocking,FileSystem deleteBlocking(String p0)
io.vertx.core.file,FileSystem,readDirBlocking,List<String> readDirBlocking(String p0)
io.vertx.core.http,HttpClient,request,"HttpClientRequest request(HttpMethod p0, String p1, Handler<HttpClientResponse> p2)"
io.vertx.core.http,HttpClientRequest,headers,MultiMap headers()
io.vertx.core,MultiMap,size,int size()
io.vertx.test.core,AsyncTestBase,assertFalse,"void assertFalse(String p0, boolean p1)"
io.vertx.test.core,AsyncTestBase,assertTrue,"void assertTrue(String p0, boolean p1)"
java.io,File,delete,boolean delete()
java.util.function,Consumer,accept,void accept(T p0)
java.util.function,Consumer,accept,void accept(RoutingContext p0)
java.util,LinkedHashSet,LinkedHashSet<HttpMethod>,LinkedHashSet<HttpMethod>(Collection<? extends HttpMethod> p0)
java.util,LinkedHashSet,LinkedHashSet<String>,LinkedHashSet<String>(Collection<? extends String> p0)
io.vertx.core,Handler,handle,void handle(AsyncResult<User> p0)
io.vertx.ext.auth.htdigest,HtdigestAuth,create,HtdigestAuth create(Vertx p0)
io.vertx.test.core,AsyncTestBase,await,void await()
java.lang,Exception,Exception,Exception(String p0)
io.vertx.core.http,HttpClient,websocket,"HttpClient websocket(String p0, Handler<WebSocket> p1)"
io.vertx.core.http,WebSocket,writeFrame,WebSocket writeFrame(WebSocketFrame p0)
io.vertx.core.http,WebSocketFrame,textFrame,"WebSocketFrame textFrame(String p0, boolean p1)"
io.vertx.core.http,WebSocket,closeHandler,WebSocket closeHandler(Handler<Void> p0)
io.vertx.core.http,WebSocketBase,close,void close()
io.vertx.core.json,JsonObject,remove,Object remove(String p0)
io.vertx.core.json,JsonArray,add,JsonArray add(Integer p0)
io.vertx.core.json,JsonObject,copy,JsonObject copy()
io.vertx.core.eventbus,Message,reply,void reply(Object p0)
io.vertx.core.http,WebSocket,handler,WebSocket handler(Handler<Buffer> p0)
io.vertx.core.eventbus,DeliveryOptions,addHeader,"DeliveryOptions addHeader(String p0, String p1)"
io.vertx.core.json,JsonArray,contains,boolean contains(Object p0)
io.vertx.core.eventbus,EventBus,send,"EventBus send(String p0, Object p1, Handler<AsyncResult<Message<T>>> p2)"
io.vertx.core.eventbus,Message,reply,"void reply(Object p0, Handler<AsyncResult<Message<R>>> p1)"
java.util.concurrent.atomic,AtomicInteger,getAndIncrement,int getAndIncrement()
io.vertx.test.core,TestUtils,randomAlphaString,String randomAlphaString(int p0)
io.vertx.core.eventbus,EventBus,consumer,"MessageConsumer<T> consumer(String p0, Handler<Message<T>> p1)"
io.vertx.core.eventbus,EventBus,send,"EventBus send(String p0, Object p1)"
java.lang,Integer,intValue,int intValue()
io.vertx.ext.auth.jwt,JWTAuthOptions,JWTAuthOptions,JWTAuthOptions(JsonObject p0)
io.vertx.core.http,HttpClientResponse,getHeader,String getHeader(String p0)
io.vertx.core.http,HttpServer,close,void close()
java.util,Base64,getEncoder,Encoder getEncoder()
io.vertx.ext.auth.oauth2,OAuth2ClientOptions,addPubSecKey,OAuth2ClientOptions addPubSecKey(PubSecKeyOptions p0)
io.vertx.ext.auth,PubSecKeyOptions,setPublicKey,PubSecKeyOptions setPublicKey(String p0)
io.vertx.ext.auth,PubSecKeyOptions,setAlgorithm,PubSecKeyOptions setAlgorithm(String p0)
io.vertx.ext.auth,PubSecKeyOptions,PubSecKeyOptions,PubSecKeyOptions()
io.vertx.ext.jwt,JWT,addJWK,JWT addJWK(JWK p0)
io.vertx.ext.jwt,JWT,JWT,JWT()
io.vertx.ext.jwt,JWK,JWK,"JWK(String p0, String p1, String p2)"
io.vertx.ext.jwt,JWT,sign,"String sign(JsonObject p0, JWTOptions p1)"
io.vertx.ext.auth,JWTOptions,setAlgorithm,JWTOptions setAlgorithm(String p0)
io.vertx.core.http,HttpClient,get,"HttpClientRequest get(String p0, Handler<HttpClientResponse> p1)"
io.vertx.core.json,JsonObject,toBuffer,Buffer toBuffer()
io.vertx.core.http,HttpClientResponse,getHeader,String getHeader(CharSequence p0)
io.vertx.test.core,AsyncTestBase,waitUntil,void waitUntil(BooleanSupplier p0)
java.util.concurrent,CompletableFuture,CompletableFuture<Boolean>,CompletableFuture<Boolean>()
java.util.concurrent,CompletableFuture,complete,boolean complete(Boolean p0)
java.util.function,Function,apply,Boolean apply(Session p0)
java.util.concurrent,CompletableFuture,completeExceptionally,boolean completeExceptionally(Throwable p0)
java.util.concurrent,CompletableFuture,get,Boolean get()
java.lang,Thread,interrupt,void interrupt()
java.lang,AssertionError,AssertionError,AssertionError(Object p0)
java.util.concurrent.atomic,AtomicReference,AtomicReference<Session>,AtomicReference<Session>()
java.util.concurrent.atomic,AtomicReference,set,void set(Session p0)
java.util.concurrent.atomic,AtomicReference,get,Session get()
io.vertx.test.core,AsyncTestBase,assertWaitUntil,"void assertWaitUntil(BooleanSupplier p0, long p1, String p2)"
java.util.concurrent,CompletableFuture,CompletableFuture<Session>,CompletableFuture<Session>()
java.util.concurrent,CompletableFuture,complete,boolean complete(Session p0)
java.util.concurrent,CompletableFuture,get,Session get()
java.util,ArrayList,ArrayList<Http2PushMapping>,ArrayList<Http2PushMapping>()
io.vertx.core.http,HttpServerOptions,setPemKeyCertOptions,HttpServerOptions setPemKeyCertOptions(PemKeyCertOptions p0)
io.vertx.core.http,HttpServerOptions,setSsl,HttpServerOptions setSsl(boolean p0)
io.vertx.core.net,PemKeyCertOptions,setCertPath,PemKeyCertOptions setCertPath(String p0)
io.vertx.core.http,HttpServerOptions,setUseAlpn,HttpServerOptions setUseAlpn(boolean p0)
io.vertx.core.net,PemKeyCertOptions,setKeyPath,PemKeyCertOptions setKeyPath(String p0)
io.vertx.core.net,PemKeyCertOptions,PemKeyCertOptions,PemKeyCertOptions()
io.vertx.core.http,HttpClientOptions,setPemTrustOptions,HttpClientOptions setPemTrustOptions(PemTrustOptions p0)
io.vertx.core.http,HttpClientOptions,setProtocolVersion,HttpClientOptions setProtocolVersion(HttpVersion p0)
io.vertx.core.net,PemTrustOptions,addCertPath,PemTrustOptions addCertPath(String p0)
io.vertx.core.http,HttpClientOptions,setUseAlpn,HttpClientOptions setUseAlpn(boolean p0)
io.vertx.core.http,HttpClientOptions,setSsl,HttpClientOptions setSsl(boolean p0)
io.vertx.core.net,PemTrustOptions,PemTrustOptions,PemTrustOptions()
io.vertx.core.http,HttpClientResponse,version,HttpVersion version()
io.vertx.core.http,HttpClientRequest,pushHandler,HttpClientRequest pushHandler(Handler<HttpClientRequest> p0)
java.util,Collections,singleton,Set<T> singleton(T p0)
java.lang,CharSequence,toString,String toString()
java.util,Collections,synchronizedList,List<T> synchronizedList(List<T> p0)
java.util,ArrayList,ArrayList<E>,ArrayList<E>()
io.vertx.core.http,HttpServerOptions,setCompressionSupported,HttpServerOptions setCompressionSupported(boolean p0)
io.vertx.core.http,HttpClient,get,"HttpClientRequest get(int p0, String p1, String p2)"
io.vertx.core.http,HttpClientOptions,getDefaultHost,String getDefaultHost()
io.vertx.test.core,AsyncTestBase,fail,void fail(Throwable p0)
io.vertx.core.http,HttpClientResponse,endHandler,HttpClientResponse endHandler(Handler<Void> p0)
java.util.function,BiConsumer,accept,"void accept(String p0, HttpClientRequest p1)"
java.io,File,lastModified,long lastModified()
java.io,File,setLastModified,boolean setLastModified(long p0)
java.nio.file,Files,readAllBytes,byte[] readAllBytes(Path p0)
java.io,File,toPath,Path toPath()
java.io,File,exists,boolean exists()
java.io,File,mkdirs,boolean mkdirs()
java.io,File,createNewFile,boolean createNewFile()
io.vertx.test.core,AsyncTestBase,assertNotSame,"void assertNotSame(Object p0, Object p1)"
java.io,File,createTempFile,"File createTempFile(String p0, String p1)"
java.io,File,length,long length()
java.util.concurrent.atomic,AtomicBoolean,set,void set(boolean p0)
io.vertx.core.http,HttpClientRequest,setHost,HttpClientRequest setHost(String p0)
io.vertx.core,Promise,complete,void complete(Object p0)
io.vertx.core.http,HttpClient,post,"HttpClientRequest post(String p0, Handler<HttpClientResponse> p1)"
io.vertx.test.core,AsyncTestBase,waitFor,void waitFor(int p0)
io.vertx.test.core,AsyncTestBase,complete,void complete()
io.vertx.core.http,WebSocketFrame,binaryFrame,"WebSocketFrame binaryFrame(Buffer p0, boolean p1)"
io.vertx.core.http,WebSocketFrame,continuationFrame,"WebSocketFrame continuationFrame(Buffer p0, boolean p1)"
java.util.concurrent.atomic,AtomicReference,AtomicReference<Buffer>,AtomicReference<Buffer>()
io.vertx.core.buffer,Buffer,slice,"Buffer slice(int p0, int p1)"
java.util.concurrent.atomic,AtomicReference,set,void set(Buffer p0)
io.vertx.test.core,AsyncTestBase,await,"void await(long p0, TimeUnit p1)"
io.vertx.test.core,AsyncTestBase,assertEquals,"void assertEquals(String p0, Object p1, Object p2)"
java.util.concurrent.atomic,AtomicReference,get,Buffer get()
java.util,ArrayList,ArrayList<Buffer>,ArrayList<Buffer>()
io.vertx.test.core,AsyncTestBase,assertEquals,"void assertEquals(String p0, long p1, long p2)"
io.vertx.core.http.impl.ws,WebSocketFrameImpl,WebSocketFrameImpl,"WebSocketFrameImpl(FrameType p0, ByteBuf p1, boolean p2)"
io.vertx.core.buffer,Buffer,getByteBuf,ByteBuf getByteBuf()
io.vertx.core.http,WebSocketFrame,textData,String textData()
java.util.function,BiConsumer,accept,"void accept(SockJSSocket p0, Buffer p1)"
java.util.concurrent.atomic,AtomicReference,AtomicReference<WebSocket>,AtomicReference<WebSocket>()
java.util.concurrent.atomic,AtomicReference,set,void set(WebSocket p0)
io.vertx.core.http,WebSocket,endHandler,WebSocket endHandler(Handler<Void> p0)
io.vertx.core.http,WebSocket,exceptionHandler,WebSocket exceptionHandler(Handler<Throwable> p0)
java.util.concurrent,CountDownLatch,await,"boolean await(long p0, TimeUnit p1)"
java.util.concurrent.atomic,AtomicReference,get,WebSocket get()
io.vertx.core.http,HttpClient,websocket,"HttpClient websocket(String p0, MultiMap p1, Handler<WebSocket> p2)"
io.vertx.core.http,WebSocket,frameHandler,WebSocket frameHandler(Handler<WebSocketFrame> p0)
io.vertx.core.http,WebSocketFrame,isClose,boolean isClose()
io.vertx.core.http,WebSocketFrame,closeStatusCode,short closeStatusCode()
io.vertx.core.http,WebSocketFrame,closeReason,String closeReason()
io.vertx.core.http,WebSocket,writeFinalBinaryFrame,WebSocket writeFinalBinaryFrame(Buffer p0)
io.vertx.core.json,JsonObject,JsonObject,JsonObject(Buffer p0)
io.vertx.core.http,WebSocketFrame,binaryData,Buffer binaryData()
io.vertx.core,Vertx,close,void close()
java.lang,Math,pow,"double pow(double p0, double p1)"
io.vertx.core.eventbus,EventBus,publish,"EventBus publish(String p0, Object p1)"
java.lang,Runtime,exec,"Process exec(String p0, String[] p1, File p2)"
java.lang,Runtime,getRuntime,Runtime getRuntime()
java.lang,Process,waitFor,int waitFor()
java.lang,Process,getErrorStream,InputStream getErrorStream()
io.vertx.core.http,WebSocketFrame,isText,boolean isText()
io.vertx.core.http,WebSocketFrame,isBinary,boolean isBinary()
io.vertx.core.http,WebSocketBase,end,void end()
io.vertx.core.http,HttpClientRequest,end,void end(String p0)
io.vertx.test.core,AsyncTestBase,assertThat,"void assertThat(T p0, Matcher<T> p1)"
java.lang,Thread,start,void start()
java.lang,Thread,Thread,Thread(Runnable p0)
io.vertx.core.http,HttpClientResponse,handler,HttpClientResponse handler(Handler<Buffer> p0)
io.vertx.core.http,HttpClientResponse,request,HttpClientRequest request()
java.util.concurrent.atomic,AtomicInteger,addAndGet,int addAndGet(int p0)
java.util.function,BooleanSupplier,getAsBoolean,boolean getAsBoolean()
io.vertx.core.http,WebSocket,writeTextMessage,WebSocket writeTextMessage(String p0)
java.util.concurrent.atomic,AtomicReference,AtomicReference<Context>,AtomicReference<Context>()
java.util.concurrent.atomic,AtomicReference,compareAndSet,"boolean compareAndSet(Context p0, Context p1)"
java.util.concurrent.atomic,AtomicReference,get,Context get()
java.util.stream,Stream,map,"Stream<R> map(Function<? super Object,? extends R> p0)"
java.util.stream,Collectors,toList,"Collector<T,?,List<T>> toList()"
io.vertx.core.json,JsonArray,stream,Stream<Object> stream()
io.vertx.core.http,HttpClientOptions,setKeepAlive,HttpClientOptions setKeepAlive(boolean p0)
io.vertx.core,Vertx,deployVerticle,"void deployVerticle(Supplier<Verticle> p0, DeploymentOptions p1, Handler<AsyncResult<String>> p2)"
io.vertx.core,DeploymentOptions,setInstances,DeploymentOptions setInstances(int p0)
java.util.function,Consumer,accept,void accept(Router p0)
java.util.function,Supplier,get,Handler<SockJSSocket> get()
io.vertx.core,DeploymentOptions,DeploymentOptions,DeploymentOptions()
io.vertx.test.core,AsyncTestBase,onFailure,Handler<AsyncResult<T>> onFailure(Consumer<Throwable> p0)
java.util,Collections,singletonList,List<T> singletonList(T p0)
io.vertx.test.core,TestUtils,randomByteArray,byte[] randomByteArray(int p0)
io.vertx.core,VertxOptions,setClusterManager,VertxOptions setClusterManager(ClusterManager p0)
io.vertx.test.core,VertxTestBase,startNodes,"void startNodes(int p0, VertxOptions p1)"
io.vertx.test.fakecluster,FakeClusterManager,FakeClusterManager,FakeClusterManager()
io.vertx.test.core,AsyncTestBase,assertEquals,"void assertEquals(double p0, double p1, double p2)"
io.vertx.test.core,TestUtils,byteArraysEqual,"boolean byteArraysEqual(byte[] p0, byte[] p1)"
java.lang,Number,intValue,int intValue()
io.vertx.core.buffer,Buffer,getBytes,byte[] getBytes()
io.vertx.core,AsyncResult,result,OpenAPI3RouterFactory result()
io.swagger.v3.parser.core.models,AuthorizationValue,value,AuthorizationValue value(String p0)
io.swagger.v3.parser.core.models,AuthorizationValue,keyName,AuthorizationValue keyName(String p0)
io.swagger.v3.parser.core.models,AuthorizationValue,type,AuthorizationValue type(String p0)
io.swagger.v3.parser.core.models,AuthorizationValue,AuthorizationValue,AuthorizationValue()
io.vertx.core.json,JsonObject,mapFrom,JsonObject mapFrom(Object p0)
io.swagger.v3.oas.models,Operation,getOperationId,String getOperationId()
io.vertx.core.http,HttpServer,listen,HttpServer listen()
io.vertx.core.json,JsonObject,getJsonObject,"JsonObject getJsonObject(String p0, JsonObject p1)"
java.lang,Iterable,forEach,"void forEach(Consumer<? super Entry<String,String>> p0)"
io.vertx.core,MultiMap,entries,"List<Entry<String,String>> entries()"
io.vertx.core.json,JsonArray,toBuffer,Buffer toBuffer()
io.vertx.core.eventbus,EventBus,send,"EventBus send(String p0, Object p1, DeliveryOptions p2, Handler<AsyncResult<Message<T>>> p3)"
io.vertx.core.eventbus,Message,body,JsonObject body()
io.vertx.core,AsyncResult,result,Message<JsonObject> result()
java.util.function,Function,apply,JsonObject apply(RoutingContext p0)
io.vertx.core.eventbus,DeliveryOptions,DeliveryOptions,DeliveryOptions(JsonObject p0)
java.util.stream,Stream,collect,"R collect(Collector<? super AuthorizationValue,A,R> p0)"
java.util.stream,Stream,map,"Stream<R> map(Function<? super JsonObject,? extends R> p0)"
java.util,Collection,stream,Stream<JsonObject> stream()
io.vertx.core.json,JsonObject,mapTo,T mapTo(Class<T> p0)
io.swagger.v3.parser,OpenAPIV3Parser,readLocation,"SwaggerParseResult readLocation(String p0, List<AuthorizationValue> p1, ParseOptions p2)"
io.swagger.v3.parser,OpenAPIV3Parser,OpenAPIV3Parser,OpenAPIV3Parser()
io.swagger.v3.parser.core.models,SwaggerParseResult,getMessages,List<String> getMessages()
io.vertx.core,Promise,complete,void complete(OpenAPI3RouterFactory p0)
io.swagger.v3.parser.core.models,SwaggerParseResult,getOpenAPI,OpenAPI getOpenAPI()
io.swagger.v3.parser,ResolverCache,ResolverCache,"ResolverCache(OpenAPI p0, List<AuthorizationValue> p1, String p2)"
java.lang,String,matches,boolean matches(String p0)
org.apache.commons.lang3,StringUtils,join,"String join(Iterable<?> p0, String p1)"
java.util.stream,Stream,collect,"R collect(Collector<? super Parameter,A,R> p0)"
java.util.stream,Stream,filter,Stream<Parameter> filter(Predicate<? super Parameter> p0)
java.util,Collection,stream,Stream<Parameter> stream()
io.swagger.v3.oas.models.parameters,Parameter,getIn,String getIn()
java.util,ArrayList,ArrayList<Parameter>,ArrayList<Parameter>()
java.util.regex,Matcher,reset,Matcher reset()
java.util.regex,Matcher,start,int start()
java.util.stream,Stream,findFirst,Optional<Parameter> findFirst()
io.swagger.v3.oas.models.parameters,Parameter,getName,String getName()
java.util.regex,Pattern,quote,String quote(String p0)
java.util.regex,Matcher,end,int end()
java.util,Optional,isPresent,boolean isPresent()
java.util,Optional,get,Parameter get()
io.swagger.v3.oas.models.parameters,Parameter,getSchema,Schema<> getSchema()
java.util,Map,entrySet,"Set<Entry<String,ObjectField>> entrySet()"
java.util,Optional,of,Optional<T> of(T p0)
java.util,Optional,empty,Optional<T> empty()
io.swagger.v3.oas.models.parameters,StyleEnum,toString,String toString()
io.swagger.v3.oas.models.parameters,Parameter,getStyle,StyleEnum getStyle()
java.util.function,Function,apply,Boolean apply(Boolean p0)
io.swagger.v3.oas.models.parameters,Parameter,getExplode,Boolean getExplode()
java.util.stream,Stream,anyMatch,boolean anyMatch(Predicate<? super String> p0)
java.util.stream,Stream,map,"Stream<R> map(Function<? super Parameter,? extends R> p0)"
io.swagger.v3.oas.models,Operation,getRequestBody,RequestBody getRequestBody()
io.swagger.v3.oas.models.parameters,Parameter,get$ref,String get$ref()
io.swagger.v3.parser,ResolverCache,loadRef,"T loadRef(String p0, RefFormat p1, Class<T> p2)"
io.swagger.v3.parser.util,RefUtils,computeRefFormat,RefFormat computeRefFormat(String p0)
io.swagger.v3.oas.models.parameters,RequestBody,get$ref,String get$ref()
io.swagger.v3.oas.models.media,Schema,getEnum,List<> getEnum()
java.util,ArrayList,ArrayList<>,ArrayList<>(Collection<> p0)
io.swagger.v3.oas.models.media,Schema,getType,String getType()
io.swagger.v3.oas.models.media,Schema,getFormat,String getFormat()
io.swagger.v3.oas.models.media,Schema,getExclusiveMaximum,Boolean getExclusiveMaximum()
io.swagger.v3.oas.models.media,Schema,getExclusiveMinimum,Boolean getExclusiveMinimum()
java.math,BigDecimal,doubleValue,double doubleValue()
io.swagger.v3.oas.models.media,Schema,getMaximum,BigDecimal getMaximum()
io.swagger.v3.oas.models.media,Schema,getMinimum,BigDecimal getMinimum()
io.swagger.v3.oas.models.media,Schema,getMultipleOf,BigDecimal getMultipleOf()
io.swagger.v3.oas.models.media,Schema,getDefault,Object getDefault()
io.swagger.v3.oas.models.media,Schema,getMinLength,Integer getMinLength()
io.swagger.v3.oas.models.media,Schema,getMaxLength,Integer getMaxLength()
io.swagger.v3.oas.models.media,Schema,getPattern,String getPattern()
java.util,Entry,getValue,ObjectField getValue()
java.util,ArrayList,ArrayList<ParameterTypeValidator>,ArrayList<ParameterTypeValidator>()
io.swagger.v3.oas.models.media,Schema,getMaxItems,Integer getMaxItems()
io.swagger.v3.oas.models.media,Schema,getMinItems,Integer getMinItems()
java.util,ArrayList,ArrayList<Schema<>>,ArrayList<Schema<>>(Collection<? extends Schema<>> p0)
io.swagger.v3.oas.models.media,ComposedSchema,getAnyOf,List<Schema<>> getAnyOf()
io.swagger.v3.oas.models.media,ComposedSchema,getOneOf,List<Schema<>> getOneOf()
io.swagger.v3.oas.models.media,ArraySchema,getItems,Schema<?> getItems()
io.swagger.v3.oas.models.parameters,Parameter,getContent,Content getContent()
io.swagger.v3.oas.models.media,MediaType,getSchema,Schema<> getSchema()
java.util.stream,Stream,collect,"R collect(Collector<? super JsonTypeValidator,A,R> p0)"
java.util.stream,Stream,map,"Stream<R> map(Function<? super MediaType,? extends R> p0)"
java.util,Collection,stream,Stream<MediaType> stream()
io.swagger.v3.oas.models.media,Schema,getAdditionalProperties,Object getAdditionalProperties()
java.lang,Boolean,equals,boolean equals(Object p0)
io.swagger.v3.oas.models.parameters,Parameter,getAllowReserved,Boolean getAllowReserved()
io.swagger.v3.oas.models.parameters,RequestBody,getContent,Content getContent()
java.util,LinkedHashMap,entrySet,"Set<Entry<String,MediaType>> entrySet()"
java.util,Entry,getValue,MediaType getValue()
java.util,Map,entrySet,"Set<Entry<String,Schema<>>> entrySet()"
io.swagger.v3.oas.models.media,Schema,getProperties,Map<> getProperties()
java.util,Entry,getValue,Schema<> getValue()
io.swagger.v3.oas.models.media,MediaType,getEncoding,"Map<String,Encoding> getEncoding()"
java.util,Map,get,Encoding get(Object p0)
io.swagger.v3.oas.models.media,Encoding,getContentType,String getContentType()
io.swagger.v3.oas.models.parameters,RequestBody,getRequired,Boolean getRequired()
io.swagger.v3.oas.models,Operation,getParameters,List<Parameter> getParameters()
io.swagger.v3.oas.models,PathItem,getParameters,List<Parameter> getParameters()
io.swagger.v3.oas.models,Operation,getTags,List<String> getTags()
java.util,LinkedHashMap,"LinkedHashMap<String,OperationValue>","LinkedHashMap<String,OperationValue>()"
java.util,LinkedHashMap,entrySet,"Set<Entry<String,PathItem>> entrySet()"
io.swagger.v3.oas.models,OpenAPI,getPaths,Paths getPaths()
java.util,Map,entrySet,"Set<Entry<HttpMethod,Operation>> entrySet()"
io.swagger.v3.oas.models,PathItem,readOperationsMap,"Map<HttpMethod,Operation> readOperationsMap()"
java.util,Entry,getValue,PathItem getValue()
java.util,Entry,getValue,Operation getValue()
java.util,Map,put,"OperationValue put(String p0, OperationValue p1)"
io.vertx.core.http,HttpMethod,valueOf,HttpMethod valueOf(String p0)
java.util,Entry,getKey,HttpMethod getKey()
java.util,Map,get,OperationValue get(Object p0)
java.util,Map,entrySet,"Set<Entry<String,OperationValue>> entrySet()"
java.util,Entry,getValue,OperationValue getValue()
java.lang,Class,getMethods,Method[] getMethods()
java.lang.reflect,Method,getName,String getName()
java.util,Optional,orElseGet,OperationValue orElseGet(Supplier<? extends OperationValue> p0)
java.util,Optional,ofNullable,Optional<T> ofNullable(T p0)
java.util.stream,Stream,findFirst,Optional<OperationValue> findFirst()
java.util.stream,Stream,map,"Stream<R> map(Function<? super Entry<String,OperationValue>,? extends R> p0)"
java.util.stream,Stream,filter,"Stream<Entry<String,OperationValue>> filter(Predicate<? super Entry<String,OperationValue>> p0)"
java.util,Collection,stream,"Stream<Entry<String,OperationValue>> stream()"
java.util,Entry,getValue,V getValue()
io.swagger.v3.oas.models,OpenAPI,getSecurity,List<SecurityRequirement> getSecurity()
java.util,Map,values,Collection<OperationValue> values()
java.util,ArrayList,ArrayList<Handler<>>,ArrayList<Handler<>>()
java.util,Optional,orElseGet,Route orElseGet(Supplier<? extends Route> p0)
java.util,Optional,map,"Optional<U> map(Function<? super Pattern,? extends U> p0)"
java.util.regex,Pattern,toString,String toString()
io.swagger.v3.oas.models,Operation,getSecurity,List<SecurityRequirement> getSecurity()
java.util,LinkedHashMap,keySet,Set<String> keySet()
io.swagger.v3.oas.models,Operation,getResponses,ApiResponses getResponses()
java.util,LinkedHashMap,values,Collection<ApiResponse> values()
io.swagger.v3.oas.models.responses,ApiResponse,getContent,Content getContent()
java.util,Set,isEmpty,boolean isEmpty()
java.util,Map,values,Collection<String> values()
com.networknt.schema,SchemaValidatorsConfig,SchemaValidatorsConfig,SchemaValidatorsConfig()
com.networknt.schema,SchemaValidatorsConfig,setTypeLoose,void setTypeLoose(boolean p0)
java.lang,Boolean,booleanValue,boolean booleanValue()
io.swagger.v3.parser.core.models,ParseOptions,ParseOptions,ParseOptions()
io.swagger.v3.parser.core.models,ParseOptions,setResolve,void setResolve(boolean p0)
io.swagger.v3.parser.core.models,ParseOptions,setResolveCombinators,void setResolveCombinators(boolean p0)
io.swagger.v3.parser.core.models,ParseOptions,setResolveFully,void setResolveFully(boolean p0)
io.swagger.v3.oas.models.media,Schema,getRequired,List<> getRequired()
io.swagger.v3.oas.models.parameters,Parameter,getRequired,Boolean getRequired()
io.swagger.v3.oas.models.media,ComposedSchema,getAllOf,List<Schema<>> getAllOf()
io.swagger.v3.oas.models.parameters,Parameter,getAllowEmptyValue,Boolean getAllowEmptyValue()
java.lang,Class,getEnumConstants,T[] getEnumConstants()
java.lang,String,compareToIgnoreCase,int compareToIgnoreCase(String p0)
java.lang,String,trim,String trim()
java.lang,StringBuilder,deleteCharAt,StringBuilder deleteCharAt(int p0)
java.lang,AbstractStringBuilder,length,int length()
java.lang,StringBuilder,append,"StringBuilder append(CharSequence p0, int p1, int p2)"
java.util,ArrayList,ArrayList<Parameter>,ArrayList<Parameter>(Collection<? extends Parameter> p0)
java.util,HashMap,"HashMap<String,ObjectField>","HashMap<String,ObjectField>()"
java.util,Map,put,"ObjectField put(String p0, ObjectField p1)"
com.fasterxml.jackson.databind,ObjectMapper,convertValue,"T convertValue(Object p0, Class<T> p1)"
io.swagger.v3.parser,ObjectMapperFactory,createJson,ObjectMapper createJson()
com.fasterxml.jackson.databind,JsonNode,has,boolean has(String p0)
com.fasterxml.jackson.databind.node,ObjectNode,get,JsonNode get(String p0)
com.fasterxml.jackson.databind.node,ObjectNode,fieldNames,Iterator<String> fieldNames()
java.util,Iterator,next,String next()
java.lang,Enum,equals,boolean equals(Object p0)
com.fasterxml.jackson.databind,JsonNode,getNodeType,JsonNodeType getNodeType()
com.fasterxml.jackson.databind,JsonNode,asText,String asText()
java.util.regex,Matcher,lookingAt,boolean lookingAt()
com.fasterxml.jackson.databind.node,ObjectNode,remove,JsonNode remove(String p0)
com.fasterxml.jackson.databind.node,ObjectNode,put,"ObjectNode put(String p0, String p1)"
java.util,Map,get,Schema<> get(Object p0)
io.swagger.v3.oas.models,Components,getSchemas,"Map<String,Schema<>> getSchemas()"
io.swagger.v3.oas.models,OpenAPI,getComponents,Components getComponents()
com.fasterxml.jackson.databind.node,ObjectNode,putObject,ObjectNode putObject(String p0)
com.fasterxml.jackson.databind.node,ObjectNode,set,"T set(String p0, JsonNode p1)"
java.util.stream,Stream,collect,"R collect(Collector<? super MediaType,A,R> p0)"
java.util.stream,Stream,map,"Stream<R> map(Function<? super Entry<String,MediaType>,? extends R> p0)"
java.util.stream,Stream,filter,"Stream<Entry<String,MediaType>> filter(Predicate<? super Entry<String,MediaType>> p0)"
java.util,Collection,stream,"Stream<Entry<String,MediaType>> stream()"
java.util,Map,entrySet,"Set<Entry<String,MediaType>> entrySet()"
java.util.function,Predicate,test,boolean test(String p0)
java.lang.reflect,Executable,getParameters,Parameter[] getParameters()
java.lang.reflect,Parameter,getType,Class<?> getType()
java.lang,StringBuffer,append,StringBuffer append(char p0)
java.lang,Character,toUpperCase,char toUpperCase(char p0)
io.swagger.v3.oas.models,PathItem,getExtensions,"Map<String,Object> getExtensions()"
io.swagger.v3.oas.models,Operation,getExtensions,"Map<String,Object> getExtensions()"
java.util,Map,putIfAbsent,"V putIfAbsent(K p0, V p1)"
java.util,Map,putIfAbsent,"Object putIfAbsent(String p0, Object p1)"
java.util,HashMap,"HashMap<SecurityRequirementKey,List<Handler<RoutingContext>>>","HashMap<SecurityRequirementKey,List<Handler<RoutingContext>>>()"
java.util,Map,computeIfAbsent,"List<Handler<RoutingContext>> computeIfAbsent(SecurityRequirementKey p0, Function<? super SecurityRequirementKey,? extends List<Handler<RoutingContext>>> p1)"
java.util,Optional,orElseThrow,List<Handler<RoutingContext>> orElseThrow(Supplier<? extends X> p0)
java.util,Map,get,List<Handler<RoutingContext>> get(Object p0)
java.util,Optional,orElseGet,List<Handler<RoutingContext>> orElseGet(Supplier<? extends List<Handler<RoutingContext>>> p0)
java.util.stream,Stream,collect,"R collect(Collector<? super Handler<RoutingContext>,A,R> p0)"
java.util.stream,Stream,flatMap,"Stream<R> flatMap(Function<? super List<Handler<RoutingContext>>,? extends Stream<? extends R>> p0)"
java.util.stream,Stream,map,"Stream<R> map(Function<? super SecurityRequirementKey,? extends R> p0)"
java.util,Collection,stream,Stream<SecurityRequirementKey> stream()
java.util,Collection,stream,Stream<E> stream()
java.util.stream,Stream,filter,Stream<List<Handler<RoutingContext>>> filter(Predicate<? super List<Handler<RoutingContext>>> p0)
java.util.stream,Stream,collect,"R collect(Collector<? super SecurityRequirementKey,A,R> p0)"
java.util.stream,Stream,flatMap,"Stream<R> flatMap(Function<? super SecurityRequirement,? extends Stream<? extends R>> p0)"
java.util,Collection,stream,Stream<SecurityRequirement> stream()
java.util.stream,Stream,flatMap,"Stream<R> flatMap(Function<? super Entry<String,List<String>>,? extends Stream<? extends R>> p0)"
java.util,Collection,stream,"Stream<Entry<String,List<String>>> stream()"
java.util,LinkedHashMap,entrySet,"Set<Entry<String,List<String>>> entrySet()"
java.util.stream,Stream,of,Stream<T> of(T p0)
java.util.stream,Stream,map,"Stream<R> map(Function<? super String,? extends R> p0)"
java.util,ArrayList,ArrayList<SecurityRequirementKey>,ArrayList<SecurityRequirementKey>()
java.util,HashMap,"HashMap<String,RequestParameter>","HashMap<String,RequestParameter>()"
java.util,Map,putAll,"void putAll(Map<? extends String,? extends RequestParameter> p0)"
java.util,Map,put,"RequestParameter put(String p0, RequestParameter p1)"
java.util,Map,get,RequestParameter get(Object p0)
java.util.stream,Stream,collect,"R collect(Collector<? super Object,A,R> p0)"
java.util.stream,Stream,map,"Stream<R> map(Function<? super RequestParameter,? extends R> p0)"
java.util,Collection,stream,Stream<RequestParameter> stream()
java.util.stream,Stream,collect,"R collect(Collector<? super Entry<String,RequestParameter>,A,R> p0)"
java.util,Collection,stream,"Stream<Entry<String,RequestParameter>> stream()"
java.util.stream,Collector,of,"Collector<T,R,R> of(Supplier<R> p0, BiConsumer<R,T> p1, BinaryOperator<R> p2, Characteristics[] p3)"
java.util,Map,entrySet,"Set<Entry<String,RequestParameter>> entrySet()"
java.util,Entry,getValue,RequestParameter getValue()
java.lang,String,split,"String[] split(String p0, int p1)"
java.lang,Boolean,valueOf,Boolean valueOf(String p0)
java.util,ArrayList,ArrayList<RequestParameter>,ArrayList<RequestParameter>()
java.util,HashMap,"HashMap<String,ParameterValidationRule>","HashMap<String,ParameterValidationRule>()"
java.util,ArrayList,ArrayList<CustomValidator>,ArrayList<CustomValidator>()
java.util,Map,values,Collection<ParameterValidationRule> values()
java.util,HashMap,"HashMap<String,List<String>>","HashMap<String,List<String>>()"
java.util,Map,get,List<String> get(Object p0)
java.util,Map,put,"List<String> put(String p0, List<String> p1)"
java.util,Map,remove,List<String> remove(Object p0)
java.util,Entry,setValue,List<String> setValue(List<String> p0)
io.vertx.core.http,CaseInsensitiveHeaders,addAll,MultiMap addAll(MultiMap p0)
io.vertx.core,MultiMap,remove,MultiMap remove(String p0)
java.util,Entry,setValue,String setValue(String p0)
java.util,Map,entrySet,"Set<Entry<String,Pattern>> entrySet()"
java.util,Entry,getValue,Pattern getValue()
java.util,Map,put,"ParameterValidationRule put(String p0, ParameterValidationRule p1)"
java.util,Map,put,"Pattern put(String p0, Pattern p1)"
com.networknt.schema,BaseJsonValidator,validate,Set<ValidationMessage> validate(JsonNode p0)
com.fasterxml.jackson.databind.node,JsonNodeFactory,textNode,TextNode textNode(String p0)
java.util,Iterator,next,ValidationMessage next()
java.util,Set,iterator,Iterator<ValidationMessage> iterator()
com.networknt.schema,ValidationMessage,getPath,String getPath()
com.networknt.schema,ValidationMessage,getMessage,String getMessage()
com.networknt.schema,JsonSchemaFactory,getSchema,"JsonSchema getSchema(JsonNode p0, SchemaValidatorsConfig p1)"
com.networknt.schema,JsonSchemaFactory,getInstance,JsonSchemaFactory getInstance()
java.lang,Double,parseDouble,double parseDouble(String p0)
java.util.function,Function,apply,Number apply(String p0)
java.lang,Class,cast,Object cast(Object p0)
java.lang,Number,doubleValue,double doubleValue()
javax.xml.validation,Validator,setProperty,"void setProperty(String p0, Object p1)"
javax.xml.parsers,DocumentBuilderFactory,newDocumentBuilder,DocumentBuilder newDocumentBuilder()
javax.xml.parsers,DocumentBuilder,parse,Document parse(String p0)
javax.xml.validation,Validator,validate,void validate(Source p0)
javax.xml.transform.dom,DOMSource,DOMSource,DOMSource(Node p0)
javax.xml.transform.stream,StreamSource,StreamSource,StreamSource(Reader p0)
javax.xml.validation,Schema,newValidator,Validator newValidator()
javax.xml.validation,SchemaFactory,newSchema,Schema newSchema(Source p0)
javax.xml.parsers,DocumentBuilderFactory,newInstance,DocumentBuilderFactory newInstance()
javax.xml.parsers,DocumentBuilderFactory,setFeature,"void setFeature(String p0, boolean p1)"
javax.xml.parsers,DocumentBuilderFactory,setXIncludeAware,void setXIncludeAware(boolean p0)
javax.xml.parsers,DocumentBuilderFactory,setExpandEntityReferences,void setExpandEntityReferences(boolean p0)
javax.xml.validation,SchemaFactory,newInstance,SchemaFactory newInstance(String p0)
javax.xml.validation,SchemaFactory,setProperty,"void setProperty(String p0, Object p1)"
java.util.function,Consumer,accept,void accept(Buffer p0)
io.vertx.core.http,HttpClientRequest,end,void end(Buffer p0)
io.vertx.core.buffer,Buffer,toJsonObject,JsonObject toJsonObject()
io.vertx.core,AsyncResult,result,HttpResponse<Buffer> result()
java.lang,String,valueOf,String valueOf(Object p0)
java.util,Collection,stream,Stream<Object> stream()
java.util.stream,Stream,map,"Stream<R> map(Function<? super Entry<String,Object>,? extends R> p0)"
java.util,Collection,stream,"Stream<Entry<String,Object>> stream()"
java.lang,String,concat,String concat(String p0)
java.net,URLEncoder,encode,"String encode(String p0, String p1)"
io.swagger.v3.oas.models,PathItem,getGet,Operation getGet()
java.util,LinkedHashMap,get,PathItem get(Object p0)
java.lang,Integer,toString,String toString()
io.swagger.v3.oas.models,PathItem,getPost,Operation getPost()
io.swagger.v3.oas.models,Operation,setParameters,void setParameters(List<Parameter> p0)
java.util,ArrayList,ArrayList<Integer>,ArrayList<Integer>()
java.lang,Boolean,toString,String toString()
java.lang,Float,toString,String toString()
io.netty.handler.codec.http,QueryStringEncoder,QueryStringEncoder,QueryStringEncoder(String p0)
io.netty.handler.codec.http,QueryStringEncoder,addParam,"void addParam(String p0, String p1)"
java.net,URI,getRawQuery,String getRawQuery()
io.netty.handler.codec.http,QueryStringEncoder,toUri,URI toUri()
io.vertx.core,AsyncResult,result,HttpResponse<> result()
io.vertx.core.json,JsonObject,equals,boolean equals(Object p0)
java.util,ArrayList,ArrayList<Object>,ArrayList<Object>()
io.vertx.core.json,JsonObject,putNull,JsonObject putNull(String p0)
io.swagger.v3.parser,OpenAPIV3Parser,readContents,"SwaggerParseResult readContents(String p0, List<AuthorizationValue> p1, ParseOptions p2)"
java.nio.file,Files,readAllLines,"List<String> readAllLines(Path p0, Charset p1)"
java.nio.file,Paths,get,"Path get(String p0, String[] p1)"
java.util,Optional,orElse,Operation orElse(Operation p0)
java.util.stream,Stream,findFirst,Optional<Operation> findFirst()
java.util.stream,Stream,filter,Stream<Operation> filter(Predicate<? super Operation> p0)
java.util.stream,Stream,flatMap,"Stream<R> flatMap(Function<? super PathItem,? extends Stream<? extends R>> p0)"
java.util,Collection,stream,Stream<PathItem> stream()
java.util,LinkedHashMap,values,Collection<PathItem> values()
java.util,Collection,stream,Stream<Operation> stream()
io.swagger.v3.oas.models,PathItem,readOperations,List<Operation> readOperations()
java.util,Optional,orElse,String orElse(String p0)
java.util.stream,Stream,findFirst,Optional<String> findFirst()
java.util.stream,Stream,map,"Stream<R> map(Function<? super SimpleImmutableEntry<String,Operation>,? extends R> p0)"
java.util.stream,Stream,filter,"Stream<SimpleImmutableEntry<String,Operation>> filter(Predicate<? super SimpleImmutableEntry<String,Operation>> p0)"
java.util.stream,Stream,flatMap,"Stream<R> flatMap(Function<? super Entry<String,PathItem>,? extends Stream<? extends R>> p0)"
java.util,Collection,stream,"Stream<Entry<String,PathItem>> stream()"
java.util.stream,Stream,map,"Stream<R> map(Function<? super Operation,? extends R> p0)"
java.util,SimpleImmutableEntry,"SimpleImmutableEntry<K,V>","SimpleImmutableEntry<K,V>(K p0, V p1)"
java.util,SimpleImmutableEntry,getValue,Operation getValue()
java.util,SimpleImmutableEntry,getKey,String getKey()
java.util,Optional,get,Pattern get()
java.util,Optional,get,String get()
java.util.stream,Stream,map,"Stream<R> map(Function<? super Entry<String,String>,? extends R> p0)"
java.util.stream,Stream,filter,"Stream<Entry<String,String>> filter(Predicate<? super Entry<String,String>> p0)"
java.util,Collection,stream,"Stream<Entry<String,String>> stream()"
java.util,Entry,getKey,K getKey()
java.net,URLDecoder,decode,"String decode(String p0, String p1)"
java.lang,Throwable,toString,String toString()
java.util.stream,Stream,of,Stream<T> of(T[] p0)
java.nio.file,Path,toFile,File toFile()
java.util.stream,Stream,map,"Stream<R> map(Function<? super Route,? extends R> p0)"
java.util,Collection,stream,Stream<Route> stream()
io.netty.handler.codec.http,QueryStringEncoder,toString,String toString()
java.lang,Double,toString,String toString()
java.util,HashMap,"HashMap<ParameterType,List<String>>","HashMap<ParameterType,List<String>>()"
java.util,Map,put,"List<String> put(ParameterType p0, List<String> p1)"
java.util,Date,Date,Date()
java.util.concurrent,ThreadLocalRandom,nextInt,"int nextInt(int p0, int p1)"
java.util.concurrent,ThreadLocalRandom,current,ThreadLocalRandom current()
java.lang,Iterable,forEach,void forEach(Consumer<? super String> p0)
java.util.stream,Stream,collect,"R collect(Collector<? super Integer,A,R> p0)"
java.io,FileOutputStream,FileOutputStream,FileOutputStream(File p0)
java.io,OutputStream,write,void write(byte[] p0)
java.io,File,getCanonicalPath,String getCanonicalPath()
org.xml.sax,SAXParseException,getSystemId,String getSystemId()
org.xml.sax,SAXException,getMessage,String getMessage()
io.vertx.core,Handler,handle,void handle(AsyncResult<OperationResponse> p0)
io.vertx.serviceproxy,ServiceBinder,setAddress,ServiceBinder setAddress(String p0)
io.vertx.serviceproxy,ServiceBinder,ServiceBinder,ServiceBinder(Vertx p0)
io.vertx.serviceproxy,ServiceBinder,register,"MessageConsumer<JsonObject> register(Class<T> p0, T p1)"
io.vertx.core.json,JsonObject,getInteger,Integer getInteger(String p0)
io.vertx.core.json,JsonObject,getLong,Long getLong(String p0)
io.vertx.core.json,JsonObject,getDouble,Double getDouble(String p0)
io.vertx.serviceproxy.generator,GeneratorUtils,GeneratorUtils,GeneratorUtils()
io.vertx.serviceproxy.generator,ServiceProxyHandlerGen,ServiceProxyHandlerGen,ServiceProxyHandlerGen(GeneratorUtils p0)
io.vertx.serviceproxy.generator,GeneratorUtils,loadResource,"String loadResource(String p0, String p1)"
io.vertx.codegen,ClassModel,getIfaceSimpleName,String getIfaceSimpleName()
java.util.stream,Stream,concat,"Stream<T> concat(Stream<? extends T> p0, Stream<? extends T> p1)"
java.util.stream,Stream,map,"Stream<R> map(Function<? super ClassTypeInfo,? extends R> p0)"
java.util.stream,Stream,filter,Stream<ClassTypeInfo> filter(Predicate<? super ClassTypeInfo> p0)
java.util,Collection,stream,Stream<ClassTypeInfo> stream()
io.vertx.codegen,ClassModel,getImportedTypes,Set<ClassTypeInfo> getImportedTypes()
io.vertx.codegen.type,ClassTypeInfo,getPackageName,String getPackageName()
io.vertx.codegen.type,TypeInfo,toString,String toString()
io.vertx.serviceproxy.generator.model,ProxyMethodInfo,isProxyClose,boolean isProxyClose()
io.vertx.serviceproxy.generator,ServiceProxyHandlerGen,generateActionSwitchEntry,"void generateActionSwitchEntry(ProxyMethodInfo p0, CodeWriter p1)"
io.vertx.codegen.writer,CodeWriter,indent,CodeWriter indent()
io.vertx.codegen.writer,CodeWriter,code,CodeWriter code(String p0)
io.vertx.codegen.writer,CodeWriter,stmt,CodeWriter stmt(String p0)
io.vertx.codegen.writer,CodeWriter,unindent,CodeWriter unindent()
io.vertx.codegen,MethodInfo,getName,String getName()
io.vertx.codegen.writer,CodeWriter,writeSeq,"CodeWriter writeSeq(Stream<String> p0, String p1)"
java.util.stream,Stream,map,"Stream<R> map(Function<? super ParamInfo,? extends R> p0)"
java.util,Collection,stream,Stream<ParamInfo> stream()
io.vertx.codegen.writer,CodeWriter,indentation,String indentation()
java.io,PrintWriter,write,void write(String p0)
io.vertx.codegen,ParamInfo,getName,String getName()
io.vertx.codegen,ParamInfo,getType,TypeInfo getType()
io.vertx.codegen.type,TypeInfo,getName,String getName()
io.vertx.codegen.type,TypeInfo,getKind,ClassKind getKind()
io.vertx.codegen.type,ParameterizedTypeInfo,getArg,TypeInfo getArg(int p0)
io.vertx.serviceproxy.generator.model,ProxyMethodInfo,ProxyMethodInfo,"ProxyMethodInfo(Set<ClassTypeInfo> p0, String p1, TypeInfo p2, Text p3, boolean p4, boolean p5, List<ParamInfo> p6, String p7, Doc p8, boolean p9, boolean p10, List<Method> p11, boolean p12, boolean p13, boolean p14, Text p15)"
io.vertx.codegen,MethodInfo,getOwnerTypes,Set<ClassTypeInfo> getOwnerTypes()
io.vertx.codegen,MethodInfo,getReturnType,TypeInfo getReturnType()
io.vertx.codegen,MethodInfo,getReturnDescription,Text getReturnDescription()
io.vertx.codegen,MethodInfo,isFluent,boolean isFluent()
io.vertx.codegen,MethodInfo,isCacheReturn,boolean isCacheReturn()
io.vertx.codegen,MethodInfo,getParams,List<ParamInfo> getParams()
io.vertx.codegen,MethodInfo,getComment,String getComment()
io.vertx.codegen,MethodInfo,getDoc,Doc getDoc()
io.vertx.codegen,MethodInfo,isStaticMethod,boolean isStaticMethod()
io.vertx.codegen,MethodInfo,isDefaultMethod,boolean isDefaultMethod()
io.vertx.codegen,MethodInfo,getTypeParams,List<Method> getTypeParams()
io.vertx.serviceproxy.generator.model,ProxyMethodInfo,isProxyIgnore,boolean isProxyIgnore()
io.vertx.codegen,MethodInfo,isDeprecated,boolean isDeprecated()
io.vertx.codegen,MethodInfo,getDeprecatedDesc,Text getDeprecatedDesc()
io.vertx.serviceproxy.generator.model,ProxyModel,ProxyModel,"ProxyModel(ProcessingEnvironment p0, TypeElement p1)"
io.vertx.serviceproxy.generator.model,ProxyModel,checkParamType,"void checkParamType(ExecutableElement p0, TypeMirror p1, TypeInfo p2, int p3, int p4, boolean p5)"
io.vertx.serviceproxy.generator.model,ProxyModel,createMethodInfo,"MethodInfo createMethodInfo(Set<ClassTypeInfo> p0, String p1, String p2, Doc p3, TypeInfo p4, Text p5, boolean p6, boolean p7, List<ParamInfo> p8, ExecutableElement p9, boolean p10, boolean p11, ArrayList<Method> p12, TypeElement p13, boolean p14, Text p15)"
io.vertx.codegen,GenException,GenException,"GenException(Element p0, String p1)"
io.vertx.codegen,MethodInfo,getKind,MethodKind getKind()
javax.lang.model.element,Element,getAnnotation,A getAnnotation(Class<A> p0)
io.vertx.test.codegen,GeneratorHelper,generateClass,"M generateClass(Function<CodeGen,M> p0, Class<> p1, Class<> p2, Class<>[] p3)"
io.vertx.test.codegen,GeneratorHelper,GeneratorHelper,GeneratorHelper()
io.vertx.codegen,CodeGen,getModel,"Model getModel(String p0, String p1)"
java.lang,Class,getCanonicalName,String getCanonicalName()
io.vertx.codegen,ClassModel,getIfaceFQCN,String getIfaceFQCN()
java.lang,Class,getSimpleName,String getSimpleName()
java.util.stream,Stream,reduce,"String reduce(String p0, BinaryOperator<String> p1)"
java.util.stream,Stream,collect,"R collect(Collector<? super SimpleEntry<String,RequestParameterImpl>,A,R> p0)"
java.util.stream,Collectors,toMap,"Collector<T,?,Map<K,U>> toMap(Function<? super T,? extends K> p0, Function<? super T,? extends U> p1)"
java.util,SimpleEntry,"SimpleEntry<K,V>","SimpleEntry<K,V>(K p0, V p1)"
java.util,SimpleEntry,getKey,K getKey()
java.util,SimpleEntry,getValue,V getValue()
io.vertx.serviceproxy,ServiceBinder,unregister,void unregister(MessageConsumer<JsonObject> p0)
io.vertx.core.json,JsonObject,put,"JsonObject put(String p0, Double p1)"
io.vertx.core.json,JsonObject,put,"JsonObject put(String p0, Float p1)"
io.vertx.core.json,JsonObject,put,"JsonObject put(String p0, Enum<> p1)"
io.vertx.core.json,JsonArray,add,JsonArray add(Long p0)
io.vertx.core.json,JsonArray,add,JsonArray add(Object p0)
java.util.stream,Stream,collect,"R collect(Collector<? super JsonObject,A,R> p0)"
java.util.stream,Stream,map,"Stream<R> map(Function<? super FilterData,? extends R> p0)"
java.util,Collection,stream,Stream<FilterData> stream()
java.util,ArrayList,ArrayList<Byte>,ArrayList<Byte>(Collection<? extends Byte> p0)
java.util,ArrayList,ArrayList<Short>,ArrayList<Short>(Collection<? extends Short> p0)
java.util,ArrayList,ArrayList<Integer>,ArrayList<Integer>(Collection<? extends Integer> p0)
java.util,ArrayList,ArrayList<Long>,ArrayList<Long>(Collection<? extends Long> p0)
java.util,ArrayList,ArrayList<JsonObject>,ArrayList<JsonObject>(Collection<? extends JsonObject> p0)
java.util,ArrayList,ArrayList<JsonArray>,ArrayList<JsonArray>(Collection<? extends JsonArray> p0)
java.util,Set,iterator,Iterator<String> iterator()
java.util,Collection,iterator,Iterator<String> iterator()
java.util,Iterator,next,Byte next()
java.util,Collection,iterator,Iterator<Byte> iterator()
java.util,Map,values,Collection<Byte> values()
java.util,Iterator,next,Short next()
java.util,Collection,iterator,Iterator<Short> iterator()
java.util,Map,values,Collection<Short> values()
java.util,Iterator,next,Integer next()
java.util,Collection,iterator,Iterator<Integer> iterator()
java.util,Map,values,Collection<Integer> values()
java.util,Iterator,next,Long next()
java.util,Collection,iterator,Iterator<Long> iterator()
java.util,Map,values,Collection<Long> values()
java.util,Iterator,next,JsonObject next()
java.util,Collection,iterator,Iterator<JsonObject> iterator()
java.util,Map,values,Collection<JsonObject> values()
java.util,Iterator,next,JsonArray next()
java.util,Collection,iterator,Iterator<JsonArray> iterator()
java.util,Map,values,Collection<JsonArray> values()
java.lang,IllegalArgumentException,IllegalArgumentException,IllegalArgumentException()
io.vertx.core.json,JsonObject,toString,String toString()
io.vertx.serviceproxy,ProxyHandler,ProxyHandler,ProxyHandler()
io.vertx.core.eventbus,EventBus,registerDefaultCodec,"EventBus registerDefaultCodec(Class<T> p0, MessageCodec<T,?> p1)"
io.vertx.serviceproxy,ServiceExceptionMessageCodec,ServiceExceptionMessageCodec,ServiceExceptionMessageCodec()
io.vertx.serviceproxy,ProxyHandler,close,void close()
io.vertx.serviceproxy,ServiceException,ServiceException,"ServiceException(int p0, String p1)"
io.vertx.core,AsyncResult,result,OperationResponse result()
java.util,Optional,orElse,Integer orElse(Integer p0)
java.util,Optional,map,"Optional<U> map(Function<? super Long,? extends U> p0)"
java.lang,Long,intValue,int intValue()
java.util,Optional,orElse,Byte orElse(Byte p0)
java.util,Optional,orElse,Short orElse(Short p0)
java.util,Optional,orElse,Long orElse(Long p0)
java.util,Optional,orElse,Float orElse(Float p0)
java.util,Optional,orElse,Double orElse(Double p0)
java.lang,Long,byteValue,byte byteValue()
java.lang,Long,shortValue,short shortValue()
java.lang,Long,longValue,long longValue()
java.util,Optional,map,"Optional<U> map(Function<? super Double,? extends U> p0)"
java.lang,Double,floatValue,float floatValue()
java.lang,Double,doubleValue,double doubleValue()
java.util,Optional,orElse,SomeEnum orElse(SomeEnum p0)
java.util,Optional,map,"Optional<U> map(Function<? super String,? extends U> p0)"
java.util,Optional,orElse,FilterData orElse(FilterData p0)
java.util,Optional,map,"Optional<U> map(Function<? super JsonObject,? extends U> p0)"
io.vertx.serviceproxy,HelperUtils,convertList,List<T> convertList(List<> p0)
java.util,Optional,orElse,List<Byte> orElse(List<Byte> p0)
java.util,Optional,orElse,List<Short> orElse(List<Short> p0)
java.util,Optional,orElse,List<Integer> orElse(List<Integer> p0)
java.util,Optional,orElse,List<Long> orElse(List<Long> p0)
java.util,Optional,orElse,List<FilterData> orElse(List<FilterData> p0)
java.util,Optional,orElse,List<> orElse(List<> p0)
java.util,Optional,map,"Optional<U> map(Function<? super JsonArray,? extends U> p0)"
io.vertx.core.json,JsonArray,getList,List<> getList()
java.util.stream,Stream,collect,"R collect(Collector<? super Byte,A,R> p0)"
java.lang,Number,byteValue,byte byteValue()
java.util.stream,Stream,collect,"R collect(Collector<? super Short,A,R> p0)"
java.lang,Number,shortValue,short shortValue()
java.util.stream,Stream,collect,"R collect(Collector<? super Long,A,R> p0)"
java.lang,Number,longValue,long longValue()
java.util.stream,Stream,collect,"R collect(Collector<? super FilterData,A,R> p0)"
io.vertx.serviceproxy,HelperUtils,convertSet,Set<T> convertSet(List<> p0)
java.util,Optional,orElse,Set<Byte> orElse(Set<Byte> p0)
java.util,Optional,orElse,Set<Short> orElse(Set<Short> p0)
java.util,Optional,orElse,Set<Integer> orElse(Set<Integer> p0)
java.util,Optional,orElse,Set<Long> orElse(Set<Long> p0)
java.util,Optional,orElse,Set<FilterData> orElse(Set<FilterData> p0)
java.util.stream,Collectors,toSet,"Collector<T,?,Set<T>> toSet()"
io.vertx.serviceproxy,HelperUtils,convertMap,"Map<String,T> convertMap(Map<> p0)"
java.util,Optional,orElse,"Map<String,Byte> orElse(Map<String,Byte> p0)"
java.util,Optional,orElse,"Map<String,Short> orElse(Map<String,Short> p0)"
java.util,Optional,orElse,"Map<String,Integer> orElse(Map<String,Integer> p0)"
java.util,Optional,orElse,"Map<String,Long> orElse(Map<String,Long> p0)"
java.util,Optional,orElse,"Map<String,Object> orElse(Map<String,Object> p0)"
java.util.stream,Stream,collect,"R collect(Collector<? super Entry<String,Object>,A,R> p0)"
java.lang,Iterable,forEach,void forEach(Consumer<? super Object> p0)
java.util,ArrayList,add,boolean add(String p0)
io.vertx.core.file,FileSystem,open,"FileSystem open(String p0, OpenOptions p1, Handler<AsyncResult<AsyncFile>> p2)"
io.vertx.core.file,OpenOptions,OpenOptions,OpenOptions()
io.vertx.core,AsyncResult,result,AsyncFile result()
io.vertx.core,AsyncResult,result,HttpResponse<JsonObject> result()
io.vertx.core,AsyncResult,result,HttpResponse<User> result()
io.vertx.core,AsyncResult,result,HttpResponse<Void> result()
io.vertx.core.net,SocketAddress,domainSocketAddress,SocketAddress domainSocketAddress(String p0)
java.util.function,Function,apply,R apply(T p0)
java.util.function,Function,apply,String apply(Buffer p0)
java.util.function,Function,apply,R apply(Buffer p0)
io.vertx.core.http.impl,HttpClientImpl,getOptions,HttpClientOptions getOptions()
io.vertx.core.http,HttpClientOptions,HttpClientOptions,HttpClientOptions(HttpClientOptions p0)
io.vertx.core.http,HttpClientOptions,HttpClientOptions,HttpClientOptions(JsonObject p0)
io.vertx.core.http,HttpClientOptions,toJson,JsonObject toJson()
io.vertx.core.http,HttpClientOptions,setMaxRedirects,HttpClientOptions setMaxRedirects(int p0)
io.vertx.core.http,HttpClientOptions,setSendBufferSize,HttpClientOptions setSendBufferSize(int p0)
io.vertx.core.http,HttpClientOptions,setReceiveBufferSize,HttpClientOptions setReceiveBufferSize(int p0)
io.vertx.core.http,HttpClientOptions,setReuseAddress,HttpClientOptions setReuseAddress(boolean p0)
io.vertx.core.http,HttpClientOptions,setTrafficClass,HttpClientOptions setTrafficClass(int p0)
io.vertx.core.http,HttpClientOptions,setTcpNoDelay,HttpClientOptions setTcpNoDelay(boolean p0)
io.vertx.core.http,HttpClientOptions,setTcpKeepAlive,HttpClientOptions setTcpKeepAlive(boolean p0)
io.vertx.core.http,HttpClientOptions,setSoLinger,HttpClientOptions setSoLinger(int p0)
io.vertx.core.http,HttpClientOptions,setUsePooledBuffers,HttpClientOptions setUsePooledBuffers(boolean p0)
io.vertx.core.http,HttpClientOptions,setIdleTimeout,HttpClientOptions setIdleTimeout(int p0)
io.vertx.core.http,HttpClientOptions,setIdleTimeoutUnit,HttpClientOptions setIdleTimeoutUnit(TimeUnit p0)
io.vertx.core.http,HttpClientOptions,setKeyCertOptions,HttpClientOptions setKeyCertOptions(KeyCertOptions p0)
io.vertx.core.http,HttpClientOptions,setKeyStoreOptions,HttpClientOptions setKeyStoreOptions(JksOptions p0)
io.vertx.core.http,HttpClientOptions,setPfxKeyCertOptions,HttpClientOptions setPfxKeyCertOptions(PfxOptions p0)
io.vertx.core.http,HttpClientOptions,setTrustOptions,HttpClientOptions setTrustOptions(TrustOptions p0)
io.vertx.core.http,HttpClientOptions,setPemKeyCertOptions,HttpClientOptions setPemKeyCertOptions(PemKeyCertOptions p0)
io.vertx.core.http,HttpClientOptions,setTrustStoreOptions,HttpClientOptions setTrustStoreOptions(JksOptions p0)
io.vertx.core.http,HttpClientOptions,setPfxTrustOptions,HttpClientOptions setPfxTrustOptions(PfxOptions p0)
io.vertx.core.http,HttpClientOptions,addEnabledCipherSuite,HttpClientOptions addEnabledCipherSuite(String p0)
io.vertx.core.http,HttpClientOptions,addCrlPath,HttpClientOptions addCrlPath(String p0)
io.vertx.core.http,HttpClientOptions,addCrlValue,HttpClientOptions addCrlValue(Buffer p0)
io.vertx.core.http,HttpClientOptions,setTrustAll,HttpClientOptions setTrustAll(boolean p0)
io.vertx.core.http,HttpClientOptions,setMaxPoolSize,HttpClientOptions setMaxPoolSize(int p0)
io.vertx.core.http,HttpClientOptions,setHttp2MultiplexingLimit,HttpClientOptions setHttp2MultiplexingLimit(int p0)
io.vertx.core.http,HttpClientOptions,setHttp2MaxPoolSize,HttpClientOptions setHttp2MaxPoolSize(int p0)
io.vertx.core.http,HttpClientOptions,setHttp2ConnectionWindowSize,HttpClientOptions setHttp2ConnectionWindowSize(int p0)
io.vertx.core.http,HttpClientOptions,setPipelining,HttpClientOptions setPipelining(boolean p0)
io.vertx.core.http,HttpClientOptions,setPipeliningLimit,HttpClientOptions setPipeliningLimit(int p0)
io.vertx.core.http,HttpClientOptions,setVerifyHost,HttpClientOptions setVerifyHost(boolean p0)
io.vertx.core.http,HttpClientOptions,setTryUseCompression,HttpClientOptions setTryUseCompression(boolean p0)
io.vertx.core.http,HttpClientOptions,setSendUnmaskedFrames,HttpClientOptions setSendUnmaskedFrames(boolean p0)
io.vertx.core.http,HttpClientOptions,setMaxWebSocketFrameSize,HttpClientOptions setMaxWebSocketFrameSize(int p0)
io.vertx.core.http,HttpClientOptions,setDefaultHost,HttpClientOptions setDefaultHost(String p0)
io.vertx.core.http,HttpClientOptions,setMaxChunkSize,HttpClientOptions setMaxChunkSize(int p0)
io.vertx.core.http,HttpClientOptions,setMaxHeaderSize,HttpClientOptions setMaxHeaderSize(int p0)
io.vertx.core.http,HttpClientOptions,setMaxWaitQueueSize,HttpClientOptions setMaxWaitQueueSize(int p0)
io.vertx.core.http,HttpClientOptions,setSslEngineOptions,HttpClientOptions setSslEngineOptions(SSLEngineOptions p0)
io.vertx.core.http,HttpClientOptions,setJdkSslEngineOptions,HttpClientOptions setJdkSslEngineOptions(JdkSSLEngineOptions p0)
io.vertx.core.http,HttpClientOptions,setOpenSslEngineOptions,HttpClientOptions setOpenSslEngineOptions(OpenSSLEngineOptions p0)
io.vertx.core.http,HttpClientOptions,setHttp2ClearTextUpgrade,HttpClientOptions setHttp2ClearTextUpgrade(boolean p0)
io.vertx.core.http,HttpClientOptions,setAlpnVersions,HttpClientOptions setAlpnVersions(List<HttpVersion> p0)
io.vertx.core.http,HttpClientOptions,setMetricsName,HttpClientOptions setMetricsName(String p0)
io.vertx.core.http,HttpClientOptions,setProxyOptions,HttpClientOptions setProxyOptions(ProxyOptions p0)
io.vertx.core.http,HttpClientOptions,setLocalAddress,HttpClientOptions setLocalAddress(String p0)
io.vertx.core.http,HttpClientOptions,setLogActivity,HttpClientOptions setLogActivity(boolean p0)
io.vertx.core.http,HttpClientOptions,addEnabledSecureTransportProtocol,HttpClientOptions addEnabledSecureTransportProtocol(String p0)
io.vertx.core.http,HttpClientOptions,removeEnabledSecureTransportProtocol,HttpClientOptions removeEnabledSecureTransportProtocol(String p0)
io.vertx.core.http,HttpClientOptions,setEnabledSecureTransportProtocols,HttpClientOptions setEnabledSecureTransportProtocols(Set<String> p0)
io.vertx.core.http,HttpClientOptions,setReusePort,HttpClientOptions setReusePort(boolean p0)
io.vertx.core.http,HttpClientOptions,setTcpFastOpen,HttpClientOptions setTcpFastOpen(boolean p0)
io.vertx.core.http,HttpClientOptions,setTcpCork,HttpClientOptions setTcpCork(boolean p0)
io.vertx.core.http,HttpClientOptions,setTcpQuickAck,HttpClientOptions setTcpQuickAck(boolean p0)
io.vertx.core.http,HttpClientOptions,setHttp2KeepAliveTimeout,HttpClientOptions setHttp2KeepAliveTimeout(int p0)
io.vertx.core.http,HttpClientOptions,setForceSni,HttpClientOptions setForceSni(boolean p0)
io.vertx.core.http,HttpClientOptions,setDecoderInitialBufferSize,HttpClientOptions setDecoderInitialBufferSize(int p0)
io.vertx.core.http,HttpClientOptions,setPoolCleanerPeriod,HttpClientOptions setPoolCleanerPeriod(int p0)
io.vertx.core.http,HttpClientOptions,setKeepAliveTimeout,HttpClientOptions setKeepAliveTimeout(int p0)
io.vertx.core.http,HttpClientOptions,setMaxWebSocketMessageSize,HttpClientOptions setMaxWebSocketMessageSize(int p0)
io.vertx.core.http,HttpClientOptions,setMaxInitialLineLength,HttpClientOptions setMaxInitialLineLength(int p0)
io.vertx.core.http,HttpClientOptions,setInitialSettings,HttpClientOptions setInitialSettings(Http2Settings p0)
io.vertx.core.http,HttpClientOptions,setSslHandshakeTimeout,HttpClientOptions setSslHandshakeTimeout(long p0)
io.vertx.core.http,HttpClientOptions,setSslHandshakeTimeoutUnit,HttpClientOptions setSslHandshakeTimeoutUnit(TimeUnit p0)
io.vertx.core.http,HttpClientOptions,setTryUsePerFrameWebSocketCompression,HttpClientOptions setTryUsePerFrameWebSocketCompression(boolean p0)
io.vertx.core.http,HttpClientOptions,setTryUsePerMessageWebSocketCompression,HttpClientOptions setTryUsePerMessageWebSocketCompression(boolean p0)
io.vertx.core.http,HttpClientOptions,setWebSocketCompressionLevel,HttpClientOptions setWebSocketCompressionLevel(int p0)
io.vertx.core.http,HttpClientOptions,setWebSocketCompressionAllowClientNoContext,HttpClientOptions setWebSocketCompressionAllowClientNoContext(boolean p0)
io.vertx.core.http,HttpClientOptions,setWebSocketCompressionRequestServerNoContext,HttpClientOptions setWebSocketCompressionRequestServerNoContext(boolean p0)
io.vertx.core.impl.launcher.commands,VersionCommand,getVersion,String getVersion()
java.util.concurrent,ConcurrentHashMap,"ConcurrentHashMap<Key,Cookie>","ConcurrentHashMap<Key,Cookie>()"
java.util.concurrent,ConcurrentSkipListMap,"ConcurrentSkipListMap<Key,Cookie>","ConcurrentSkipListMap<Key,Cookie>()"
java.util,TreeMap,"TreeMap<String,Cookie>","TreeMap<String,Cookie>()"
io.netty.handler.codec.http.cookie,Cookie,isSecure,boolean isSecure()
io.netty.handler.codec.http.cookie,Cookie,path,String path()
java.util,TreeMap,put,"Cookie put(String p0, Cookie p1)"
java.util.concurrent,ConcurrentHashMap,values,Collection<Cookie> values()
java.util.function,Consumer,accept,void accept(Cookie p0)
java.util,SortedMap,entrySet,"Set<Entry<Key,Cookie>> entrySet()"
java.util.concurrent,ConcurrentSkipListMap,tailMap,"ConcurrentNavigableMap<Key,Cookie> tailMap(Key p0, boolean p1)"
java.lang,String,compareTo,int compareTo(String p0)
java.util,Entry,getKey,Key getKey()
java.util,Entry,getValue,Cookie getValue()
java.util,TreeMap,values,Collection<Cookie> values()
io.netty.handler.codec.http.cookie,Cookie,domain,String domain()
java.util.concurrent,ConcurrentHashMap,put,"Cookie put(Key p0, Cookie p1)"
java.util.concurrent,ConcurrentSkipListMap,put,"Cookie put(Key p0, Cookie p1)"
java.util.concurrent,ConcurrentHashMap,remove,Cookie remove(Object p0)
java.util.concurrent,ConcurrentSkipListMap,remove,Cookie remove(Object p0)
io.vertx.core.http,HttpClientOptions,getMaxRedirects,int getMaxRedirects()
java.util.function,Function,apply,Future<HttpClientRequest> apply(HttpClientResponse p0)
io.vertx.core.http.impl,HttpClientImpl,redirectHandler,"Function<HttpClientResponse,Future<HttpClientRequest>> redirectHandler()"
io.vertx.core,Future,onComplete,Future<HttpClientRequest> onComplete(Handler<AsyncResult<HttpClientRequest>> p0)
io.vertx.core,AsyncResult,result,HttpClientRequest result()
java.util,Iterator,next,Handler<HttpContext<?>> next()
io.vertx.core,Handler,handle,void handle(HttpContext<?> p0)
io.vertx.core,Handler,handle,void handle(AsyncResult<HttpResponse<T>> p0)
io.vertx.core.net,TCPSSLOptions,isSsl,boolean isSsl()
io.vertx.core.http.impl,HttpClientImpl,request,"HttpClientRequest request(HttpMethod p0, SocketAddress p1, RequestOptions p2)"
io.vertx.core.http,RequestOptions,setURI,RequestOptions setURI(String p0)
io.vertx.core.http,RequestOptions,setPort,RequestOptions setPort(int p0)
io.vertx.core.http,RequestOptions,setHost,RequestOptions setHost(String p0)
io.vertx.core.http,RequestOptions,setSsl,RequestOptions setSsl(Boolean p0)
io.vertx.core.http,RequestOptions,RequestOptions,RequestOptions()
java.net,URI,URI,"URI(String p0, String p1, String p2, int p3, String p4, String p5, String p6)"
io.vertx.core.http.impl,HttpClientImpl,requestAbs,"HttpClientRequest requestAbs(HttpMethod p0, SocketAddress p1, String p2)"
java.net,URI,toString,String toString()
io.vertx.core.http.impl,HttpClientImpl,request,"HttpClientRequest request(HttpMethod p0, SocketAddress p1, int p2, String p3, String p4)"
io.vertx.core.http,HttpClientRequest,setRawMethod,HttpClientRequest setRawMethod(String p0)
io.vertx.core,Promise,future,Future<HttpResponse<T>> future()
io.vertx.core,Future,onComplete,Future<HttpResponse<T>> onComplete(Handler<AsyncResult<HttpResponse<T>>> p0)
io.vertx.core,AsyncResult,result,HttpResponse<T> result()
io.vertx.core.http,HttpClientResponse,exceptionHandler,HttpClientResponse exceptionHandler(Handler<Throwable> p0)
io.vertx.core.http,HttpClientResponse,resume,HttpClientResponse resume()
io.vertx.core,AsyncResult,result,BodyStream<T> result()
io.vertx.core.streams,Pump,pump,"Pump pump(ReadStream<T> p0, WriteStream<T> p1)"
io.vertx.core.streams,WriteStream,exceptionHandler,WriteStream<Buffer> exceptionHandler(Handler<Throwable> p0)
io.vertx.core,Future,isComplete,boolean isComplete()
io.vertx.core.streams,WriteStream,end,void end()
io.vertx.core,Future,onComplete,Future<T> onComplete(Handler<AsyncResult<T>> p0)
io.vertx.core,Promise,complete,void complete(HttpResponse<T> p0)
io.vertx.core.http,HttpClientResponse,trailers,MultiMap trailers()
io.vertx.core.http,HttpClientResponse,cookies,List<String> cookies()
io.vertx.core,Future,result,T result()
io.vertx.core.streams,Pump,start,Pump start()
io.vertx.core,Future,onComplete,Future<HttpClientResponse> onComplete(Handler<AsyncResult<HttpClientResponse>> p0)
io.vertx.core,Promise,future,Future<HttpClientResponse> future()
io.vertx.core,AsyncResult,result,HttpClientResponse result()
io.vertx.core.http,HttpClientResponse,pause,HttpClientResponse pause()
io.vertx.core,Promise,tryComplete,boolean tryComplete(T p0)
io.vertx.core.http,HttpClientRequest,setTimeout,HttpClientRequest setTimeout(long p0)
io.vertx.core.streams,ReadStream,pause,ReadStream<Buffer> pause()
io.vertx.core,Future,onComplete,Future<Void> onComplete(Handler<AsyncResult<Void>> p0)
io.vertx.core,Promise,future,Future<Void> future()
io.vertx.core.streams,Pump,stop,Pump stop()
io.vertx.core.streams,ReadStream,endHandler,ReadStream<Buffer> endHandler(Handler<Void> p0)
io.vertx.core.streams,ReadStream,resume,ReadStream<Buffer> resume()
io.vertx.core.streams,ReadStream,exceptionHandler,ReadStream<Buffer> exceptionHandler(Handler<Throwable> p0)
io.vertx.core.http,HttpClientRequest,reset,boolean reset()
io.vertx.core.spi.json,JsonCodec,toBuffer,Buffer toBuffer(Object p0)
io.vertx.core,Future,onSuccess,Future<Void> onSuccess(Handler<Void> p0)
io.vertx.core.http,HttpClientRequest,sendHead,HttpClientRequest sendHead(Handler<HttpVersion> p0)
io.vertx.core.http,CaseInsensitiveHeaders,add,"MultiMap add(CharSequence p0, CharSequence p1)"
io.vertx.core,MultiMap,set,"MultiMap set(String p0, Iterable<String> p1)"
java.util,Encoder,encode,byte[] encode(byte[] p0)
java.util,ArrayList,ArrayList<ResponsePredicate>,ArrayList<ResponsePredicate>()
java.util,Map,forEach,"void forEach(BiConsumer<? super String,? super List<String>> p0)"
io.netty.buffer,UnpooledByteBufAllocator,UnpooledByteBufAllocator,UnpooledByteBufAllocator(boolean p0)
io.vertx.core.streams.impl,InboundBuffer,pause,InboundBuffer<Object> pause()
io.vertx.core.streams.impl,InboundBuffer,drainHandler,InboundBuffer<Object> drainHandler(Handler<Void> p0)
io.vertx.core.streams.impl,InboundBuffer,handler,InboundBuffer<Object> handler(Handler<Object> p0)
io.vertx.core.streams.impl,InboundBuffer,InboundBuffer<Object>,InboundBuffer<Object>(Context p0)
io.netty.handler.codec.http,DefaultFullHttpRequest,DefaultFullHttpRequest,"DefaultFullHttpRequest(HttpVersion p0, HttpMethod p1, String p2)"
io.netty.handler.codec.http.multipart,HttpPostRequestEncoder,HttpPostRequestEncoder,"HttpPostRequestEncoder(HttpDataFactory p0, HttpRequest p1, boolean p2, Charset p3, EncoderMode p4)"
io.netty.handler.codec.http.multipart,DefaultHttpDataFactory,DefaultHttpDataFactory,DefaultHttpDataFactory(long p0)
io.netty.handler.codec.http.multipart,HttpPostRequestEncoder,addBodyAttribute,"void addBodyAttribute(String p0, String p1)"
io.netty.handler.codec.http.multipart,HttpPostRequestEncoder,addBodyFileUpload,"void addBodyFileUpload(String p0, String p1, File p2, String p3, boolean p4)"
io.netty.handler.codec.http.multipart,MemoryFileUpload,MemoryFileUpload,"MemoryFileUpload(String p0, String p1, String p2, String p3, Charset p4, long p5)"
io.netty.handler.codec.http.multipart,AbstractMemoryHttpData,setContent,void setContent(ByteBuf p0)
io.netty.handler.codec.http.multipart,HttpPostRequestEncoder,addBodyHttpData,void addBodyHttpData(InterfaceHttpData p0)
io.netty.handler.codec.http.multipart,HttpPostRequestEncoder,finalizeRequest,HttpRequest finalizeRequest()
io.vertx.core,Handler,handle,void handle(Object p0)
io.netty.handler.codec.http.multipart,HttpPostRequestEncoder,isChunked,boolean isChunked()
io.netty.handler.codec.http.multipart,HttpPostRequestEncoder,readChunk,HttpContent readChunk(ByteBufAllocator p0)
io.netty.buffer,ByteBufHolder,content,ByteBuf content()
io.vertx.core.buffer,Buffer,buffer,Buffer buffer(ByteBuf p0)
io.vertx.core.streams.impl,InboundBuffer,write,boolean write(Object p0)
io.netty.handler.codec.http.multipart,HttpPostRequestEncoder,isEndOfInput,boolean isEndOfInput()
io.netty.handler.codec.http,DefaultFullHttpRequest,content,ByteBuf content()
io.vertx.core.http.impl,HeadersAdaptor,HeadersAdaptor,HeadersAdaptor(HttpHeaders p0)
io.netty.handler.codec.http,DefaultHttpMessage,headers,HttpHeaders headers()
io.netty.handler.codec.http.cookie,ClientCookieEncoder,encode,String encode(Cookie p0)
java.net,URI,getHost,String getHost()
java.net,URI,create,URI create(String p0)
io.vertx.core.http,HttpClientRequest,absoluteURI,String absoluteURI()
io.netty.handler.codec.http.cookie,ClientCookieDecoder,decode,Cookie decode(String p0)
io.netty.handler.codec.http.cookie,Cookie,setDomain,void setDomain(String p0)
io.vertx.core.http,HttpClientRequest,path,String path()
java.util.concurrent,CopyOnWriteArrayList,CopyOnWriteArrayList<Handler<HttpContext<?>>>,CopyOnWriteArrayList<Handler<HttpContext<?>>>()
java.util.concurrent,CopyOnWriteArrayList,CopyOnWriteArrayList<Handler<HttpContext<?>>>,CopyOnWriteArrayList<Handler<HttpContext<?>>>(Collection<? extends Handler<HttpContext<?>>> p0)
io.vertx.core.http,HttpClientOptions,getDefaultPort,int getDefaultPort()
io.vertx.core.http,RequestOptions,isSsl,Boolean isSsl()
io.vertx.core.http,RequestOptions,getPort,int getPort()
io.vertx.core.http,RequestOptions,getHost,String getHost()
io.vertx.core.http,RequestOptions,getURI,String getURI()
io.vertx.core,VertxException,VertxException,VertxException(String p0)
java.net,URL,getFile,String getFile()
io.vertx.core.impl,VertxInternal,getOrCreateContext,ContextInternal getOrCreateContext()
io.vertx.core.http.impl,HttpClientImpl,getVertx,VertxInternal getVertx()
io.vertx.core.http,CaseInsensitiveHeaders,add,"MultiMap add(String p0, String p1)"
io.vertx.core.http,CaseInsensitiveHeaders,add,"MultiMap add(CharSequence p0, Iterable<CharSequence> p1)"
io.vertx.core.http,CaseInsensitiveHeaders,add,"MultiMap add(String p0, Iterable<String> p1)"
io.vertx.core.http,CaseInsensitiveHeaders,remove,MultiMap remove(CharSequence p0)
io.vertx.core.http,CaseInsensitiveHeaders,remove,MultiMap remove(String p0)
java.util.function,Function,apply,Throwable apply(ResponsePredicateResult p0)
java.util.function,Function,apply,ResponsePredicateResult apply(HttpResponse<Void> p0)
java.util,ArrayList,ArrayList<E>,ArrayList<E>(Collection<? extends E> p0)
io.vertx.core.impl,NoStackTraceThrowable,NoStackTraceThrowable,NoStackTraceThrowable(String p0)
io.vertx.core,Vertx,exceptionHandler,Vertx exceptionHandler(Handler<Throwable> p0)
io.vertx.core,Context,isOnEventLoopThread,boolean isOnEventLoopThread()
io.vertx.ext.unit.junit,RepeatRule,RepeatRule,RepeatRule()
io.vertx.core.http,HttpTestBase,HttpTestBase,HttpTestBase()
io.vertx.core,VertxOptions,setAddressResolverOptions,VertxOptions setAddressResolverOptions(AddressResolverOptions p0)
io.vertx.test.core,VertxTestBase,getOptions,VertxOptions getOptions()
io.vertx.core.dns,AddressResolverOptions,setHostsValue,AddressResolverOptions setHostsValue(Buffer p0)
io.vertx.core.dns,AddressResolverOptions,AddressResolverOptions,AddressResolverOptions()
io.vertx.core.http,HttpTestBase,setUp,void setUp()
io.vertx.core.http,HttpTestBase,startServer,void startServer()
java.nio.file,Files,createTempFile,"Path createTempFile(String p0, String p1, FileAttribute<?>[] p2)"
io.vertx.core.file,FileSystem,openBlocking,"AsyncFile openBlocking(String p0, OpenOptions p1)"
io.vertx.core.file,OpenOptions,setTruncateExisting,OpenOptions setTruncateExisting(boolean p0)
io.vertx.core.file,OpenOptions,setSync,OpenOptions setSync(boolean p0)
io.vertx.core.file,AsyncFile,write,AsyncFile write(Buffer p0)
io.vertx.core.file,AsyncFile,close,void close(Handler<AsyncResult<Void>> p0)
java.util.function,BiFunction,apply,"List<Thread> apply(Thread p0, Thread p1)"
java.util,ArrayList,ArrayList<ClientPhase>,ArrayList<ClientPhase>()
java.util.concurrent,CopyOnWriteArrayList,CopyOnWriteArrayList<String>,CopyOnWriteArrayList<String>()
java.util.concurrent,CopyOnWriteArrayList,add,boolean add(String p0)
java.nio.file,Files,write,"Path write(Path p0, byte[] p1, OpenOption[] p2)"
java.util.function,Consumer,accept,void accept(HttpServerRequest p0)
io.vertx.ext.unit,Completion,awaitSuccess,void awaitSuccess(long p0)
io.netty.handler.codec.http.cookie,DefaultCookie,DefaultCookie,"DefaultCookie(String p0, String p1)"
io.netty.handler.codec.http.cookie,Cookie,setPath,void setPath(String p0)
java.util.stream,Stream,toArray,A[] toArray(IntFunction<A[]> p0)
java.util.stream,IntStream,mapToObj,Stream<U> mapToObj(IntFunction<? extends U> p0)
java.util.stream,IntStream,range,"IntStream range(int p0, int p1)"
io.vertx.ext.unit,TestContext,async,Async async(int p0)
io.vertx.ext.unit,Async,countDown,void countDown()
io.netty.handler.codec.http.cookie,Cookie,value,String value()
java.util.function,Consumer,accept,void accept(HttpRequest<Buffer> p0)
io.vertx.core.file,AsyncFile,close,void close()
io.vertx.core,Vertx,deployVerticle,"void deployVerticle(Verticle p0, Handler<AsyncResult<String>> p1)"
io.vertx.core,Vertx,undeploy,"void undeploy(String p0, Handler<AsyncResult<Void>> p1)"
io.netty.handler.codec.http.cookie,Cookie,setSecure,void setSecure(boolean p0)
java.lang,Iterable,iterator,Iterator<Cookie> iterator()
java.util,Iterator,next,Cookie next()
io.vertx.ext.unit,TestContext,assertEquals,"TestContext assertEquals(Object p0, Object p1, String p2)"
io.vertx.core.http,HttpClientOptions,getMaxPoolSize,int getMaxPoolSize()
io.vertx.core,MultiMap,getAll,List<String> getAll(CharSequence p0)
java.util.function,Function,apply,HttpRequest<Buffer> apply(WebClient p0)
io.vertx.core.buffer,Buffer,toJsonArray,JsonArray toJsonArray()
java.util.function,BiConsumer,accept,"void accept(String p0, Buffer p1)"
io.vertx.core,Vertx,createNetServer,NetServer createNetServer()
io.vertx.core.net,NetServer,connectHandler,NetServer connectHandler(Handler<NetSocket> p0)
io.vertx.core.net,NetServer,listen,"NetServer listen(int p0, String p1, Handler<AsyncResult<NetServer>> p2)"
java.util.concurrent.atomic,AtomicReference,AtomicReference<HttpConnection>,AtomicReference<HttpConnection>()
java.util.concurrent.atomic,AtomicReference,AtomicReference<Handler<Buffer>>,AtomicReference<Handler<Buffer>>()
java.util.concurrent.atomic,AtomicReference,AtomicReference<Handler<Void>>,AtomicReference<Handler<Void>>()
java.util.concurrent.atomic,AtomicReference,set,void set(HttpConnection p0)
java.util.concurrent.atomic,AtomicReference,set,void set(Handler<Buffer> p0)
java.util.concurrent.atomic,AtomicReference,set,void set(Handler<Void> p0)
java.util.concurrent.atomic,AtomicReference,get,Handler<Void> get()
java.util.concurrent.atomic,AtomicReference,get,Handler<Buffer> get()
java.util.concurrent.atomic,AtomicReference,get,HttpConnection get()
java.util.concurrent,CompletableFuture,CompletableFuture<Void>,CompletableFuture<Void>()
java.util.concurrent,CompletableFuture,complete,boolean complete(Void p0)
java.util.concurrent,CompletableFuture,thenAccept,CompletableFuture<Void> thenAccept(Consumer<? super Void> p0)
java.lang,Exception,Exception,"Exception(String p0, Throwable p1)"
io.vertx.core.http,HttpServerResponse,drainHandler,HttpServerResponse drainHandler(Handler<Void> p0)
java.lang,AssertionError,AssertionError,AssertionError()
java.util.concurrent.atomic,AtomicLong,AtomicLong,AtomicLong()
java.util.concurrent.atomic,AtomicLong,addAndGet,long addAndGet(long p0)
java.util.concurrent.atomic,AtomicLong,get,long get()
io.vertx.core.file,FileSystem,writeFileBlocking,"FileSystem writeFileBlocking(String p0, Buffer p1)"
java.util,ArrayList,ArrayList<Upload>,ArrayList<Upload>()
io.vertx.core.http,HttpServerFileUpload,handler,HttpServerFileUpload handler(Handler<Buffer> p0)
java.util.function,BiConsumer,accept,"void accept(HttpServerRequest p0, List<Upload> p1)"
io.vertx.core,MultiMap,contains,"boolean contains(String p0, String p1, boolean p2)"
io.vertx.core.net,SocketAddress,inetSocketAddress,"SocketAddress inetSocketAddress(int p0, String p1)"
io.vertx.core.http,HttpServerOptions,setKeyStoreOptions,HttpServerOptions setKeyStoreOptions(JksOptions p0)
java.util.function,Supplier,get,JksOptions get()
io.vertx.core.http,HttpServerOptions,setSni,HttpServerOptions setSni(boolean p0)
io.vertx.core.http,HttpConnection,indicatedServerName,String indicatedServerName()
io.vertx.core.http,HttpTestBase,startServer,void startServer(HttpServer p0)
io.vertx.core.http,HttpTestBase,startProxy,"void startProxy(String p0, ProxyType p1)"
io.vertx.test.proxy,TestProxyBase,setForceUri,void setForceUri(String p0)
io.vertx.core.net,ProxyOptions,setPort,ProxyOptions setPort(int p0)
io.vertx.core.net,ProxyOptions,ProxyOptions,ProxyOptions()
io.vertx.test.proxy,TestProxyBase,getPort,int getPort()
io.vertx.test.proxy,TestProxyBase,getLastUri,String getLastUri()
java.util,UUID,fromString,UUID fromString(String p0)
java.lang,IndexOutOfBoundsException,IndexOutOfBoundsException,IndexOutOfBoundsException(String p0)
java.util.function,Consumer,accept,void accept(HttpServerResponse p0)
java.util.function,Consumer,accept,void accept(HttpRequest<?> p0)
java.util.function,Consumer,accept,void accept(AsyncResult<?> p0)
io.vertx.core.streams,WriteStream,write,"WriteStream<Buffer> write(Buffer p0, Handler<AsyncResult<Void>> p1)"
io.vertx.core.streams,WriteStream,end,void end(Handler<AsyncResult<Void>> p0)
io.vertx.core.spi.json,JsonCodec,fromBuffer,"T fromBuffer(Buffer p0, Class<T> p1)"
java.util.function,Function,identity,"Function<T,T> identity()"
io.vertx.core,Handler,handle,void handle(AsyncResult<BodyStream<T>> p0)
io.vertx.core,Promise,future,Future<T> future()
java.util.function,Function,apply,T apply(Buffer p0)
io.vertx.core,Promise,complete,void complete(T p0)
io.vertx.core.streams,WriteStream,setWriteQueueMaxSize,WriteStream<Buffer> setWriteQueueMaxSize(int p0)
io.vertx.core.streams,WriteStream,drainHandler,WriteStream<Buffer> drainHandler(Handler<Void> p0)
io.vertx.core,Handler,handle,void handle(AsyncResult<BodyStream<Void>> p0)
java.lang,System,getProperty,"String getProperty(String p0, String p1)"
java.lang,System,getenv,String getenv(String p0)
java.util,ArrayList,ArrayList<FormDataPart>,ArrayList<FormDataPart>()
java.util,LinkedHashMap,"LinkedHashMap<String,String>","LinkedHashMap<String,String>()"
java.util,Map,forEach,"void forEach(BiConsumer<? super String,? super String> p0)"
java.util.concurrent,CompletableFuture,CompletableFuture<List<Link>>,CompletableFuture<List<Link>>()
java.util.concurrent,CompletableFuture,complete,boolean complete(List<Link> p0)
io.vertx.core,AsyncResult,result,List<Link> result()
graphql.schema.idl,Builder,build,RuntimeWiring build()
graphql.schema.idl,Builder,type,"Builder type(String p0, UnaryOperator<Builder> p1)"
graphql.schema.idl,RuntimeWiring,newRuntimeWiring,Builder newRuntimeWiring()
graphql.schema.idl,Builder,dataFetcher,"Builder dataFetcher(String p0, DataFetcher<> p1)"
graphql.schema,DataFetchingEnvironment,getContext,T getContext()
graphql.schema.idl,Builder,wiringFactory,Builder wiringFactory(WiringFactory p0)
graphql.language,FieldDefinition,getName,String getName()
graphql.schema.idl,FieldWiringEnvironment,getFieldDefinition,FieldDefinition getFieldDefinition()
org.dataloader,DataLoader,newDataLoader,"DataLoader<K,V> newDataLoader(BatchLoaderWithContext<K,V> p0)"
org.dataloader,DataLoaderRegistry,register,"DataLoaderRegistry register(String p0, DataLoader<?,?> p1)"
org.dataloader,DataLoaderRegistry,DataLoaderRegistry,DataLoaderRegistry()
io.vertx.core.http,HttpServerOptions,addWebSocketSubProtocol,HttpServerOptions addWebSocketSubProtocol(String p0)
java.util,HashMap,"HashMap<String,ApolloWSMessageType>","HashMap<String,ApolloWSMessageType>(int p0)"
java.util,Map,put,"ApolloWSMessageType put(String p0, ApolloWSMessageType p1)"
java.util,Map,get,ApolloWSMessageType get(Object p0)
java.util,HashMap,"HashMap<String,String>","HashMap<String,String>(Map<? extends String,? extends String> p0)"
java.util.concurrent,CompletableFuture,CompletableFuture<List<V>>,CompletableFuture<List<V>>()
io.vertx.core,Future,onComplete,Future<List<V>> onComplete(Handler<AsyncResult<List<V>>> p0)
io.vertx.core,Promise,future,Future<List<V>> future()
java.util.concurrent,CompletableFuture,complete,boolean complete(List<V> p0)
io.vertx.core,AsyncResult,result,List<V> result()
java.util.concurrent,CompletableFuture,CompletableFuture<T>,CompletableFuture<T>()
java.util.concurrent,CompletableFuture,complete,boolean complete(T p0)
io.vertx.core,AsyncResult,result,T result()
java.util.function,BiConsumer,accept,"void accept(DataFetchingEnvironment p0, Promise<T> p1)"
java.util.concurrent,CompletableFuture,"CompletableFuture<Map<K,V>>","CompletableFuture<Map<K,V>>()"
io.vertx.core,Future,onComplete,"Future<Map<K,V>> onComplete(Handler<AsyncResult<Map<K,V>>> p0)"
io.vertx.core,Promise,future,"Future<Map<K,V>> future()"
java.util.concurrent,CompletableFuture,complete,"boolean complete(Map<K,V> p0)"
io.vertx.core,AsyncResult,result,"Map<K,V> result()"
graphql.schema,PropertyDataFetcher,PropertyDataFetcher,PropertyDataFetcher(String p0)
graphql.schema,DataFetchingEnvironment,getSource,T getSource()
graphql.schema,PropertyDataFetcher,getPropertyName,String getPropertyName()
graphql.schema,PropertyDataFetcher,get,Object get(DataFetchingEnvironment p0)
io.vertx.core,Context,owner,Vertx owner()
java.util.concurrent,ConcurrentHashMap,"ConcurrentHashMap<String,Subscription>","ConcurrentHashMap<String,Subscription>()"
io.vertx.core,Handler,handle,void handle(ServerWebSocket p0)
io.vertx.core,Handler,handle,void handle(ApolloWSMessage p0)
io.vertx.core.http,WebSocketBase,isClosed,boolean isClosed()
graphql,ExecutionInput,newExecutionInput,Builder newExecutionInput()
java.util.function,Function,apply,DataLoaderRegistry apply(ApolloWSMessage p0)
java.util.function,Function,apply,Locale apply(ApolloWSMessage p0)
graphql,Builder,query,Builder query(String p0)
graphql,Builder,context,Builder context(Object p0)
java.util.function,Function,apply,Object apply(ApolloWSMessage p0)
graphql,Builder,dataLoaderRegistry,Builder dataLoaderRegistry(DataLoaderRegistry p0)
graphql,Builder,locale,Builder locale(Locale p0)
graphql,Builder,operationName,Builder operationName(String p0)
graphql,Builder,variables,"Builder variables(Map<String,Object> p0)"
java.util.concurrent,CompletableFuture,whenCompleteAsync,"CompletableFuture<ExecutionResult> whenCompleteAsync(BiConsumer<? super ExecutionResult,? super Throwable> p0, Executor p1)"
graphql,GraphQL,executeAsync,CompletableFuture<ExecutionResult> executeAsync(Builder p0)
graphql,ExecutionResult,getData,T getData()
graphql,ExecutionResult,toSpecification,"Map<String,Object> toSpecification()"
io.vertx.core.logging,Logger,debug,"void debug(Object p0, Throwable p1)"
java.util.concurrent.atomic,AtomicReference,AtomicReference<Subscription>,AtomicReference<Subscription>()
org.reactivestreams,Publisher,subscribe,void subscribe(Subscriber<? super ExecutionResult> p0)
java.util.concurrent.atomic,AtomicReference,set,void set(Subscription p0)
java.util,Map,put,"Subscription put(String p0, Subscription p1)"
org.reactivestreams,Subscription,request,void request(long p0)
java.util.concurrent.atomic,AtomicReference,get,Subscription get()
java.util,Map,remove,Subscription remove(Object p0)
java.util,Map,get,Subscription get(Object p0)
org.reactivestreams,Subscription,cancel,void cancel()
java.io,PrintWriter,PrintWriter,PrintWriter(Writer p0)
java.lang,Throwable,printStackTrace,void printStackTrace(PrintWriter p0)
io.vertx.core.http,ServerWebSocket,writeTextMessage,ServerWebSocket writeTextMessage(String p0)
java.lang,Iterable,forEach,void forEach(Consumer<? super Subscription> p0)
java.util,Map,values,Collection<Subscription> values()
java.util,ArrayList,ArrayList,ArrayList(int p0)
java.util,ArrayList,ArrayList,ArrayList()
java.util,ArrayList,ArrayList,ArrayList(Collection<? extends E> p0)
java.util.stream,Stream,collect,"R collect(Collector<? super CompletableFuture<JsonObject>,A,R> p0)"
java.util.stream,Stream,map,"Stream<R> map(Function<? super GraphQLQuery,? extends R> p0)"
java.util,Collection,stream,Stream<GraphQLQuery> stream()
java.util.concurrent,CompletableFuture,whenComplete,"CompletableFuture<Buffer> whenComplete(BiConsumer<? super Buffer,? super Throwable> p0)"
java.util.concurrent,CompletableFuture,thenApply,"CompletableFuture<U> thenApply(Function<? super Void,? extends U> p0)"
java.util.concurrent,CompletableFuture,allOf,CompletableFuture<Void> allOf(CompletableFuture<?>[] p0)
java.util.stream,Stream,collect,"R collect(Supplier<R> p0, BiConsumer<R,? super JsonObject> p1, BiConsumer<R,R> p2)"
java.util.stream,Stream,map,"Stream<R> map(Function<? super CompletableFuture<JsonObject>,? extends R> p0)"
java.util,Collection,stream,Stream<CompletableFuture<JsonObject>> stream()
java.util.concurrent,CompletableFuture,join,T join()
io.vertx.core.json,JsonArray,addAll,JsonArray addAll(JsonArray p0)
java.util.concurrent,CompletableFuture,thenApply,"CompletableFuture<U> thenApply(Function<? super JsonObject,? extends U> p0)"
java.util.function,Function,apply,DataLoaderRegistry apply(RoutingContext p0)
java.util.function,Function,apply,Locale apply(RoutingContext p0)
java.util.function,Function,apply,Object apply(RoutingContext p0)
java.util.concurrent,CompletableFuture,thenApplyAsync,"CompletableFuture<U> thenApplyAsync(Function<? super ExecutionResult,? extends U> p0, Executor p1)"
graphql,GraphQL,executeAsync,CompletableFuture<ExecutionResult> executeAsync(ExecutionInput p0)
graphql,Builder,build,ExecutionInput build()
com.fasterxml.jackson.databind,JsonDeserializer,JsonDeserializer,JsonDeserializer()
com.fasterxml.jackson.core,JsonParser,isExpectedStartArrayToken,boolean isExpectedStartArrayToken()
com.fasterxml.jackson.core,JsonParser,readValueAs,T readValueAs(Class<T> p0)
java.util.function,Function,apply,MultiMap apply(RoutingContext p0)
io.vertx.core,Vertx,deployVerticle,void deployVerticle(Verticle p0)
graphql.schema.idl,SchemaParser,SchemaParser,SchemaParser()
graphql.schema.idl,SchemaParser,parse,TypeDefinitionRegistry parse(String p0)
graphql.schema.idl,SchemaGenerator,SchemaGenerator,SchemaGenerator()
graphql.schema.idl,SchemaGenerator,makeExecutableSchema,"GraphQLSchema makeExecutableSchema(TypeDefinitionRegistry p0, RuntimeWiring p1)"
graphql,Builder,build,GraphQL build()
graphql,GraphQL,newGraphQL,Builder newGraphQL(GraphQLSchema p0)
graphql.schema,DataFetchingEnvironment,getArgument,T getArgument(String p0)
java.util.stream,Stream,collect,"R collect(Collector<? super Link,A,R> p0)"
java.util.stream,Stream,filter,Stream<Link> filter(Predicate<? super Link> p0)
java.util,Collection,stream,Stream<Link> stream()
org.reactivestreams,Subscriber,onNext,void onNext(Object p0)
org.reactivestreams,Subscriber,onComplete,void onComplete()
java.util.concurrent.atomic,AtomicReference,compareAndSet,"boolean compareAndSet(Subscription p0, Subscription p1)"
org.reactivestreams,Subscriber,onSubscribe,void onSubscribe(Subscription p0)
java.util.stream,IntStream,forEach,void forEach(IntConsumer p0)
org.reactivestreams,Subscriber,onNext,"void onNext(Map<String,Object> p0)"
io.vertx.core.http,HttpClient,webSocket,"void webSocket(String p0, Handler<AsyncResult<WebSocket>> p1)"
java.util.concurrent.atomic,AtomicReference,compareAndSet,"boolean compareAndSet(String p0, String p1)"
io.vertx.core.http,WebSocket,write,WebSocket write(Buffer p0)
io.vertx.core.buffer,Buffer,getBuffer,"Buffer getBuffer(int p0, int p1)"
java.util.function,BiConsumer,accept,"void accept(WebSocket p0, JsonObject p1)"
io.vertx.core.net,NetServer,exceptionHandler,NetServer exceptionHandler(Handler<Throwable> p0)
io.vertx.core.net,NetSocket,pause,NetSocket pause()
io.vertx.core.net,NetClient,connect,"NetClient connect(int p0, String p1, Handler<AsyncResult<NetSocket>> p2)"
io.vertx.core,Vertx,createNetClient,NetClient createNetClient(NetClientOptions p0)
io.vertx.core.net,NetClientOptions,setSoLinger,NetClientOptions setSoLinger(int p0)
io.vertx.core.net,NetClientOptions,NetClientOptions,NetClientOptions()
io.vertx.core.streams,ReadStream,pipeTo,"void pipeTo(WriteStream<Buffer> p0, Handler<AsyncResult<Void>> p1)"
io.vertx.core.net,NetSocket,close,void close()
io.vertx.core.net,NetSocket,resume,NetSocket resume()
io.vertx.core.net,NetSocket,close,void close(Handler<AsyncResult<Void>> p0)
io.vertx.core.net,NetServer,close,void close()
io.vertx.core.buffer,Buffer,toJson,Object toJson()
io.vertx.core.json,JsonArray,isEmpty,boolean isEmpty()
io.vertx.core.json,JsonArray,getJsonObject,JsonObject getJsonObject(int p0)
java.util.stream,Stream,filter,Stream<String> filter(Predicate<? super String> p0)
io.vertx.core,Future,onComplete,Future<JsonObject> onComplete(Handler<AsyncResult<JsonObject>> p0)
io.vertx.core,Promise,future,Future<JsonObject> future()
io.vertx.core,Promise,complete,void complete(JsonObject p0)
java.util.stream,Stream,map,"Stream<R> map(Function<? super Link,? extends R> p0)"
graphql.schema,DataFetchingEnvironment,getLocale,Locale getLocale()
java.util,Locale,toLanguageTag,String toLanguageTag()
io.vertx.core.http,HttpClient,post,HttpClientRequest post(String p0)
java.util.concurrent.atomic,AtomicReference,AtomicReference<Object>,AtomicReference<Object>()
java.util.concurrent.atomic,AtomicReference,compareAndSet,"boolean compareAndSet(Object p0, Object p1)"
java.util.concurrent.atomic,AtomicReference,get,Object get()
java.util,HashMap,"HashMap<String,User>","HashMap<String,User>()"
java.util,ArrayList,ArrayList<Link>,ArrayList<Link>()
java.util,Map,put,"User put(String p0, User p1)"
java.util,Collections,unmodifiableList,List<T> unmodifiableList(List<? extends T> p0)
java.lang,Class,cast,T cast(Object p0)
java.util.stream,Stream,map,"Stream<R> map(Function<? super User,? extends R> p0)"
java.util,Map,get,User get(Object p0)
io.vertx.core,Promise,complete,void complete(List<User> p0)
java.util.stream,Stream,collect,"R collect(Collector<? super User,A,R> p0)"
java.util,Map,get,V get(Object p0)
graphql.execution.instrumentation.dataloader,DataLoaderDispatcherInstrumentation,DataLoaderDispatcherInstrumentation,DataLoaderDispatcherInstrumentation()
graphql,Builder,instrumentation,Builder instrumentation(Instrumentation p0)
graphql.schema,DataFetchingEnvironment,getDataLoader,"DataLoader<K,V> getDataLoader(String p0)"
org.dataloader,DataLoader,load,CompletableFuture<User> load(String p0)
io.vertx.core,Promise,complete,"void complete(Map<String,User> p0)"
org.dataloader,DataLoader,newMappedDataLoader,"DataLoader<K,V> newMappedDataLoader(MappedBatchLoaderWithContext<K,V> p0)"
java.util,ArrayList,size,int size()
java.util,ArrayList,get,GraphQLQuery get(int p0)
