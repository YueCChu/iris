import java
import semmle.code.java.dataflow.DataFlow
private import semmle.code.java.dataflow.ExternalFlow

predicate isGPTDetectedSink(DataFlow::Node snk) {
    exists(Call c |
        c.getCallee().getName() = "getTemplate" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("freemarker.template", "Configuration") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "process" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("freemarker.template", "Template") and
        ( c.getArgument(1) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "existsBlocking" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.file", "FileSystem") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "readFileBlocking" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.file", "FileSystem") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "createTempFile" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.io", "File") and
        ( c.getArgument(0) = snk.asExpr().(Argument)  or  c.getArgument(1) = snk.asExpr().(Argument)  or  c.getArgument(2) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "PrintWriter" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.io", "PrintWriter") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "compile" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("com.github.jknack.handlebars", "Handlebars") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "getTemplate" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("de.neuland.jade4j", "JadeConfiguration") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "execute" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("org.mvel2.templates", "TemplateRuntime") and
        ( c.getArgument(1) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "getTemplate" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("com.mitchellbosecke.pebble", "PebbleEngine") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "tryLoad" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("com.fizzed.rocker.runtime", "PlainTextUnloadedClassLoader") and
        ( c.getArgument(1) = snk.asExpr().(Argument)  or  c.getArgument(2) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "tryGet" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("com.fizzed.rocker.runtime", "PlainTextUnloadedClassLoader") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "process" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("org.thymeleaf", "TemplateEngine") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "handle" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core", "Handler") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "handle" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core", "Handler") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "streamToFileSystem" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpServerFileUpload") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "mkdirsBlocking" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.file", "FileSystem") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "exists" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.file", "FileSystem") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "delete" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.file", "FileSystem") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "handle" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core", "Handler") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "props" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.file", "FileSystem") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "propsBlocking" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.file", "FileSystem") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "handle" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core", "Handler") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "sendFile" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpServerResponse") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "sendFile" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpServerResponse") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "sendFile" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpServerResponse") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "readDir" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.file", "FileSystem") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "accept" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.util.function", "BiConsumer") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "getResourceAsStream" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.lang", "ClassLoader") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "deployVerticle" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core", "Vertx") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "getInputStream" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.net", "URLConnection") and
        ( c.getQualifier() = snk.asExpr() )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "deleteRecursiveBlocking" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.file", "FileSystem") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "deleteBlocking" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.file", "FileSystem") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "readDirBlocking" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.file", "FileSystem") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "readAllBytes" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.nio.file", "Files") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "mkdirs" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.io", "File") and
        ( c.getQualifier() = snk.asExpr() )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "createNewFile" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.io", "File") and
        ( c.getQualifier() = snk.asExpr() )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "createTempFile" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.io", "File") and
        ( c.getArgument(0) = snk.asExpr().(Argument)  or  c.getArgument(1) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "exec" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.lang", "Runtime") and
        ( c.getArgument(0) = snk.asExpr().(Argument)  or  c.getArgument(1) = snk.asExpr().(Argument)  or  c.getArgument(2) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "readLocation" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.swagger.v3.parser", "OpenAPIV3Parser") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "loadRef" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.swagger.v3.parser", "ResolverCache") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "parse" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("javax.xml.parsers", "DocumentBuilder") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "validate" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("javax.xml.validation", "Validator") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "newSchema" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("javax.xml.validation", "SchemaFactory") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "readAllLines" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.nio.file", "Files") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "FileOutputStream" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.io", "FileOutputStream") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "open" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.file", "FileSystem") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "addCrlPath" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.http", "HttpClientOptions") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "addBodyFileUpload" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.netty.handler.codec.http.multipart", "HttpPostRequestEncoder") and
        ( c.getArgument(1) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "openBlocking" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.file", "FileSystem") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "write" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.nio.file", "Files") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "accept" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("java.util.function", "BiConsumer") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "writeFileBlocking" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("io.vertx.core.file", "FileSystem") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "onNext" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("org.reactivestreams", "Subscriber") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
    or
    exists(Call c |
        c.getCallee().getName() = "onNext" and
        c.getCallee().getDeclaringType().getSourceDeclaration().hasQualifiedName("org.reactivestreams", "Subscriber") and
        ( c.getArgument(0) = snk.asExpr().(Argument) )
    )
}


