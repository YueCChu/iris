[
  {
    "package": "freemarker.template",
    "class": "Configuration",
    "method": "getTemplate",
    "signature": "Template getTemplate(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "freemarker.template",
    "class": "Template",
    "method": "process",
    "signature": "void process(Object p0, Writer p1)",
    "sink_args": [
      "p1"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "existsBlocking",
    "signature": "boolean existsBlocking(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "readFileBlocking",
    "signature": "Buffer readFileBlocking(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "createTempFile",
    "signature": "File createTempFile(String p0, String p1, File p2)",
    "sink_args": [
      "p0",
      "p1",
      "p2"
    ],
    "type": "sink"
  },
  {
    "package": "java.io",
    "class": "PrintWriter",
    "method": "PrintWriter",
    "signature": "PrintWriter(File p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "com.github.jknack.handlebars",
    "class": "Handlebars",
    "method": "compile",
    "signature": "Template compile(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "de.neuland.jade4j",
    "class": "JadeConfiguration",
    "method": "getTemplate",
    "signature": "JadeTemplate getTemplate(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "org.mvel2.templates",
    "class": "TemplateRuntime",
    "method": "execute",
    "signature": "Object execute(StringAppender p0, Object p1, VariableResolverFactory p2)",
    "sink_args": [
      "p1"
    ],
    "type": "sink"
  },
  {
    "package": "com.mitchellbosecke.pebble",
    "class": "PebbleEngine",
    "method": "getTemplate",
    "signature": "PebbleTemplate getTemplate(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "com.fizzed.rocker.runtime",
    "class": "PlainTextUnloadedClassLoader",
    "method": "tryLoad",
    "signature": "PlainTextUnloadedClassLoader tryLoad(ClassLoader p0, String p1, String p2)",
    "sink_args": [
      "p1",
      "p2"
    ],
    "type": "sink"
  },
  {
    "package": "com.fizzed.rocker.runtime",
    "class": "PlainTextUnloadedClassLoader",
    "method": "tryGet",
    "signature": "byte[] tryGet(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "org.thymeleaf",
    "class": "TemplateEngine",
    "method": "process",
    "signature": "void process(String p0, IContext p1, Writer p2)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(HttpServerRequest p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(AsyncResult<String> p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerFileUpload",
    "method": "streamToFileSystem",
    "signature": "HttpServerFileUpload streamToFileSystem(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "mkdirsBlocking",
    "signature": "FileSystem mkdirsBlocking(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "exists",
    "signature": "FileSystem exists(String p0, Handler<AsyncResult<Boolean>> p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "delete",
    "signature": "FileSystem delete(String p0, Handler<AsyncResult<Void>> p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(RoutingContext p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "props",
    "signature": "FileSystem props(String p0, Handler<AsyncResult<FileProps>> p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "propsBlocking",
    "signature": "FileProps propsBlocking(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core",
    "class": "Handler",
    "method": "handle",
    "signature": "void handle(AsyncResult<FileProps> p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "sendFile",
    "signature": "HttpServerResponse sendFile(String p0, long p1, long p2, Handler<AsyncResult<Void>> p3)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "sendFile",
    "signature": "HttpServerResponse sendFile(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpServerResponse",
    "method": "sendFile",
    "signature": "HttpServerResponse sendFile(String p0, Handler<AsyncResult<Void>> p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "readDir",
    "signature": "FileSystem readDir(String p0, Handler<AsyncResult<List<String>>> p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "java.util.function",
    "class": "BiConsumer",
    "method": "accept",
    "signature": "void accept(String p0, String p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "java.lang",
    "class": "ClassLoader",
    "method": "getResourceAsStream",
    "signature": "InputStream getResourceAsStream(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core",
    "class": "Vertx",
    "method": "deployVerticle",
    "signature": "void deployVerticle(String p0, Handler<AsyncResult<String>> p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "java.net",
    "class": "URLConnection",
    "method": "getInputStream",
    "signature": "InputStream getInputStream()",
    "sink_args": [
      "this"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "deleteRecursiveBlocking",
    "signature": "FileSystem deleteRecursiveBlocking(String p0, boolean p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "deleteBlocking",
    "signature": "FileSystem deleteBlocking(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "readDirBlocking",
    "signature": "List<String> readDirBlocking(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "java.nio.file",
    "class": "Files",
    "method": "readAllBytes",
    "signature": "byte[] readAllBytes(Path p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "mkdirs",
    "signature": "boolean mkdirs()",
    "sink_args": [
      "this"
    ],
    "type": "sink"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "createNewFile",
    "signature": "boolean createNewFile()",
    "sink_args": [
      "this"
    ],
    "type": "sink"
  },
  {
    "package": "java.io",
    "class": "File",
    "method": "createTempFile",
    "signature": "File createTempFile(String p0, String p1)",
    "sink_args": [
      "p0",
      "p1"
    ],
    "type": "sink"
  },
  {
    "package": "java.lang",
    "class": "Runtime",
    "method": "exec",
    "signature": "Process exec(String p0, String[] p1, File p2)",
    "sink_args": [
      "p0",
      "p1",
      "p2"
    ],
    "type": "sink"
  },
  {
    "package": "io.swagger.v3.parser",
    "class": "OpenAPIV3Parser",
    "method": "readLocation",
    "signature": "SwaggerParseResult readLocation(String p0, List<AuthorizationValue> p1, ParseOptions p2)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.swagger.v3.parser",
    "class": "ResolverCache",
    "method": "loadRef",
    "signature": "T loadRef(String p0, RefFormat p1, Class<T> p2)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "javax.xml.parsers",
    "class": "DocumentBuilder",
    "method": "parse",
    "signature": "Document parse(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "javax.xml.validation",
    "class": "Validator",
    "method": "validate",
    "signature": "void validate(Source p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "javax.xml.validation",
    "class": "SchemaFactory",
    "method": "newSchema",
    "signature": "Schema newSchema(Source p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "java.nio.file",
    "class": "Files",
    "method": "readAllLines",
    "signature": "List<String> readAllLines(Path p0, Charset p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "java.io",
    "class": "FileOutputStream",
    "method": "FileOutputStream",
    "signature": "FileOutputStream(File p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "open",
    "signature": "FileSystem open(String p0, OpenOptions p1, Handler<AsyncResult<AsyncFile>> p2)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.http",
    "class": "HttpClientOptions",
    "method": "addCrlPath",
    "signature": "HttpClientOptions addCrlPath(String p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.netty.handler.codec.http.multipart",
    "class": "HttpPostRequestEncoder",
    "method": "addBodyFileUpload",
    "signature": "void addBodyFileUpload(String p0, String p1, File p2, String p3, boolean p4)",
    "sink_args": [
      "p1"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "openBlocking",
    "signature": "AsyncFile openBlocking(String p0, OpenOptions p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "java.nio.file",
    "class": "Files",
    "method": "write",
    "signature": "Path write(Path p0, byte[] p1, OpenOption[] p2)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "java.util.function",
    "class": "BiConsumer",
    "method": "accept",
    "signature": "void accept(String p0, Buffer p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "io.vertx.core.file",
    "class": "FileSystem",
    "method": "writeFileBlocking",
    "signature": "FileSystem writeFileBlocking(String p0, Buffer p1)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "org.reactivestreams",
    "class": "Subscriber",
    "method": "onNext",
    "signature": "void onNext(Object p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  },
  {
    "package": "org.reactivestreams",
    "class": "Subscriber",
    "method": "onNext",
    "signature": "void onNext(Map<String,Object> p0)",
    "sink_args": [
      "p0"
    ],
    "type": "sink"
  }
]